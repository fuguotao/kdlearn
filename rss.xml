<?xml version="1.0" encoding="utf-8" ?>
<rss
  xmlns:content="//purl.org/rss/1.0/modules/content/"
  xmlns:wfw="//wellformedweb.org/CommentAPI/"
  xmlns:dc="//purl.org/dc/elements/1.1/"
  xmlns:atom="//www.w3.org/2005/Atom"
  version="2.0">
<channel>
  <title>Koding University</title>
  <atom:link
    href="//learn.koding.com/rss.xml"
    rel="self" type="application/rss+xml" />
  <link>//learn.koding.com</link>
  <description>
    An education center focused around the online development environment
    Koding.
  </description>
  <language>en</language>
  
  <item>
    <title>Getting Started with Clojure</title>
    <link>//learn.koding.com/guides/getting-started-clojure</link>
    <pubDate>"2015-11-11T00:00:00.000Z"</pubDate>
    <guid isPermaLink="true">//learn.koding.com/guides/getting-started-clojure</guid>
    <author>Jajati K. Sahoo</author>
    <description>In this guide we&amp;apos;ll introduce Clojure and how to write your first program
in Koding.
Clojure is a functional programming language that features a concise syntax,
elegant concurrency support. The best feature of this language is it&amp;apos;s ability
to compile into Java byte code and running it on the standard JVM.
  Setting up Clojure Clojure is written in Java and is available in the form of a Jar file. To use
the Clojure interpreter, one must download it from the maven repository below.
The below command will download Clojure in the current directory.
$ curl -O -J -L http://repo1.maven.org/maven2/org/clojure/clojure/1.6.0/clojure-1.6.0.zip
If the link doesn&amp;apos;t work, please take the latest Maven repository from
Clojure website.
  The Clojure Shell or the REPL To enter the Clojure shell or REPL, execute the following command from the Terminal.
To be able execute the following you must have a valid JRE in your VM.
$ java -cp clojure-1.6.0.jar clojure.main
Clojure 1.6.0
user=&amp;gt; (+ 10 10)
20

  Creating a shortcut for Clojure. If you wish to create a shortcut to the Clojure shell, you can create a small script and put it
in the ~/bin directory. You could name the script cloj.sh and put the following content
there.
#!/bin/bash

java -cp /home/your_user_name/clojure-1.6.0/clojure-1.6.0.jar clojure.main

Then use the following command to make it executable.
chmod +x ~/bin/cloj.sh

To access the Clojure shell, you can type $ cloj.sh command anywhere from the Terminal.
  Install Lein Lein is the build tool for Clojure. It creates the project structure and builds your
Clojure application. The following steps may be used to install Lein.

First download the lein application using the following command in your ~/bin directory.

curl -O -L -J https://raw.githubusercontent.com/technomancy/leiningen/stable/bin/lein


Make it executable using the command chmod +x ~/bin/lein
Run the lein program from Terminal. It&amp;apos;ll download itself.

</description>
  </item>
  
  <item>
    <title>How to mount a remote FTP server as a local directory on your Koding VM?</title>
    <link>//learn.koding.com/guides/mount-ftp-fs</link>
    <pubDate>"2015-11-02T00:00:00.000Z"</pubDate>
    <guid isPermaLink="true">//learn.koding.com/guides/mount-ftp-fs</guid>
    <author>Team Koding</author>
    <description>In some cases, you may have your code and other relevant files on another server
and need to keep them remote but still want to work on them. The easiest
way to achieve this is to mount the remote system as a local directory
on your Koding VM so that you can work on the files as if they were on
your Koding VM.
This guide walks you through the process of installing the required 
software on your Koding VM. We will use an application called curlftpfs.
You will also need:

IP address/domain name of the remote ftp server
ftp username and password for the remote server

  Installing the required application To install curlftpfs on your Koding VM, use the following command in Terminal:
sudo apt-get update
sudo apt-get install curlftpfs
  Configuring your VM Once installation is done, you will need to select a local folder on your VM
that will be the &amp;quot;mount point&amp;quot; for the remote server. As an exmaple, we will
create a new folder called remote-ftp in the VM&amp;apos;s /mnt directory. If you already know
which folder you wan to use, you can skip these steps:
sudo mkdir /mnt/remote-ftp
  Making the connection To initiate a connection, use the following command:
sudo curlftpfs ftp.yourserver.com /mnt/remote-ftp -o user=ftp-username:ftp-password,allow_other
Note: the allow_other option above will allow the non-root user on your VM to also access
the files available via this mount method.
 alertDo not add space after the comma or the allow_other argument will not be recognized.
 That should do it. Now if you navigate to the /mnt/remote-ftp directory and pull up a file
list, the list of files should be from the remote server.
 tipEven if the files in /mnt/remote-ftp are &amp;quot;owned&amp;quot; by the root user, any other user should
still be able to operate on the files because we used the allow_other option when we set
up the connection.
   Disconnecting To disconnect (unmount) the remote mount, use the following command:
sudo fusermount -u /mnt/remote-ftp
</description>
  </item>
  
  <item>
    <title>How to install Composer</title>
    <link>//learn.koding.com/guides/installing-composer</link>
    <pubDate>"2015-11-02T00:00:00.000Z"</pubDate>
    <guid isPermaLink="true">//learn.koding.com/guides/installing-composer</guid>
    <author>Team Koding</author>
    <description>Before you continue reading this guide why not try a more easy way, using the Koding Package Manager (kpm) and install Composer using just one command:
kpm install composer

  Getting started Before you can start the Composer install process, you&amp;apos;ll need to update all of the apt-get packages:
sudo apt-get update
Make sure you have PHP and the php5-curl package installed on your VM before you continue. You can install the later using the following command:
sudo apt-get install php5-curl
  Installing Composer for a Project To get Composer working for a new project you&amp;apos;ll need to run the following commands:
cd Web
mkdir your_project
cd your_project
Now download Composer into this folder with the following command:
curl -sS https://getcomposer.org/installer | php
This will install Composer and you should see something like this.
All settings correct for using Composer
Downloading...

Composer successfully installed to: /Web/your_project/composer.phar
Use it: php composer.phar
Alternatively you can specify the --install-dir option and it will download it wherever you specify:
curl -sS https://getcomposer.org/installer | php -- --install-dir=/var/www/another_folder
If you want to check if Composer is working properly, you can use the following command that will bring up a list of available commands:
php composer.phar
  Installing Composer Globally If you use PHP and Composer frequently, instead of installing Composer for each project, you can install it globally to use it in any directory of your Koding machine. 
 tipIf you install Composer using kpm, it is installed globally.
 Composer is installed globally when the executable file is located in one of the folders where Linux looks for programs, i.e. the folders included in the PATH environment variable.
For instance, it is installed globally if you put the composer file into the /usr/local/bin folder.
First, you must download the Composer into a folder in your Koding machine.
curl -sS https://getcomposer.org/installer | php
And then move the Composer file into the /usr/local/bin folder.
sudo mv composer.phar /usr/local/bin/composer
After copying the file, you can run the Composer in any folder using the following command:
composer
  Further Information Composer is a dependency manager for PHP projects. It allows you to find, download and configure components in your development projects. More information can be found in the Composer website and the Packagist component directory.
If you encounter any issues or have any questions please drop us an email here.
</description>
  </item>
  
  <item>
    <title>Updating the OS (and other packages) your VM</title>
    <link>//learn.koding.com/guides/upgrading-your-vm</link>
    <pubDate>"2015-11-02T00:00:00.000Z"</pubDate>
    <guid isPermaLink="true">//learn.koding.com/guides/upgrading-your-vm</guid>
    <author>Team Koding</author>
    <description> alertDO NOT update the OS to Ubuntu 15.xx, it will completely hose your VM and you will
need to reinit
 This guide will walk you through the process of upgrading the OS, Kernel and core packages on your Koding VM.
We will walk through the following steps:

Updating the packages (strictly update the current packages)
Updating the distribution/OS (install newly released packages)

So depending on your need, you can do 1) or 2) or both.
 alertEven though we have tested upgrading the VM, some updates may render your VM inaccessible so please proceed only if you know what you are doing. If you run into problems, you can always re-init your VM or send us a request via support@koding.com.
   A few prep commands To get started, log into your Koding account and check what version of the OS and Kernel that
you currently have by typing the following command in Terminal:
uname -rv
this should return you something like this:
3.13.0-29-generic #53-Ubuntu SMP Wed Jun 4 21:00:20 UTC 2014
Make a note of the kernel version, you can reference it later to ensure that the kernel update
worked.
You should also take a note of available disk space before you begin to ensure that you have adequate
space for all the updates. To get available disk space, type this command in Terminal:
df -h
and you should get back a result that looks similar to:
Filesystem      Size  Used Avail Use% Mounted on
/dev/xvda1      2.9G  1.6G  1.2G  57% /
none            4.0K     0  4.0K   0% /sys/fs/cgroup
udev            492M  8.0K  492M   1% /dev
tmpfs           100M  324K   99M   1% /run
none            5.0M     0  5.0M   0% /run/lock
none            497M     0  497M   0% /run/shm
none            100M     0  100M   0% /run/user
notice the number in line one, column &amp;quot;Avail&amp;quot;... that is the amount of disk space you have available.
Before beginning, you should update the list of available packages, this ensures that all updates
performed are against the latest levels available on the Ubuntu update servers.
To update your package list, type the following command in Terminal:
sudo apt-get update
 alertNo software has been updated at this time, just the list of available packages has been updated.
   Upgrading existing packages These series of commands will update all existing packages. These will NOT install new packages.
To update all currently installed packages and the packages that they depend on, to their latest levels, 
issue the following command in the Terminal:
sudo apt-get dist-upgrade
The system will analyze which packages on your VM need an update and will give you an estimate
of the space needed. Make sure that the number shown here is less than the number you saw earlier
when you checked for available disk space. To be sure, add an extra 100MB to the number apt-get
is telling you. If you run out of disk space during the install, you will render your VM unusable
so proceed with extreme caution and double check that you have space available.

If you have space, answer Y to the question and let the updates start. If you don&amp;apos;t have enough
space, press ctrl-c to cancel the update and try to free up space by deleting files that you don&amp;apos;t
need before starting again.
After several screens fly by, you may end up with a screen that looks like this:

Using your arrow keys and space bar, select both options. Hit tab key to move to &amp;quot;ok&amp;quot; and then press
enter to continue.
A few screens later, you may encounter the following:

Leave the pre-selected option (&amp;quot;keep the local version currently installed&amp;quot;) as-is, hit tab to move
to &amp;quot;ok&amp;quot; and then press enter to continue.
If all went well, you will end up on a screen that looks like this and the cursor is at the command
prompt again:

Congratulations! You have just finished upgrading your existing packages and the packages that they 
depend upon, to their latest official released levels. This will also include officially released 
security patches for all existing software packages.
Now, let&amp;apos;s reboot the VM. Open up the settings modal for your VM and toggle the on/off switch. Once
the VM turns off and you see the button to turn it on, go ahead and click it. This is necessary
to ensure that the updated files are brought into use.
Now if you type in the following command in Terminal:
uname -rv
you should see output as the following:
3.13.0-43-generic #72-Ubuntu SMP Mon Dec 8 19:35:06 UTC 2014
note that the kernel version has updated. You&amp;apos;ve just updated your VM to the latest Linux
kernel!
One last thing, to help clean up your system it&amp;apos;s always good to clean up.  If a new kernel was installed 
you can remove the old one, and if some packages are no longer used they can be removed as well.  To do this
type in the following command in Terminal:
sudo apt-get autoclean
  If something goes wrong Your Koding VM can easily be reinitialized to our official version (the version you got when you
made a new Koding account) so if all these updates leave you with an unusable VM, try reinitializing
your VM back to its original state.
</description>
  </item>
  
  <item>
    <title>How to install Wildfly</title>
    <link>//learn.koding.com/guides/installing-wildfly</link>
    <pubDate>"2015-11-02T00:00:00.000Z"</pubDate>
    <guid isPermaLink="true">//learn.koding.com/guides/installing-wildfly</guid>
    <author>Team Koding</author>
    <description>Wildlfy is a full-featured application server that support the latest Java EE 7 standards.
In constrast to other Java application servers such as Tomcat and Jetty, 
Wildfly supports technologies such as EJB and JSF without further configuration.
It is the preferred server for many developers interested in using these technologies in an opensource platform that is also commercially supported. 
This guide shows you how to install the Wildfly application server in your Koding Machine.
 alertThe installation of Wildfly requires 120MB of free disk space in your VM.
You can check the amount of free space you have by using the command: df -h (check the filesystem mounted in /).
If you need to free up space, follow this guide.
   Prerequisites To run Wildfly, you need Java installed in your Koding VM. 
By default, the Koding VMs include a OpenJDK installation that can be used.
You can check which Java version is installed using the java command:
java -version
 tipSome people prefer the Oracle JDK instead of OpenJDK. 
You can install Oracle JDK using the Koding Package Manager:
kpm install oracle-java7
   Installing Wildfly The first step to install Wildfly is to download the software from the official website.
There are many formats for the file (e.g. there are .zip and .tar.gz files).
Here we will use the .tar.gz file.
You can download the software directly into the /opt folder, the folder used to store optional packages and additional software.
After downloading the archive, you can extract the content directly in that folder.
You can use the following commands to download and extract the software:
cd /opt
sudo wget http://download.jboss.org/wildfly/9.0.2.Final/wildfly-9.0.2.Final.tar.gz 
sudo tar -xzvf wildfly-9.0.2.Final.tar.gz
The Wildfly software must be now located at /opt/wildfly-9.0.2.Final. 
To simplify the access to that folder, you can create a symbolic link:
sudo ln -s /opt/wildfly-9.0.2.Final /opt/wildfly
 tipTo free up disk space, after extracting the files, you can delete the downloaded archive:
sudo rm /opt/wildfly-9.0.2.Final.tar.gz
 First, you can create a wildlfy user group and a wildfly user using the following commands:
sudo addgroup wildfly
sudo useradd -g wildfly wildfly
Then, you must change the ownership of the Wildfly folder to the wildfly user.
sudo chown -R wildfly:wildfly /opt/wildfly-9.0.2.Final
 tipIn order to modify the Wildfly configuration files without using sudo all the time, you can add your Linux user to the wildfly group.
For instance, if your username is username, you may add your user to the wildfly group with the following command:
sudo usermod -a -G wildfly username
   Configuring Wildfly as an Ubuntu service In Ubuntu Linux, services (servers) such as apache and sshd starts when the machine boots and are managed using commands such as service.
Wildfly includes an script that can be included in the Linux configuration to start and run the server in the same way.
You must copy that script into the /etc/init.d folder using the following commands:
sudo cp /opt/wildfly/bin/init.d/wildfly-init-debian.sh /etc/init.d/wildfly
sudo chown root:root /etc/init.d/wildfly
sudo chmod ug+x /etc/init.d/wildfly
Now you can start the wildfly server using sudo service wildfly start, stop wildfly sudo service wildfly stop, 
and determine the status of the server with sudo service wildfly status.
To enable Wildfly to start automatically when the server starts, you must add the server to the Linux run-levels.
There are some files that define which programs must run in each level of the operating system.
You may add the wildfly to the startup process using the following command:
sudo update-rc.d wildfly defaults
  Configuring remote access to Wildfly By default, the Wildfly listen only to the localhost (i.e. it can be accessed only from the Koding VM).
To access Wildlfy from other machines (including your browser) you need to configure the server to listen to the other network interfaces in the machine.
You can change the wildfly configuration by editing the corresponding XML file.
sudo cd /opt/wildfly/standalone/configuration
sudo vi standalone.xml
You must change the public interface originally bounded to 127.0.0.1...
&amp;lt;interface name=&amp;quot;public&amp;quot;&amp;gt;
    &amp;lt;inet-address value=&amp;quot;${jboss.bind.address:127.0.0.1}&amp;quot;/&amp;gt;
&amp;lt;/interface&amp;gt;

to listen to any IP address. The resulting XML fragment must be:
&amp;lt;interface name=&amp;quot;public&amp;quot;&amp;gt;
    &amp;lt;any-address/&amp;gt;
&amp;lt;/interface&amp;gt;

After modifying the configuration, you must restart the Wildlfy server.
sudo service wildfly restart
If your username is username, you can access your Wildfly server using http://username.koding.io:8080.
  Configuring the Wildfly Administration Console Wildfly includes an administration console that allows you to upload and monitor web applications.
This console is configured by default to listen only to the localhost.
If you want touse the console from other machines, you must create a management user and configure the management interface to listen to any address.
To access the administration console from other machines, you must update the management interface in the /opt/wildfly/standalone/configuration/standalone.xml file.
The following code must replace the configuration in the XML file:
&amp;lt;interface name=&amp;quot;management&amp;quot;&amp;gt;
    &amp;lt;any-address/&amp;gt;
&amp;lt;/interface&amp;gt;

After restarting Wildfly, the management console will be available at http://username.koding.io:9990
When you go to the management console, it may show you an error message or a login page.
To access the console you must add a Management User to Wildfly.
You must run the add-user program using the following command:
sudo /opt/wildfly/bin/add-user.sh
Once you have created the management user, you can use it to enter to the console.
  Further information Wildfly supports a lot of Java technologies. 
You can use it to create web applications and web services with different options for concerns such as security, clustering and high availability.
To learn more, you can check the official technical guides, 
including the administration guide.
If you encounter any issues or have any questions please drop us an email here.
</description>
  </item>
  
  <item>
    <title>How to install Oracle JDK</title>
    <link>//learn.koding.com/guides/installing-oracle-jdk</link>
    <pubDate>"2015-11-02T00:00:00.000Z"</pubDate>
    <guid isPermaLink="true">//learn.koding.com/guides/installing-oracle-jdk</guid>
    <author>Team Koding</author>
    <description>By default, a new Koding machine includes Java OpenJDK 7u85 (64-bits). 
Although it is possible to use OpenJDK to run Java programs and application servers, some developers prefer to use the Oracle JDK. 
This guide shows you how to install the Oracle JDK in your Koding Machine.
 alertThe installation of Oracle JDK also includes the Oracle JRE, some libraries and additional fonts.
This process may require 300-500MB of free disk space in your VM.
You can check the amount of free space you have by using the command: df -h (check the filesystem mounted in /). 
If you need to free up space, follow this guide.
   Installing Oracle JDK 7 using KPM Koding offers a simple way to install the Oracle JDK by using the Koding Package Manager.
To install the Oracle JDK you can use the following command:
kpm install oracle-java7
You can check which Java version was installed by using the java command:
java -version
  Installing Oracle JDK 7 or 8 using apt-get If you prefer, you can install the Oracle JDK using the apt-get package manager for Ubuntu.
To do it, you must add first a custom PPA (a custom source for software packages) that includes the Java installers.
The PPA for Oracle JDK 7 and 8 must be installed with the following commands:
sudo add-apt-repository ppa:webupd8team/java 
sudo apt-get udpate
Once the PPA is installed, you can install Java using the traditional apt-get command. 
To install the Java 7, you must use the following command:
sudo apt-get install oracle-java7-installer
To install Java 8, you must use:
sudo apt-get install oracle-java8-installer
Which version is running by default can be determined with the following command:
java -version
 tipCurrently, there is an &amp;quot;early version&amp;quot; of JDK 9. 
You can install it using the same PPA used for Oracle JDK 7 and 8 by using:
sudo apt-get install oracle-java9-installer
   Changing the default version of Java If you install multiple versions of Java in your Koding VM, you can change the default implementation by using the following command:
sudo update-alternatives --config java
If you encounter any issues or have any questions please drop us an email here.
</description>
  </item>
  
  <item>
    <title>Getting Started with AngularJS</title>
    <link>//learn.koding.com/guides/getting-started-angularjs</link>
    <pubDate>"2015-11-02T00:00:00.000Z"</pubDate>
    <guid isPermaLink="true">//learn.koding.com/guides/getting-started-angularjs</guid>
    <author>Team Koding</author>
    <description>  Introduction AngularJS is a Javascript framework that extends HTML to create interactive applications.
In contrast to other frameworks, AngularJS does not require additional code to manipulate the HTML elements to obtain data and update the user interface.
It provides extended HTML tags, known as directives, that developers can bind to Javascript variables and data structures.
This tutorial presents how to create and preview an AngularJS application on Koding.
  A first application in AngularJS AngularJS is a Javascript Framework. 
To use it, it is necessary to reference the corresponding script in the HTML document.
You can reference a local copy of the AngularJS script in your machine or a remote copy located in some CDN server in the internet.
For instance, instead of using a local copy of AngularJS, you can reference the library in the Google APIs CDN using the following HTML code:
&amp;lt;script 
  src=&amp;quot;https://ajax.googleapis.com/ajax/libs/angularjs/1.4.7/angular.min.js&amp;quot;&amp;gt;
&amp;lt;/script&amp;gt;

Once referenced the AngularJS script, it is necessary to indicate which part of the HTML document must be processed by the framework.
Basically, it is necessary to define an ng-app attribute to indicate the HTML element that contains the application. 
For instance, if all the HTML document includes elements that must be processed by AngularJS, you can include the ng-app attribute in the root HTML tag.
&amp;lt;!doctype html&amp;gt;
&amp;lt;html ng-app&amp;gt; 

  &amp;lt;!-- AngularJS application --&amp;gt;

&amp;lt;/html&amp;gt;

Inside the element with the ng-app attribute, the HTML tags become dynamic elements that can be bounded to Javascript variables and data structures. 
These variables, known as the model, will be updated automatically when the user interacts with the HTML elements.
For instance, it is possible to define a text box that updates automatically a variable using the ng-model attribute. 
The following HTML code defines a text box with a binding to a variable named yourName:
&amp;lt;input type=&amp;quot;text&amp;quot;
  ng-model=&amp;quot;yourName&amp;quot;
  placeholder=&amp;quot;Enter a name here&amp;quot;&amp;gt;

The value of the variables in the model can be presented in the user interface using expressions. 
For instance, the following expression presents to the user the value in yourName:
{{yourName}}

Each time the user enters data into the text box, the variable yourName in the model is updated.
In addition, each time the variable yourName in the model is modified, the user interface is updated automatically.
This behaviour is known as double-binding: the view is bounded to the model, and the model is bounded to the view.
  Implementing the application in Koding Using the concepts explained above, it is possible to create a simple application where the user can enter some data and the user interface is updated accordingly.
To create the application and use the preview options in Koding, it is necessary to create the project under the Web folder.
You can create the project folder using the following commands:
cd Web
mkdir your_project
cd your_project
Then, you may create an HTML file with the application. 
If you have installed the kdopen command, you can create the file using the following command:
kdopen index.html
 tipYou can create the folders and files using the Koding user interface instead of the Terminal.
 Then, you can enter the code for the application using the Koding editor.
For instance, the code for a simple AngularJS application is the following: 
&amp;lt;!doctype html&amp;gt;
&amp;lt;html ng-app&amp;gt;
  &amp;lt;head&amp;gt;
  &amp;lt;script 
    src=&amp;quot;https://ajax.googleapis.com/ajax/libs/angularjs/1.4.7/angular.min.js&amp;quot;&amp;gt;
  &amp;lt;/script&amp;gt;
  &amp;lt;/head&amp;gt;
  &amp;lt;body&amp;gt;
    &amp;lt;div&amp;gt;
      &amp;lt;label&amp;gt;Name:&amp;lt;/label&amp;gt;
      &amp;lt;input type=&amp;quot;text&amp;quot;
        ng-model=&amp;quot;yourName&amp;quot;
        placeholder=&amp;quot;Enter a name here&amp;quot;&amp;gt;
      &amp;lt;hr&amp;gt;
      &amp;lt;h1&amp;gt;Hello {{yourName}}!&amp;lt;/h1&amp;gt;
    &amp;lt;/div&amp;gt;
  &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;

You can now save the file and check out the result. 
To preview the app, you can use the &amp;quot;Preview&amp;quot; option in the drop down menu of each editor tab. 
In addition, you can use the Ctrl(Cmd) + Alt + P keyboard shortcut.
This will open a new browser tab and show you a preview of the application.
  Further information AngularJS is a framework aimed to create large applications. 
It supports, not only the double-binding, but also the definition of controllers, services and custom directives, among others.
The Made with Angular website maintains a showcase of interesting Angular applications.
More information can be found in the AngularJS website.
There are some free tutorials in the CodeSchool, the Codecademy and the w3schools websites. 
If you encounter any issues or have any questions please drop us an email here.
</description>
  </item>
  
  <item>
    <title>Hello World on Koding: C-Sharp (C#)</title>
    <link>//learn.koding.com/guides/hello-world/c-sharp</link>
    <pubDate>"2015-11-02T00:00:00.000Z"</pubDate>
    <guid isPermaLink="true">//learn.koding.com/guides/hello-world/c-sharp</guid>
    <author>Team Koding</author>
    <description>  Introduction To run C# code on a Linux environment, you will need to use Mono. Mono is an open source implementation of Microsoft&amp;apos;s .NET Framework based on the ECMA standards for C# and the Common Language Runtime. Mono is sponsored by Xamarin. Mono allows developers to build cross-platform applications with improved developer productivity. Find out more about Mono. 
  Installing Mono The following instructions will install Mono and MonoDevelop on your Koding VM.
 alertBefore proceeding, make sure that you have at least 150MB free on your VM. You can check the 
amount of free space you have by using the command: df -h. If you need to free up space, follow
this guide.
 To install Mono, type this command in your Terminal:
sudo apt-get install monodevelop mono-utils nunit-console -y
The installation process will take a few minutes. Once it is done, you can verify that the Mono compiler was 
successfully installed by using the following command:
mcs --version
the output should look something like:
Mono C# compiler version 3.2.8.0
 tipthe version number above may be different in your case, that&amp;apos;s quite ok.
   Writing your first program in C Open up a new tab in the Koding IDE and type in the following code block:
// &amp;quot;Hello World!&amp;quot; program in C#

using System;

namespace HelloWorld
{
    public class Hello
    {
        public static void Main ()
        {
            Console.WriteLine (&amp;quot;Hello World!&amp;quot;);
        }
    }
}
Save the file as hello.cs by using the &amp;quot;Save As..&amp;quot; option from the drop down menu available on the tab of this file
in the IDE.
Now to compile this program so that you can run it, type the following command in Terminal:
mcs hello.cs
 tipmake sure you are in the same directory as the saved file when you execute the command above
otherwise you may get a &amp;quot;file not found&amp;quot; error.
 The compiler will do its thing and create a new file called hello.exe which you can then run by typing
this command in Terminal:
mono hello.exe
You should see the following output in the Terminal:
Hello World!
Congratulations, you have written your first C# program! 
Now that Mono is installed and available on your VM, you can find plenty of C# tutorials on the Internet and try them out on your Koding VM. Remember one thing, since there is no graphical environment on your Koding VM, you should only write or practice C# programs that are NOT graphical. In other words, stick to writing C# applications that are command line only
for now.
</description>
  </item>
  
  <item>
    <title>Connecting Laravel to a MySQL Database</title>
    <link>//learn.koding.com/guides/connect-laravel-mysql</link>
    <pubDate>"2015-10-27T00:00:00.000Z"</pubDate>
    <guid isPermaLink="true">//learn.koding.com/guides/connect-laravel-mysql</guid>
    <author>Kyle Barney</author>
    <description>  Step 1: Create a MySQL Database and User You need to create a MySQL database so that your Laravel application has something to connect to. In order to do this, make sure that you have both MySQL and PHPMyAdmin installed on your Koding VM. You can find the instructions on how to do this here and here. Make sure that you can access the PHPMyAdmin panel before proceeding.
Once you have accessed the PHPMyAdmin control panel, look at the panel on the right-hand side labeled &amp;quot;Database server.&amp;quot; The first list item should say: 

Server: Localhost via UNIX socket

These instructions are written for a database server running on localhost. If your database server is located elsewhere, be sure to update that location later on when we update Laravel&amp;apos;s .env file. (All that being said, localhost is the Koding default, so you shouldn&amp;apos;t have to change anything here.)
Once you&amp;apos;ve verified your database servers&amp;apos;s location, we need to complete two more steps before we are ready to connect your Laravel application to MySQL. They are:

Create a database
Create a user for Laravel to use when it accesses the database

  Creating a Database in PHPMyAdmin On the main PHPMyAdmin page, click the &amp;quot;Databases&amp;quot; button on the main top toolbar. On that screen, enter a name for your database and hit &amp;quot;Create.&amp;quot;
  Creating a User in PHPMyAdmin Now click on the &amp;quot;Users&amp;quot; button from the top main toolbar. Under the list of current users you will find a link labeled &amp;quot;Add User.&amp;quot; Click that and enter a new username and password combination. For the Host field, use the dropdown menu and select Local.
Make sure to remember the values you entered while creating your user and database. You will need them to tell Laravel where to look for the database as well as give it permission to access it.
  Step Two: Connect Laravel to the MySQL Database Prerequisite: Before your Laravel app can connect to the database you must start up the web server. Navigate to your app&amp;apos;s main directory and run the following command:
php artisan serve --host=0.0.0.0 --port=8080
Your app should now be visible at: http://KODING_USERNAME.koding.io:8080

In this step you will need to edit the .env file included in your Laravel install. It should be located in the main directory by default - not within any subfolders. (Make sure that you have a .env file and not just a .env.example file. If you are missing the .env file, make a copy of the .env.example file and rename it as .env.)
The Laravel .env file contains a number of configurations that Laravel uses to run your app. The database connection configurations are part of that set.
In order to connect your Laravel app to MySQL, find the database section of the .env file (the fields will all have the prefix DB), enter the location of the database server (the Koding default for this should be localhost), the name of the database that you created, and the username and password associated with the user that your just created.
For example, if my database server is localhost, my user is named &amp;apos;Jim&amp;apos; with a password of &amp;quot;LaravelRocks!&amp;quot;, and my database is named &amp;quot;My_Laravel_Database&amp;quot;, then the DB section of my .env file should look like this:
DB_HOST=localhost

DB_DATABASE=My_Laravel_Database

DB_USERNAME=Jim

DB_PASSWORD=LaravelRocks!
The settings in your .env file need to exactly match the server name, user information, and database name set up in PHPMyAdmin, otherwise your connection will fail.
Once you&amp;apos;ve entered that information, save the file, go to the command line, and  run php artisan migrate. You should see a message indicating that the &amp;quot;migration&amp;quot; was successful. (Laravel migrations are beyond the scope of this article, but you can learn more about them here and here. For now, just know that a successful migration means that your Laravel app is successfully communicating with your MySQL database.)
To see the results of this connection in to your database, return to PHPMyAdmin. There should be two additional tables in the database that you created for your project.
If you see the new tables, congratulations, you&amp;apos;ve established a connection between your Laravel app and your MySQL database. If you don&amp;apos;t see them, check the database/migrations folder in your Laravel install. There should be two files in that folder - one to create a users table and one to create a password resets table. If the files are there but you are still having trouble connecting to your database, review this guide and the Laravel documentation to see where you might have made a mistake.
</description>
  </item>
  
  <item>
    <title>What happened to 127.0.0.1?</title>
    <link>//learn.koding.com/guides/what-happened-to-127-0-0-1</link>
    <pubDate>"2015-10-13T00:00:00.000Z"</pubDate>
    <guid isPermaLink="true">//learn.koding.com/guides/what-happened-to-127-0-0-1</guid>
    <author>Team Koding</author>
    <description>Users who are new to Koding development are often confused about why they are 
not seeing their NodeJS, Python, Ruby or etc Apps on their Koding Domain. This 
guide will explain this common issue, and how to work around it.
  0.0.0.0, your new 127.0.0.1 In short, use 0.0.0.0 for your Web Server IP instead of 127.0.0.1 on 
Koding. Lets dig a little deeper though, and explain what this means, and why.
  Why should i use 0.0.0.0? When you run web server applications they need an IP and Port to listen on.
Many development applications will default the IP to 127.0.0.1, the 
machine&amp;apos;s localhost. This works fine on your Laptop, because you are 
accessing your web server locally. When you use a Koding VM, you typically 
access it from the Koding Domain, which means that you&amp;apos;re accessing your 
web application externally. Meaning that connecting to 
hostname.username.koding.io:3001 will not respond with a web server 
running on 127.0.0.1:3001.
To solve this issue, we turn to our friendly 0.0.0.0 IP. Unlike 127.0.0.1, 
this IP will accept connections from any source. Localhost, or external.
  An example To help illustrate the above explanation, lets run a little NodeJS server and 
use curl and our browser to request it from multiple locations. If you want 
to follow along, copy the following code into a file named hello.js.
require(&amp;apos;http&amp;apos;).createServer(function(req, res) {
  res.end(&amp;apos;Hello!\n&amp;apos;);
}).listen(3001, process.argv[2]);
console.log(&amp;apos;Sending greetings on &amp;apos;, process.argv[2] + &amp;apos;:3001&amp;apos;);

Now that we&amp;apos;ve creating our little Node server, lets open up our 
Terminal and run it with the following.
node hello.js 127.0.0.1
Next, lets visit our domain at the following address, making sure to replace 
username with your Koding username. To find out what is your VM&amp;apos;s hostname,
you can refer to this guide.
http://hostname.username.koding.io:3001
As you can see from the following two images, our web server is not responding 
on our domain but it is responding with curl localhost.


As we previous discussed, we need to bind our NodeJS server to the 0.0.0.0 
address. Lets run our web server again with the proper address.
node hello.js 0.0.0.0
And open it up in our browser just like before.

Success!
Remember that the way in which you choose the IP of your Web Server can differ 
greatly between web frameworks. In this above example, we wrote our own web 
server, which accepts a single argument (the bind ip).
Look at the documentation for your web framework of choice, as it will almost 
certainly be different than what was used in this example.
</description>
  </item>
  
  <item>
    <title>Install phpMyAdmin</title>
    <link>//learn.koding.com/guides/install-phpmyadmin</link>
    <pubDate>"2015-10-13T00:00:00.000Z"</pubDate>
    <guid isPermaLink="true">//learn.koding.com/guides/install-phpmyadmin</guid>
    <author>Team Koding</author>
    <description>Before you continue reading this guide why not try a more easy way, using the Koding Package Manager (kpm) and install phpMyAdmin using just one command:
kpm install phpmyadmin

This guide will walk you through the steps you need to take in order to get phpMyAdmin installed on your Koding VM and also it will answer any questions you might have regarding it operating properly.
Just follow the steps and you should get phpMyAdmin installed in no time.
  Step 1 The first thing that you need to do is to update your package list. You can do that using the following command.
sudo apt-get update
After that you can go ahead and install phpMyAdmin using the following command:
sudo apt-get install phpMyAdmin
  Step 2 During the installation process you will be prompted to answer some questions in order to configure the installation properly.
When asked to choose the server, you need to select apache2.

For the next question select Ok.

You need to select Yes for the next step in order to set up the database using dbconfig-common.

Choose a password for your root user.

And then a password for the phpmyadmin installation.

Last step is to confirm that password.
  Step 3 After the installation process has finished you have to make sure that the Apache server is serving phpmyadmin properly. In order to do that you need to edit the Apache configuration file. You can use the following command.
sudo nano /etc/apache2/apache2.conf
And at the very bottom of the file you need to include the following line.
Include /etc/phpmyadmin/apache.conf
Save the file by pressing ctrl+o.
One more thing that you need to do before you can see everything working is to enable the mcrypt extension. You can do that using the following command.
sudo php5enmod mcrypt
  Step 4 Restart the Apache server using the following command and you should see everything working.
sudo service apache2 restart
You will now be able to access phpmyadmin by following a similar URL:
http://KODING_USERNAME.koding.io/phpmyadmin
Find out more about your VM hostname here.
  Can&amp;apos;t login to phpMyAdmin? You might encounter this issue at some point. When this happens, there are multiple causes: either the mySQL server is not working properly, you forgot your credentials or something happened to phpMyAdmin.
In order to fix the first case you can follow this guide.
If you forgot your credentials you can follow these steps:
You can change the mySQL root password by killing the process:
kill `cat /var/run/mysqld/mysqld.pid`
Create a text file containing the following statement on a single line. Replace the password with the password that you want to use.
SET PASSWORD FOR &amp;apos;root&amp;apos;@&amp;apos;localhost&amp;apos; = PASSWORD(&amp;apos;MyNewPass&amp;apos;);
Save the file. This example names the file /home/me/mysql-init. The file contains the password, so do not save it where it can be read by other users. If you are not logged in as mysql (the user the server runs as), make sure that the file has permissions that permit mysql to read it.
Start the MySQL server with the special --init-file option:
mysqld_safe --init-file=/home/me/mysql-init &amp;amp;
The server executes the contents of the file named by the --init-file option at startup, changing the &amp;apos;root&amp;apos;@&amp;apos;localhost&amp;apos; account password.
After the server has started successfully, delete /home/me/mysql-init.
phpMyAdmin should use the password you set above.
Make sure you set the new password into phpMyAdmin&amp;apos;s config.inc.php too, by updating this line:
$cfg[&amp;apos;Servers&amp;apos;][$i][&amp;apos;password&amp;apos;] = &amp;apos;yourpassword&amp;apos;;
 tipYou can find the phpMyAdmin config file here /etc/phpmyadmin/config.inc.php.
 And that&amp;apos;s it.
If you encounter any issues or have any questions please drop us an email here.
</description>
  </item>
  
  <item>
    <title>Setting up FTP on Koding</title>
    <link>//learn.koding.com/guides/setting-up-ftp-on-koding</link>
    <pubDate>"2015-10-13T00:00:00.000Z"</pubDate>
    <guid isPermaLink="true">//learn.koding.com/guides/setting-up-ftp-on-koding</guid>
    <author>Team Koding</author>
    <description>Before you continue reading this guide why not try a more easy way, using the Koding Package Manager (kpm) and install FTP using just one command:
kpm install ftp

In this guide you&amp;apos;ll go over how to get your FTP Client connected to your VM&amp;apos;s FTP Server. You will be using FileZilla as the FTP Client, but any client should be able to connect to your FTP Server successfully.
  What you will need In this tutorial you will need the following.

A Koding account, and your Koding Username.
The Address of the VM you&amp;apos;d like to connect to. Instructions can be found here.

  Update your software sources Before getting started, make sure you have the latest sources locked down. Type in:
sudo apt-get update
and let the update process complete. It should not require any input.
  Installing ProFTPd First off, you&amp;apos;ll need to install ProFTPd. This can be done by pasting the following command into your Koding IDE&amp;apos;s Terminal.
sudo apt-get install proftpd
During the install process you will be asked to choose to run your VPS as an inetd or standalone server. Choose the standalone option.
After installation, the server should run automatically but just in case it does not, type in
the following command to start the server:
sudo service proftpd start
  Setting up the FTP User After ProFTPd has been successfully installed, you need to set a FTP password for your user. To do this, paste the following command into your Terminal.
sudo passwd KODING_USERNAME
Make note to replace KODING_USERNAME with your actual Koding username.
After hitting enter, you&amp;apos;ll be prompted for the FTP password you wish to use. Not your Koding password.
  Connecting to your FTP Server Finally, in your FTP Client of choice paste your VM Address into the hostname. If you&amp;apos;re not sure what that is, instructions to find it can be found here.
After the hostname, enter your Koding username, and FTP Password that you chose in the above commands. An example image from FileZilla can be seen below.

  Additional Resources 
FileZilla
FileZilla Download
Connecting to your Koding VM using FileZilla

</description>
  </item>
  
  <item>
    <title>Updating Node.js on your VM</title>
    <link>//learn.koding.com/guides/updating-nodejs-on-your-vm</link>
    <pubDate>"2015-10-13T00:00:00.000Z"</pubDate>
    <guid isPermaLink="true">//learn.koding.com/guides/updating-nodejs-on-your-vm</guid>
    <author>Darryl Dias</author>
    <description>Your Koding VM is powered by Ubuntu 14.04; by default your Koding VM comes pre-installed with Node 0.10.26, the current stable version of Node.js available in the official Ubuntu repository. We can update to the latest stable version of Node.js available for Ubuntu 14.04 by adding the official Node.js PPA to our local sources list and running a dist-upgrade to switch to the latest stable version.
Node.js is available from the NodeSource Debian and Ubuntu binary distributions repository (formerly Chris Lea&amp;apos;s Launchpad PPA)
  Instructions Adding the official Node.js PPA
curl --silent --location https://deb.nodesource.com/setup_4.x | sudo bash -

Updating the local package database and sources list.
sudo apt-get update
sudo apt-get install nodejs

Updating to the latest stable build of Node.js available for Ubuntu 14.04. This will update all the packages that need to update and will also update your Node.js package.
sudo apt-get dist-upgrade

If you had deleted Node.js from your VM, you can install it by entering the command below. The PPA installs NPM as a part of nodejs and does not require you to install NPM seperately.
sudo apt-get install nodejs

Check the version of Node.js after installing. 
node --version

The example output should look like.
v0.10.33

Now you have the latest stable version of Node.js installed on your VM.
</description>
  </item>
  
  <item>
    <title>How can I preview the code that I write on my Koding VM?</title>
    <link>//learn.koding.com/guides/preview</link>
    <pubDate>"2015-09-23T00:00:00.000Z"</pubDate>
    <guid isPermaLink="true">//learn.koding.com/guides/preview</guid>
    <author>Team Koding</author>
    <description>Since a Koding VM is essentially a Linux machine, we support all programming languages that are
supported on Linux. To get you started with programming, we have also written a series of &amp;quot;Hello
World&amp;quot; guides for several different programming languages.
  Previewing command line applications Once you have written your code, previewing it is the next step. If you are writing a command
line application then preview will happen on the command line itself when you run the application.
  Previewing web applications To preview your web app, you can use the &amp;quot;Preview&amp;quot; option in the drop down menu of each editor tab.
This will open a new browser tab and show you a preview of that file.

</description>
  </item>
  
  <item>
    <title>Connect with SSH from Windows</title>
    <link>//learn.koding.com/guides/connect-with-ssh-windows</link>
    <pubDate>"2015-09-08T00:00:00.000Z"</pubDate>
    <guid isPermaLink="true">//learn.koding.com/guides/connect-with-ssh-windows</guid>
    <author>Team Koding</author>
    <description>Connecting to your VM with SSH will allow you to use another Terminal, outside
of Koding, to interact with your Koding VM. This is also required if you&amp;apos;re interested in using SSH Tunneling. If you&amp;apos;re connecting from a Mac or Linux, have a look here.
We are going to be connecting using PuTTY, and we are going to use the terminology &amp;quot;local&amp;quot; to represent the machine that you&amp;apos;re connecting to Koding with.
 alertNote that PuTTY can be troublesome. You may want to consider Cygwin
to easily connect with the Unix instructions.
   Requirements 
Your Koding VM address
PuTTY
A PuTTY Auth Key. If you need to generate one, please refer to
this tutorial.

  Connecting with PuTTY For this connection method, you will need the PuTTY SSH client suite putty.exe, plink.exe, and pageant.exe.
 alertPuTTY has proven difficult to support due to the UI and ease of checking/configuring PuTTY incorrectly. With that said, we highly recommend using Cygwin, since it offers a real and normal Unix SSH Config.
 
Copy the text contents of your PuTTY public key. If you are not sure what or where it is, please refer to the Requirements section of this guide.
As in Step #2 of the Linux guide above, paste the entirety of your public key into the SSH Keys section of your Koding account settings.
Start up putty.exe and set the Host Name (or IP address) to the
same VM address as above: &amp;lt;username&amp;gt;.koding.io



In the Category menu on the left, select Data under Connection. Enter your Koding username in the Auto-login username box.
Select Proxy under Connection, and change the Proxy type to Local. Enter the following line (modified for your system) in the Telnet command, or local proxy command box:

C:\your\path\to\plink.exe &amp;lt;username&amp;gt;@&amp;lt;username&amp;gt;.koding.io -nc %host:%port


Go back up to the &amp;quot;Session&amp;quot; settings and save this PuTTY configuration
to a new session by typing a name into the &amp;quot;Saved Sessions&amp;quot; box, and
clicking on &amp;quot;Save&amp;quot;.
In Step 7, we will cover setting up your Auth. This can be done two ways,
and we will cover both. You only need to do one method! Pageant has been
working for everyone, where as PuTTY-Auth has been a bit problematic but is
shorter. Choose whichever you like, but if you have issues, try Pagaent Auth
below.
You&amp;#x2019;re done! You can now connect to Koding via PuTTY. To connect with
Pageant, you can right click the Pageant Icon, and under &amp;#x201C;Saved Sessions&amp;#x201D; click
on your Saved Session. This will automatically open up PuTTY and start
connecting.To connect from PuTTY itself, open PuTTY and select your Saved
Session from the list, then click Open.An example of a successful Koding
Connection is below.


  Pageant Auth Open pageant.exe. It will launch into your Taskbar.

Right click the Pageant icon in the taskbar, and select &amp;quot;View Keys&amp;quot;. From there, click the &amp;quot;Add Key&amp;quot; button. Navigate to your PuTTYGen private key and click &amp;quot;Open&amp;quot;. You should now have a key listed in your Pageant Key List. An example image is below.

If your key has been added to the Pageant Key List, close the window.
  PuTTY Auth Reopen PuTTY and select your Session, then click Load. Next, under the
Connection menu, open up the SSH menu and select Auth. Enable the Allow
agent forwarding checkbox. Under Private key file for authentication, browse
to your PuTTYGen private key.

Next, Plink needs to know the explicit location of your key. So go back to
&amp;quot;Proxy&amp;quot; under &amp;quot;Connection&amp;quot; and look for the &amp;quot;Telnet command, or local
proxy command&amp;quot; box.  Currently, it should look like this:
C:\your\path\to\plink.exe &amp;lt;username&amp;gt;@&amp;lt;username&amp;gt;.koding.io -nc %host:%port
Modify it, by adding your private key location. So, it will look like this:
C:\your\path\to\plink.exe -i c:\path\to\private\key.ppk &amp;lt;username&amp;gt;@&amp;lt;username&amp;gt;.koding.io -nc %host:%port
  Important note If you&amp;apos;re having trouble SSH-ing into your VM, after pasting your SSH key in the box located in your Koding account settings, make sure there are NO SPACES in the key other than the one after ssh-rsa and one before your email address.
And that&amp;apos;s it!
If you encounter any issues or have any questions please drop us an email here.
</description>
  </item>
  
  <item>
    <title>Drupal Setup and Installation for Beginners</title>
    <link>//learn.koding.com/guides/drupal-setup-installation-beginners</link>
    <pubDate>"2015-08-14T00:00:00.000Z"</pubDate>
    <guid isPermaLink="true">//learn.koding.com/guides/drupal-setup-installation-beginners</guid>
    <author>Thien</author>
    <description>Before you continue reading this guide why not try a more easy way, using the Koding Package Manager (kpm) and install Drupal using just one command:
kpm install drupal

This article will cover the basic steps on how to setup a blog using
Drupal.
  What&amp;apos;s Drupal? Drupal is a content management system (also refered to as CMS), meaning Drupal is used to manage content on informational sites, social media sites, member sites, intranets and web applications.
But how do you set up Drupal on Koding? Well it&amp;apos;s simple, you just follow the simple tutorial below step by step. After you&amp;apos;ve finished with the tutorial you&amp;apos;ll have a brand new website that runs Drupal.
  Step-by-step Drupal   Step 1. Open up your Koding Terminal and type in the following command to get started.
cd Web
  Step 2. Next up, you must download Drupal version that you&amp;apos;re planing on using, in this case we are going to use Drupal 8. Git clone the latest dev (8.0.x) release in the current directory.
    git clone --branch 8.0.x http://git.drupal.org/project/drupal.git .
  Step 3 In order to Drupal working on Nginx, open up the default virtual host(block) file.
sudo vi /etc/nginx/sites-available/default
The configuration should include the changes below (the details of the changes are under the config information):
    server {

        listen   80;
      server_name hostname.duythien.koding.io;

        index index.php index.html index.htm;
        set $root_path &amp;apos;/home/duythien/Web/drupal-8.x-dev&amp;apos;;
        root $root_path;

        gzip_static on;

        location = /favicon.ico {
                log_not_found off;
                access_log off;
        }

        location = /robots.txt {
                allow all;
                log_not_found off;
                access_log off;
        }

        # Very rarely should these ever be accessed outside of your lan
        location ~* \.(txt|log)$ {
                allow 192.168.0.0/16;
                deny all;
        }
        location ~ \..*/.*\.php$ {
                return 403;
        }

        # No no for private
        location ~ ^/sites/.*/private/ {
                return 403;
        }

        # Block access to &amp;quot;hidden&amp;quot; files and directories whose names begin with a
        # period. This includes directories used by version control systems such
        # as Subversion or Git to store control files.
        location ~ (^|/)\. {
                return 403;
        }

        location / {
                # This is cool because no php is touched for static content
                try_files $uri @rewrite;
        }
        location @rewrite {
            # You have 2 options here
            # For D7 and above:
            # Clean URLs are handled in drupal_environment_initialize().
            rewrite ^ /index.php;
            # For Drupal 6 and bwlow:
            # Some modules enforce no slash (/) at the end of the URL
            # Else this rewrite block wouldn&amp;apos;t be needed (GlobalRedirect)
            #rewrite ^/(.*)$ /index.php?q=$1;
        }
        location ~ \.php$ {
            try_files $uri =404;
            fastcgi_split_path_info ^(.+\.php)(/.+)$;
            fastcgi_pass unix:/var/run/php5-fpm.sock;
            fastcgi_index index.php;
            fastcgi_param  SCRIPT_FILENAME  $document_root$fastcgi_script_name;
            include fastcgi_params;
        }
    }
Save and Exit. If you want to run Drupal on Apache, you need to edit the Apache configuration file configuration Apache. If you cloned Drupal under the Web directory you can just skip this. More about Virtual Host files http://httpd.apache.org/docs/2.4/vhosts/examples.html.
    sudo vi /etc/apache2/sites-available/default
Drupal requires the gd library to be insalled.
    sudo apt-get install php5-gd
    sudo service apache2 restart
Then you&amp;apos;ll need to create the database for Drupal, by running the following code.
    echo &amp;apos;CREATE DATABASE drupal8&amp;apos; | mysql -u root -p
If you haven&amp;apos;t installed MySQL, head on over to this tutorial
here.
  Step 4 Return in the Drupal root directory if needed (~/Web in this example).
cd ~/Web
Make your own copy of the settings files, to be written by the Drupal installer (single site install).
    cd sites/default
    cp default.services.yml services.yml
    cp default.settings.php settings.php
    sudo chmod a+w services.yml settings.php
Create the files directory and make it writable. If you see this error  Writable (public download method), you need to run following code in the command line, on the Drupal directory (~/Web by default).
    mkdir files
     sudo chmod a+w -R files
Head now to your Koding domain (http://username.koding.io). If everything goes fine, you should see
the following screen in your browser:

Drupal will then ask you the database credentials to finish the installation.
That&amp;apos;s it! You&amp;apos;re now running Drupal on Koding! Have fun!
This has been a beginner guide from Koding. As always, more Quick Tips and beginner friendly guides coming soon, so stay tuned!
</description>
  </item>
  
  <item>
    <title>Understanding file permissions</title>
    <link>//learn.koding.com/guides/understanding-file-permissions</link>
    <pubDate>"2015-08-14T00:00:00.000Z"</pubDate>
    <guid isPermaLink="true">//learn.koding.com/guides/understanding-file-permissions</guid>
    <author>Team Koding</author>
    <description>Linux-based systems, Ubuntu being one of them, have a simple system for managing individual file permissions, The Unix concepts for file ownership and permissions are the main driving force behind Linux and it&amp;apos;s security at the file system level.
This guide will cover the basics of file permissions and how you can modify them.
  Users and groups Because Linux is a multi-user system we have two main types of users: system users and regular users. By default system users are used when the system requires running non-interactive and or background processes. On the other hand the regular users are used for everything else.
A Linux-based system also has a superuser or root user that has absolute power over the system including modifying file ownership and permissions.
Linux-based systems also have groups. A group is a collection of 0 or more users. Each user belongs by default to a group but can also be a part of multiple groups.
  Ownership and permissions Each file, in a Linux-based system, belongs to a single user and a single group and has certain access permissions. You as a user can view the permissions of a file, using this command:
ls -l &amp;lt;the name of your file or all files in a directory&amp;gt;
Bellow is an example of what the command ls -l /Web outputs when you run it in your Koding VM Terminal.



Mode
Owner
Group
File size
Last modified
Filename




-rw-r--r-- 1
jakemurray
jakemurray
1252
Feb 18 20:04
index.html


drwxr-xr-x 1
jakemurray
www-data
1414
Feb 18 20:04
perl


-rw-r--r-- 1
jakemurray
jakemurray
1247
Feb 18 20:04
php.php


-rwxr-xr-x 1
root
jakemurray
1431
Feb 18 20:04
python.py


-rwxr-xr-x 1
jakemurray
jakemurray
1574
Feb 18 20:04
ruby.rb



Looking at the Mode column you notice some letters. What do they mean?
The first letter in the Mode column represents the type of file. In Linux, there are two basic types of files: normal and special.
Linux-based systems permissions allow 3 things to be done to a file: read, write and execute.

r (read) - a user can view the contents of the file.
w (write) - a user can change the contents of the file.
x (execute) - a user can execute or run the file if it is a program or script.

Every file can have defined 3 sets of people for whom you can specify permissions.

owner - a single user who owns the file. (usually the person who created the file)
group - every file belongs to a single group.
other - everyone else who is not in the group or the owner.

  Changing file permissions To change permissions on a file or directory you can use the chmod command.
chmod [permissions] [path]
The chmod command has permission arguments that are made up of 3 components.

Who are you changing the permission for? - owner, group or other
Are you granting or revoking the permission - indicated with either a plus ( + ) or a minus ( - )
Which permission are you setting? - read ( r ), write ( w ) or execute ( x ).

Here is a quick example:
Grant execute permissions for the demo.html file for the entire group the file belongs to.
chmod g+x demo.html
You can also set permission on files or folders using the octal notation. By using this method, each permissions category (owner, group, and other) is represented by a number between 0 and 7.
Here is a quick example of usage of the octal notation:
chmod 751 demo.html
If you want to change the owner and group of a file or folder you can use the chown command.
The basic syntax for using chown to change owners and groups is:
chown [options] new_owner:new_group &amp;lt;name of file or folder&amp;gt;
For example, the following command would transfer the ownership and change the group of a file named demo1 to a new owner named demo and the www-data group:
chown demo:www-data demo1
 tipNote: The same principles also apply to folders
 You should now be able to understand how ownership and permissions work in Linux.
If you encounter any issues or have any questions please drop us an email here.
</description>
  </item>
  
  <item>
    <title>Using PostgreSQL</title>
    <link>//learn.koding.com/guides/postgresql-on-koding</link>
    <pubDate>"2015-08-14T00:00:00.000Z"</pubDate>
    <guid isPermaLink="true">//learn.koding.com/guides/postgresql-on-koding</guid>
    <author>Federico Ponzi</author>
    <description>PostgreSQL is an open source relational database management system that 
provides an implementation of the SQL query language. In this guide, 
we&amp;apos;ll go over using PostgreSQL on your Koding VM. Lets get started!
  Starting PostgreSQL Before we gets started, start your PostgreSQL server with the following 
command.
sudo service postgresql start
If you see an error like the following message, you may need to go 
through the Installing PostgreSQL.
psql: could not connect to server: No such file or directory
Is the server running locally and accepting
connections on Unix domain socket &amp;quot;/var/run/postgresql/.s.PGSQL.5432&amp;quot;?
  Getting Started To getting started with postgreSQL, open your Terminal, and type:
username$ sudo su - postgres
Now you are logged into your vm with the postgres user. Then connect to template1 database using the postgresql&amp;apos;s psql client:
postgres ~$  psql template1
postgres ~$  template1=#
Note the # symbol, declaring that you are logged to the database as a Super User. Now for enchaned security change your default postgres&amp;apos;s password:
template1=# \password
Enter new password:
Enter it again:
Nice, we are near the end: now create a new user with createdb permission with same username of your vm. So if your username is koding02, your prompt should be like:
koding02 ~$
Create a new user using the CREATE USER command like this:
template1=# CREATE USER username
template1-# WITH PASSWORD &amp;apos;password&amp;apos; createdb;
CREATE ROLE
template1=#
You are done configurating PostgreSQL! Now disconnect from the database using \q, and quit from postgres user using ctrl+d.
Now you can create a new database using the command:
createdb myFreshNewDb
And delete it using the deletedb tool:
deletedb myFreshNewDb
Once you have created a database, you can connect to it using the psql client like we did before:
psql myFreshNewDb
myFresNewDb=&amp;gt;
  Using Psql client Let&amp;apos;s see some useful commands of the psql tool. 
First of all: you can get some help just typing \? in your psql command line.
To exit from the appearing screen, just press the q button.
To load and execute SQL statements from file, you can use this syntax:
\i my/file/path.sql
Writing long lines of SQL code in the command line can be really hard to debug. Use the \i to run from file or use:
\e
To edit the input buffer with an editor. If you usually don&amp;apos;t use editor from command line use nano - it&amp;apos;s the simplest.
To check what relations your database contains, use
\d
If you want more information about a particular relation, use
\d myfancytable
Have fun!
</description>
  </item>
  
  <item>
    <title>Connect your own machine to Koding</title>
    <link>//learn.koding.com/guides/connect-your-machine</link>
    <pubDate>"2015-08-14T00:00:00.000Z"</pubDate>
    <guid isPermaLink="true">//learn.koding.com/guides/connect-your-machine</guid>
    <author>Team Koding</author>
    <description>  What does &amp;quot;connect your own machine&amp;quot; mean? This feature allows you to connect your own machine (physical or virtual) to your Koding account so that it will
show up in the sidebar just like a regular Koding VM. This means that once your machine is connected to Koding,
you can open a Terminal and any file on that machine directly from your Koding account! You can even start
collaboration sessions!
  What types of machines can I connect to my Koding account? Presently, the following are the requirements for any machine that can be connected to Koding:

the machine needs to have a public IP address
the machine must be running Ubuntu Linux 13.x or 14.x (support for 15.x is coming)
you must have root/sudo access on the system

In addition to these machine related requirements, you must also ensure that you have the following
ports open (in case you are running a firewall):

80/tcp
56789/tcp

  How does Koding make this happen? The steps are outlined below but in a nutshell, what happens is that you download our &amp;quot;Koding Service Connector&amp;quot;
to your machine and this service acts like a &amp;quot;bridge&amp;quot; between your machine and your Koding account.
  How can I connect my own machine to Koding? Connecting your machine to Koding is easy, just follow these steps but first make sure that the requirements
stated above are met:

Bring up the VMs list dialogue box as shown in the screen shot.


Click &amp;quot;Add Your Own VM&amp;quot;


In the dialogue box that appears, copy the install script and run it on your machine

 tipLeave the dialogue box open while you run the install script on your machine. This is a 
requirement since we are &amp;quot;listening&amp;quot; for a connection from your machine. Also, make sure
you have root access to run the install script otherwise it will fail.
 
The install script will download the necessary software, configure it and install it on your
machine.


Once the install script is done running on your machine, within a few seconds your machine
should show up in the sidebar.



  Are there any limits to how many machines I can connect? Our free accounts are restricted to one external machine and paid accounts don&amp;apos;t have any limits to the number
of machines/VMs they can connect to their Koding account.
  Video overview  
 
 

  How can I disconnect a machine that I have connected to my Koding account? To disconnect a machine, simply go over to machine/VM settings and then click the advanced tab. On that tab you will see
the disconnect button. Click the button to disconnect the machine from your Koding account.
 tipNote: Disconnecting will just break the connection between Koding and your machine. Your machine will
still be running and all files will be available on it. 
 If you wish to completely uninstall the Koding Connector Service from your machine, simply run this 
command on the machine that you had connected:
sudo dpkg -P klient
</description>
  </item>
  
  <item>
    <title>Getting Started with NodeJS</title>
    <link>//learn.koding.com/guides/getting-started-nodejs</link>
    <pubDate>"2015-08-14T00:00:00.000Z"</pubDate>
    <guid isPermaLink="true">//learn.koding.com/guides/getting-started-nodejs</guid>
    <author>Team Koding</author>
    <description>In this guide we&amp;apos;ll go over explaining what NodeJS is, what it can do, 
and how to write your first NodeJS web server on Koding. We&amp;apos;ll be 
approaching everything from a beginners perspective. So, lets get 
started!
  What is NodeJS NodeJS, commonly called Node, is a program which runs JavaScript code on 
a computer. This is similar to your browser, except instead of having 
access to the Document Object Model (DOM) and HTML5 APIs, it has access 
to a Node specific API which gives you access to the file system, and raw 
networking.
JavaScript run in Node is very similar to Python or Ruby. You have a 
command nodejs, which runs some JavaScript code. This code uses the Node 
API to modify the file system, or send/receive network packets. It&amp;apos;s 
rather low level by itself, but like all major languages people have 
built frameworks ontop of the raw API to make it easier to create 
applications.
 alertBecause of a conflict with another package, the node package from the Ubuntu repositories is called nodejs instead of node. The available command will be nodejs.
   Installing NodeJS and NPM By default every Koding VM comes preinstalled with NodeJS and NPM, but in case you somehow removed it you can use the following commands to get it back.
Before you start with the install process, make sure you run this command to update the packages list:
sudo apt-get update
To install NodeJS use the following command:
sudo apt-get install nodejs
You can check the NodeJS version and if it installed correctly, after the installation process has finished, using the following command:
nodejs -v
You will also need the Node Packaged Modules or NPM. To install NPM, simply run the following command:
sudo apt-get install npm
To make sure NPM has installed successfully, run:
npm -v
If the above should fail you can install NodeJS through a PPA repository like so:
curl -sL https://deb.nodesource.com/setup | sudo bash -
sudo apt-get install nodejs  
sudo apt-get install build-essential
  Running your first Node Script Lets setup a single print line script, and call it. Open up your Ace 
editor, and open up a new file by pressing the Plus Button on the 
tab list. If your file says Untitled.txt, you&amp;apos;re good to go.
Next, paste the following code into a new script.
console.log(&amp;apos;Hello from NodeJS!&amp;apos;)

If you&amp;apos;re familiar with Web Development, you&amp;apos;ll likely notice that this 
line if code is identical to what you could use in your Browser. You can 
copy this code and run it in your Browser Console right now! This works, 
because the JavaScript running in Node is just javascript. No 
modifications to the language have been made. The differences come when 
we start using the Node API, which we&amp;apos;ll see when we run our web server 
below.
Before we run a web server though, lets see the output of our script.  We 
haven&amp;apos;t saved our file yet though, so use Ctrl-S to save the file, 
and name it hello.js. Finally, open up the Koding Terminal 
and run this file with the following code.
nodejs hello.js
You should see output similar to this:
joshmurray: ~ $ nodejs hello.js
Hello from NodeJS!
joshmurray: ~ $
Not surprisingly, it printed our console.log() output! Next up, lets 
get out feet wet with a little bit of the API known as the http 
library.
  Running your first Node Web Server var http = require(&amp;apos;http&amp;apos;);

var server = http.createServer(function(req, res) {
  res.end(&amp;apos;Hello from NodeJS!\n&amp;apos;);
  console.log(&amp;apos;Someone visited our web server!&amp;apos;);
})

server.listen(3000, &amp;apos;0.0.0.0&amp;apos;);
console.log(&amp;quot;NodeJS web server running on 0.0.0.0:3000&amp;quot;);

Just like in the steps above, open a new file, paste in the above code, 
and save it as web.js. Lets break down this code piece by piece before 
we run it.
var http = require(&amp;apos;http&amp;apos;);

This line is how NodeJS &amp;quot;Imports&amp;quot; modules. Each NodeJS file is considered 
a module, and can be imported by specifying the file location relative to 
the path of the current file.
Eg, require(&amp;apos;./foo&amp;apos;) would import a file named foo.js in the current 
directory. require(&amp;apos;./foo/bar&amp;apos;) would import a file named bar.js in 
the foo directory.
You should note that there is a difference between our relative imports, 
and the http import above. If you install a library with npm, or use 
built-in libraries like http, you do not need to specify the path. Node 
will look up your file path until the package is found, or return an 
error if it fails to find it. http is part of the Standard Library, so 
of course it is found.
After require(&amp;apos;http&amp;apos;) loads the module, we store it in a variable named 
http
var server = http.createServer(function(req, res) {

Here, we call a function createServer on the http module. I won&amp;apos;t go 
into too much detail of the usage of function, but in short it takes a 
function and passes in a Request and Response object to the function. For 
further reading, checkout the documentation on 
createServer().
This function creates a web server, stored in server in our example.Each time a request comes in to our server, our function is called with 
the req (Request) and res (Response) of the current request. We 
can get information about the request, and create a response for the 
requester.
  res.end(&amp;apos;Hello from NodeJS!\n&amp;apos;);
  console.log(&amp;apos;Someone visited our web server!&amp;apos;);

In this example, we&amp;apos;re calling res.end() to end the current request. We 
pass in a string, to be given to the client.
We also make a console.log() call, so that in our Terminal we can see 
when people request our web server.
server.listen(3000, &amp;apos;0.0.0.0&amp;apos;);
console.log(&amp;quot;NodeJS web server running on 0.0.0.0:3000&amp;quot;);

Finally, we call the server.listen() function. This takes a port, and 
an IP to listen on. When called, it starts the server we defined above.Meaning that any requests that are made to that address (relative to the 
machine), 0.0.0.0:3000 calls our above function, which we then end 
with Hello from NodeJS!.
Lets try this out now, and run it. Just like before, with the file saved 
type nodejs web.js (remember, we named this one web.js). Once it&amp;apos;s 
running, open up your browser and go to
http://hostname.username.koding.io:3000
Where username is your Koding Username.
After you visit your that address, you should see a simple web response 
with the Hello from NodeJS! string. If you then go back to the 
Terminal, you&amp;apos;ll see that the server logged a visit. If you refresh your 
web page a few times, you can watch your web server respond to each 
request!
NodeJS web server running on 0.0.0.0:3000
Someone visited our web server!
This sums up the Getting Started with NodeJS guide. You should now have a 
good understanding of what Node is, from a very basic perspective. As 
always, don&amp;apos;t forget to look at the API Documentation. Have 
fun with Node!
</description>
  </item>
  
  <item>
    <title>Getting Started: The UI</title>
    <link>//learn.koding.com/guides/getting-started/the-ui</link>
    <pubDate>"2015-08-14T00:00:00.000Z"</pubDate>
    <guid isPermaLink="true">//learn.koding.com/guides/getting-started/the-ui</guid>
    <author>Team Koding</author>
    <description>In this guide we&amp;apos;ll take a look at Koding&amp;apos;s UI. We&amp;apos;ll examine 
the major sections, and briefly explain some of the features. In future 
guides of this series we&amp;apos;ll explain these parts in more detail. Lets get 
started!
  The Full UI 
This is the Koding UI of a logged in user, with the Koding IDE 
open. On the left side we have our VMs, Channels, Chats, and Account. To 
the right we have the Koding IDE. Lets look at each piece, and where they 
lead us.
  VMs, Workspaces and IDE VMs, Workspaces, and the Koding IDE can be found on the left hand 
side, under VMS, as seen in the image below.

Clicking on a VM Name, such as koding-vm-0 in the above image, will 
open up the Koding IDE for that specific VM.
The button to the immediate right of the VM Name is the VM Settings. Here 
you can find useful information, such as your VM Address and VM Specs.
Finally, below the VM Name are your Workspaces for that specific VM.Clicking on a Workspace will open all of the previous editors and 
Terminals that you had open on it, and opening new Workspaces provides 
shortcuts for varying tasks. We&amp;apos;ll get into the specifics in the 
Workspaces guide.
  Channels and Activity Below VMs, are your Channels. To follow a channel, click on a Grey check 
mark. Green check marks indicate a channel that you are following.

A channel is a stream of user submitted content for a certain hash tag, 
such as #golang. When you 
click on a hash tag in the Activity Feed, it opens a channel for that 
tag, as seen below.

Activity Feed posts support Markdown, including Markdown Code 
Blocks.
  Chat Below Channels are your Chats. These are private conversations between 
you and any number of users you invite.

To open a new chat, click on the Plus button to the right of the Chat 
icon. Clicking on a already started chat, will open it as seen below.

Your chats will work much in the same way as the Activity Feed. You can 
invite more users by clicking the Plus next to user icons, or delete the 
conversation from the Chat Dropdown in the upper right.
  Account Settings Your Account Settings can be located from the bottom of the navigation 
panel.

Here you&amp;apos;ll be able to modify your Name, Password, and link your Koding 
account to various services.
</description>
  </item>
  
  <item>
    <title>How can I do real-time collaboration on Koding?</title>
    <link>//learn.koding.com/guides/collaboration</link>
    <pubDate>"2015-08-07T00:00:00.000Z"</pubDate>
    <guid isPermaLink="true">//learn.koding.com/guides/collaboration</guid>
    <author>Team Koding</author>
    <description>  What is Collaboration? Koding Collaboration allows you to easily and effectively collaborate and share resources with your
team, students, peers or friends. When you enable Collaboration, you are effectively sharing your
virtual machine (VM) with those whom you invite into the sharing session. The session remains active
until you hit &amp;quot;End Session&amp;quot;. Every person you share a session with requires a Koding account (free or paid).
 alertSince the user(s) with whom you share your session have access to all the files on your VM, make sure that you are sharing with people that you know.
 
  What can I share? When you collaborate with someone, you can give them full access to your VM. This means that an invited
user can view/edit files and directories on your VM.
Besides file sharing, you can also share your IDE, Terminal and your Drawing board. When you start a
sharing session, the contents of your entire workspace are shared. This includes any existing open IDE
or Terminal tabs or any new one&amp;apos;s that you open during the sharing session.
During an active Collaboration session, anything typed by any user in the sharing session is automatically
reflected on the screens of the other users in the same session. If you have ever worked on a shared
Google doc with realtime editing, this should feel very natural in comparison to that experience.
  What can I use Collaboration for? Collaboration is great for things like:

Collaborative programming
Interviews
Teaching
Bug hunting/fixing
Doing client work (with the client)

Since Koding Collaboration allows you to share your Terminal as well, it&amp;apos;s great for those times when
you are stuck with that shell script and need someone to take a peek. Koding Collaboration also
allows you to share a white-board for all those times when a picture is just needed.
  Options for the host when starting a collaboration session. When starting a session, the host of the session has the following options available to them:

What does &amp;quot;Watch&amp;quot; mode mean? Watch mode, the default mode, 
shares your workspace and everyone in that session gets a replica of your
workspace on their screen. So if you open file tabs, new Terminals tabs and even switch tabs, other
sessions participants see it all and their screens also update in real time with these actions.  When a session participant chooses to &amp;quot;unwatch&amp;quot; your session, it means they are free to do what they
want on their end of the collaborative session without having to be distracted by the host changing
files or opening new tabs. This is very useful when you want to work on a few different files and
the users in the session can open files independently on the VM shared by the host yet not distract
each other. This is a bit confusing at first but then you&amp;apos;ll wonder how else would Collaboration
ever happen!
Read-only session
If this option is enabled then none of the guests can make any changes to your files either
through the editor or the Terminal. The session is essentially &amp;quot;read-only&amp;quot; for them. This is a great
option for teachers to use cause you don&amp;apos;t want your student&amp;apos;s doing rm -rf on your VM! :)
Participants/Guests can mute the host
In some situations, a host may want to allow guests to mute them, this option provides that
functionality. This is handy when there is no real &amp;quot;host&amp;quot; and someone starts a session for the
group/team but everyone needs equal level of controls over the session.

  What does &amp;quot;Kick&amp;quot; do? This is available to the host if they want to remove someone from a shared session without ending
the session.

  Do sessions &amp;quot;auto-close&amp;quot;? Generally, we recommend that you exit/close your sessions yourself. However, there are situations when
you cannot close/end your session (e.g. browser crash). In such cases, you have up to one (1) minute
to reconnect otherwise at the end of a minute, all sessions are auto-terminated.
  Video collaboration  tipVideo collaboration will not work on Safari because Safari does not
support WebRTC which is a requirement for this feature to work.
   What is video collaboration? Video collaboration on Koding will allow you to interact live with your friend and colleagues. The
feature uses the camera and mic from your device to send and receive live audio/video with the 
users you are collaborating with. If you have ever used Skype or Facetime, then you already know
exactly how this works!
  How do I start a video collaboration session? As a host, when you start a collaboration session, you can add video to it by clicking the camera
icon as shown in the image below. 
 tipOnly the host can add video to the collaboration session.
 
  What controls do I have during a video collaboration session? If you are in the video session, you have the following handy controls:

Mute yourself: clicking this allows you to stop sending audio from you to the other participants in the session. This is handy when you are having a conversation that does not need to be heard by your session participants.
Stop video: clicking this allows you to stop sending your video (audio still works) to the other participants in the session. Handy when you&amp;apos;ve had a bad hair day :)
Mute session: clicking this will mute the other participants so that you will not hear them anymore. Handy when you have someone stop by your desk and you need to turn down the conversation from the collaboration session.
Leave video: clicking this will end your video session but you will not be dropping the collaboration session, just the video portion will end. This is handy when you are in a long collaboration session where you don&amp;apos;t need to continue to hear/see the session participants but still need to be involved in the session activities.


</description>
  </item>
  
  <item>
    <title>Enabling 2-factor authentication on your Koding account</title>
    <link>//learn.koding.com/guides/2-factor-auth</link>
    <pubDate>"2015-08-07T00:00:00.000Z"</pubDate>
    <guid isPermaLink="true">//learn.koding.com/guides/2-factor-auth</guid>
    <author>Team Koding</author>
    <description>2-factor authentication (2FA) gives your Koding account an added layer of security and protection. Once enabled,
you will be required to provide a verification code along with your password each time you sign in to Koding.

2FA is increasingly become a required standard and many of the leading companies in the world now support 2FA.
  How do I enable 2FA on my Koding account? To enable 2FA, you will first need to install an app that generates authentication tokens on your phone. We recommend either the Google Authenticator app or Authy.

Download Authy for iPhone
Download Authy for Android
Download Google Authenticator for iPhone
Download Google Authenticator for Android

Once you have installed the app, follow these steps to enable 2FA on your Koding account.
 tipThe instructions below are for the Google Authenticator app. Other apps like Authy have a similar workflow.
If you get stuck somewhere in the setup, you can always send us an email.
 
Log in to your Koding account
Go to the 2FA section in Account Settings
Open up the Google Authenticator app on your phone and click the + icon (as shown in the image below)
Select &amp;quot;Scan Barcode&amp;quot;
Scan the code shown in the Account Settings
The Google Authenticator app will add your Koding account to the list and generate a code
Enter the code into Account Settings to verify and activate 2FA


  How do I disable 2FA on my Koding account? To disable 2FA, follow these simple steps:

visit the 2FA tab in Account Settings
enter your Koding password and click the &amp;quot;Disable&amp;quot; button

</description>
  </item>
  
  <item>
    <title>Where is my Web Server Root?</title>
    <link>//learn.koding.com/guides/where-is-my-webserver-root</link>
    <pubDate>"2015-07-25T00:00:00.000Z"</pubDate>
    <guid isPermaLink="true">//learn.koding.com/guides/where-is-my-webserver-root</guid>
    <author>Team Koding</author>
    <description>Koding VMs come with Apache preconfigured and serve a sample site to get you 
started. The files for this site are found in what is typically called your 
Web Server Root. This is the directory that Apache is serving up files from, 
and it is located within your home directory, under the Web directory. The 
full path being:
/home/username/Web
Replace username with your username.
Note: You will find that the Apache web server root is actually /var/www
which is then linked to /home/username/Web
You can modify the contents of this directory with the Koding 
Terminal, or the Ace Editor. In this example, we&amp;apos;ll use Ace 
to browse the files with the FileTree.
First, open up Ace. In the left hand side you&amp;apos;ll see a FileTree, with a 
directory called Web. Double click the Web folder to expand it. Your FileTree 
should look something like this:

Those files are a series of example pages, and they&amp;apos;re being served by Apache 
on your Koding Domain. You can view this site by visiting your Koding Domain, 
at:
http://hostname.username.koding.io
Where username is your Koding username. You should see something like this:

You&amp;apos;ll notice that the PHP, Python, Perl, and Ruby links are actually files 
being generated from that language. As an example, the python.py file is 
being served up by Apache, with the aid of Apache&amp;apos;s mod_python module. This 
serves to illustrate that this is a real Apache server, and you can use it 
just like you expect.
You should now understand where your Web Server Root is, and how to access it 
from the Web to develop and share your web applications. Happy Koding!
</description>
  </item>
  
  <item>
    <title>What is Koding?</title>
    <link>//learn.koding.com/guides/what-is-koding</link>
    <pubDate>"2015-07-21T00:00:00.000Z"</pubDate>
    <guid isPermaLink="true">//learn.koding.com/guides/what-is-koding</guid>
    <author>Team Koding</author>
    <description>Koding is an online cloud-based development environment with the goal of 
simplifying worldwide development and providing free computation and 
development to everyone. It does this by offering Free VMs for development 
to anyone. The Koding VMs provide you with a real Ubuntu OS, with a real 
Terminal, and allow you to work on real code. It can be any language, be 
it Python, PHP, C++, C, or anything else, it doesn&amp;apos;t matter. Even better, 
the VMs are hosted on the cloud, so they&amp;apos;re accessible from just about anywhere 
in the world.
  Is Koding a Production Host? Koding is first and foremost a Development Environment, and not a Production 
Host. All features have been tailored with this in mind and evidence of this is 
reflected in all of the features you see implemented. Lets highlight some of 
these items.
  VMs Shutdown After Logout Approximately 60 minutes after you log out, your Free VMs will shut down. Why? 
Koding&amp;apos;s development focus is not centered around hosting your blog/site. 
Koding is here to enable you and to help you make great things. Attempting to 
be yet another host in a sea of perfectly capable production hosts won&amp;apos;t help 
achieve that goal.
Another benefit of this system, is that it helps avoid security concerns that 
collectively harm us all. There are plenty of users out there who have used 
Koding to host dangerous applications. Phishing, scamming, spamming, all of it. 
This directly harms all of us, by giving Koding a bad name, wasting resources, 
and hindering a service that we are trying to be productive with. It&amp;apos;s no 
surprise that restrictions need to be put in place to inhibit this behavior, 
for the benefit of everyone.
However, if you upgrade your plan, you will have at least one Always-On VM. The 
number of Always-On VMs you have depends on which plan you upgrade to. More 
information about these plans can be found here. 
You can upgrade your plan from the Pricing page. 
Always-On VMs will never shut down automatically.
  CPU Bursts vs Sustained Koding wants to help you get work done, and get work done fast. Things like 
compilers have a lot to compute, but in short sporadic bursts. 
Koding&amp;apos;s CPU allocation has been tailored with this in mind. It wants you to 
compute what you need, as soon as possible. It is not designed for a long 
running process that expects heavy and consistent usage, such as a 
Minecraft server.
  Raw Ubuntu OS These days a lot of hosting platforms are heavily optimized for their specific 
niche(s). They streamline the process of hosting your language or application 
style of choice, which gives you added stability and performance gains. 
Examples of this are the plethora of Apache-PHP hosts, Nodejitsu, Google App 
Engine, Heroku, AppFog, and a nearly limitless amount of others.
Why is this? Well, production hosting is hard, and there are obvious benefits 
to letting someone else do it. The idea of uploading your php site to a 
standard php host is easy. The idea of buying a dedicated server, setting up 
Apache, firewalls, updates, etc, just seems a bit crazy in comparison. On top 
of that, what about load balancing and CDNs? Doing it all yourself can be hard.
Well, Koding gives you that raw machine. It&amp;apos;s not trying to make production 
hosting for you, but rather it&amp;apos;s giving you a completely open and powerful 
environment to make stuff! So by all means make your WordPress blog on 
Koding, and if you really want to host it on Koding, upgrade your plan to 
include an Always-On VM. Just be aware of the design goals.
</description>
  </item>
  
  <item>
    <title>Getting Started with Ruby</title>
    <link>//learn.koding.com/guides/getting-started-ruby</link>
    <pubDate>"2015-07-21T00:00:00.000Z"</pubDate>
    <guid isPermaLink="true">//learn.koding.com/guides/getting-started-ruby</guid>
    <author>Team Koding</author>
    <description>In this guide we&amp;apos;ll explain what Ruby is, and how to write a simple web
server using the built in Socket library. So, lets get started!
  What is Ruby Ruby is a popular, general purpose, high level programing language. It
focuses on readability programmer enjoyment over raw performance. Koding
VMs come pre-installed with Ruby and RubyGem, making it super easy to get
started. Lets see what it looks like to run some Ruby code!
  Installing Ruby You can install Ruby rather easily, using the following commands:
gpg --keyserver hkp://keys.gnupg.net --recv-keys 409B6B1796C275462A1703113804BB82D39DC0E3
curl -sSL https://get.rvm.io | bash -s stable --rails
During the installation you will prompted to input your root password.
The above command will install the latest stable Rails version, which will pull in the associated Ruby.
After the very long installation process, all you need to do is source the rvm scripts using the following command:
source ~/.rvm/scripts/rvm
You should now have a full Ruby on Rails environment configured and you should be ready for the next steps.
  Running your first Ruby script Open up your Ace Editor and create a new file named hello.rb.
Paste in the following code into that file.
puts &amp;quot;Hello from Ruby!&amp;quot;

The puts name is a function which takes a string and prints it to the
Standard Output (STDOUT) of the process. Lets try running this file and
see the output, but first save the file with Ctrl-s. Now, open up
your Terminal and type in the following command.
ruby hello.rb
You should see output similar to this:
joshmurray: ~ $ ruby hello.rb
Hello from Ruby!
joshmurray: ~ $
Neat! Now that we know how to run some code, lets look at a real example
of some Ruby code.
  Your first Ruby web server Just like before, create a new file named web.rb, and paste in the
following code.
require &amp;apos;socket&amp;apos;

server = TCPServer.new &amp;apos;0.0.0.0&amp;apos;, 3000

loop do
  socket = server.accept
  request = socket.gets
  puts request

  response = &amp;quot;Hello World!\n&amp;quot;
  socket.print &amp;quot;HTTP/1.1 200 OK\r\n&amp;quot; +
               &amp;quot;Content-Type: text/plain\r\n&amp;quot; +
               &amp;quot;Content-Length: #{response.bytesize}\r\n&amp;quot; +
               &amp;quot;Connection: close\r\n&amp;quot;
  socket.print &amp;quot;\r\n&amp;quot;

  socket.print response
  socket.close
end

That looks a bit complicated, so lets break it down piece by piece.
require &amp;apos;socket&amp;apos;
server = TCPServer.new &amp;apos;0.0.0.0&amp;apos;, 3000

First, we use require to import the socket module. TCPServer comes
from this module, and we use it to create a new Socket server on
0.0.0.0:3000. This is a plain socket server, meaning that we&amp;apos;re
going to implement an HTTP response ourselves. Getting our hands dirty!
loop do
  socket = server.accept
  puts socket.gets

Next up, loop do creates a never ending loop. Each iteration of the
loop executes until server.accept. This blocks, waiting for connections
from our TCP Server.
When your browser connects to the TCP Server, the socket servers returns
a connection object named socket. From that object, we use gets to
read a line from the incoming data Stream.
The incoming stream is what your browser sent to the TCP Server as part
of it&amp;apos;s request. So with socket.gets you&amp;apos;re simply reading what your
browser sent. We then take that, and use puts to print it to the STDOUT
just like in our Hello example above. Note that we&amp;apos;re just printing to
STDOUT to help us understand when requests are incoming, it is not
required.
  response = &amp;quot;Hello World!\n&amp;quot;
  socket.print &amp;quot;HTTP/1.1 200 OK\r\n&amp;quot; +
               &amp;quot;Content-Type: text/plain\r\n&amp;quot; +
               &amp;quot;Content-Length: #{response.bytesize}\r\n&amp;quot; +
               &amp;quot;Connection: close\r\n&amp;quot;
  socket.print &amp;quot;\r\n&amp;quot;

Next up, we start building our response. We start by writing &amp;quot;Hello
World!\n&amp;quot; to the variable response. We then print a series of strings
to the socket.
This section can get a little confusing, because it involves returning
HTTP Headers to the requesting browser. We won&amp;apos;t go into detail of this
here, but just understand that this is part of the HTTP Spec, that we&amp;apos;re
manually implementing.
As part of these headers, we print the Content-Length, which is the
number of bytes in our response string. After all the headers are done,
we follow up by adding one more new line, to separate the headers from
the content we want to print. Again, as part of the HTTP Spec.
  socket.print response
  socket.close
end

Finally, we use that same socket.print method to print our response
variable. After that&amp;apos;s done, we close the socket.
But does this work? Open up your Terminal just like before,
and run it with the following command.
ruby web.rb
Once that&amp;apos;s running, open up your browser and connect to the following
address, replacing username with your Koding Username.
http://hostname.username.koding.io
Congratulations, you&amp;apos;re running a Ruby Web server, with a hand made HTTP
implementation!
  Installing dependencies with RubyGems This is great and all, but it&amp;apos;s quite the complex way to run a simple web
server. Lets make this a lot easier with the popular web framework,
Sinatra.
To use Sinatra, we need to install it. Run the following command to
install Sinatra with RubyGems.
gem install sinatra
RubyGems is Ruby&amp;apos;s answer to Dependency Management. Similar to NPM and
PIP, the above command will install Sinatra and all dependencies of that
library.
Next up, open your web.rb file again, and replace the entire contents
with the following code.
require &amp;apos;rubygems&amp;apos; # This is required because the http://rubygems.org resource is not included automatically for sinatra to boot
require &amp;apos;sinatra&amp;apos;

set :bind, &amp;apos;0.0.0.0&amp;apos;
set :port, 3000

get &amp;apos;/&amp;apos; do
  &amp;quot;Hello World, from Sinatra!&amp;quot;
end

Now run it just like before, and visit it in your browser. Just like
that, you have a working Sinatra web server!
In a following tutorial we&amp;apos;ll dig deeper into Sinatra, but for now check
out the Official Documentation. And as always, Happy Koding!
</description>
  </item>
  
  <item>
    <title>Getting Started: File Uploads</title>
    <link>//learn.koding.com/guides/getting-started/file-upload</link>
    <pubDate>"2015-07-21T00:00:00.000Z"</pubDate>
    <guid isPermaLink="true">//learn.koding.com/guides/getting-started/file-upload</guid>
    <author>Team Koding</author>
    <description>In this guide we&amp;apos;ll take a look at uploading your files and projects to
Koding, in multiple ways. Lets get started!
  Uploading with Drag and Drop The simplest way, is simply by using Drag and Drop file upload! To do
this, open your Koding IDE, locate your FileTree on the left hand
side, and drag a file from your Desktop onto the FileTree. An example
image is below.
 tipYou can only upload files up to 100MB at one time. A file over 100MB will not be 
allowed for upload via this method. If yo have larger files, you should use the 
FTP upload method described below.
 
After you let go of the file, your file will be uploaded to your
~/Uploads directory. If ~/Uploads does not exist, it will be automatically
created.
 tipFiles uploaded this way are not automatically available for
serving over your VMs web server as the ~/Uploads directory is not inside
~/Web (the default web root for Koding VMs). If you wish to use any uploaded
files in your web project, please move them to a directory under ~/Web.
   Uploading with FTP FTP is another common way to upload files to your VM. Before uploading
with FTP though, you&amp;apos;ll need to set up an FTP Server on your VM.
The FTP Guide will take you through both the installation, and
connecting process, so check it out!
  Uploading with SCP SCP is is a tool that will copy files from your local Unix filesystem
to a remote filesystem over SSH connections. To use it, make sure you
have SSH setup with your Koding VM beforehand. Instructions can be found
here if needed.
After that, use the following command to copy a local file to your VM.
scp LOCAL_FILE USERNAME.koding.io:REMOTE_FILE
Replace LOCAL_FILE with your local file location, USERNAME with your
Koding Username, and REMOTE_FILE with your Remote File location. An
example of this command can be seen below.
scp ~/my_image.png joshmurray.koding.io:~/my_image.png
</description>
  </item>
  
  <item>
    <title>Setting up a Rails webserver</title>
    <link>//learn.koding.com/guides/setting-rails-webserver</link>
    <pubDate>"2015-06-20T00:00:00.000Z"</pubDate>
    <guid isPermaLink="true">//learn.koding.com/guides/setting-rails-webserver</guid>
    <author>Team Koding</author>
    <description>Before you continue reading this section why not try a more easy way, using the Koding Package Manager (kpm) and install Rails using just one command:
kpm install rails

  Getting started Before you can start the Rails install process, you&amp;apos;ll need to update all of the apt-get packages:
sudo apt-get update
Then make sure you have Ruby installed on your VM. You can install it by following this guide.
  Installing You can install Rails using the bellow command:
sudo gem install rails
  Usage Creating a Rails project is really easy. It just takes one command and you&amp;apos;re good to go:
rails new goodbyetolocalhost
cd goodbyetolocalhost
You can run the Rails webserver like so:
rails server -b 0.0.0.0
You will now be able to access the Rails webserver by following a similar URL:
http://KODING_USERNAME.koding.io:3000
Find out more about your VM hostname here.
Rails should listen to 0.0.0.0:3000 by default. If you can&amp;apos;t reach your project via the browser you have to make sure it listens to 0.0.0.0:3000. You can check this, using the netstat command in another terminal window and the bellow command:
sudo netstat -tnlp
And that&amp;apos;s it!
If you encounter any issues or have any questions please drop us an email here.
</description>
  </item>
  
  <item>
    <title>Koding IDE Introduction</title>
    <link>//learn.koding.com/guides/ide-introduction</link>
    <pubDate>"2015-06-20T00:00:00.000Z"</pubDate>
    <guid isPermaLink="true">//learn.koding.com/guides/ide-introduction</guid>
    <author>Team Koding</author>
    <description>In this guide we&amp;apos;ll go over the Koding Integrated Development Environment or IDE for short. We&amp;apos;ll try to explain how it works, how to use it and in the end share some useful tips that you can use to be more productive.
  Getting started To access your IDE, select your Virtual Machine on the left hand side as pictured bellow.

 alertIf you have a Developer or Professional account then select the VM you want to start, from the list.
 Then click on the Turn it on button in the modal.

After the VM has started, you&amp;apos;ll see your Koding IDE.
 tipThe IDE will remember what files / tabs you had opened last time and the FileTree will remember the folder location.
   Usage The Koding IDE consists of two main parts: the FileTree, and the Editor.

The IDE can be customized by clicking on the little cog icon and then modifying the settings based on your needs.
 tipYou can also customize the Koding Terminal from here.
 
The FileTree, on the left, enables file navigation around your VM. You can drag files or folders from one location to another one and if you right click files and folders you&amp;apos;ll yield shortcuts to various actions as exemplified in the bellow images.

File actions



Folder actions


The Editor, that sits on the right of the FileTree, is the main driving force behing the Koding IDE. It allows you to edit a wide variaty of files types, such as .php, .rb, .html, .css just to name a few.
By default the editor will be opened in a horizontal two pane view. Panes can be opened, split and merged at will. They can also be made full screen. You can learn more about these operations in this guide.
You can open a new tab, in a pane, by clicking on the plus button and then chosing the type of tab you want to open, either a new Terminal tab, a new drawing board or a new file.


If you choose to open a new file tab you&amp;apos;ll have access to some actions on that tab. Clicking on the little arrow next to the tab name wil bring up a menu with multiple actions.

Choosing the Terminal tab will open the Terminal to your Koding VM. We won&amp;apos;t go into much detail about the Terminal in this guide. Head over to this guide for a more in depth explanation of the Terminal.
The Drawing board tab is there to help you draft ideas / share them with others or when you want to doddle the next big thing.
Everything has a keyboard shortcut as well. A shortcut reference, can be located by clicking the keyboard icon in the lower right.

The Koding IDE can be used when you are in the collaboration mode. You can share your VM by click on the Share button in the bottom right corner of the IDE.

This will share the VM with your teammate(s) or friend(s). Learn more about the collaboration feature here.
  Tips 
Use the Ctrl(Cmd) + Alt + M keyboard shortcut to merge all panes.
Never worry about saving files again. Enable the autosave feature from the IDE settings.
Double click on the sidebar and FileTree deviders to minimize them and make more room for the Editor.
Ctrl(Cmd) + Enter(Return) keyboard shortcut will make everything fullscreen.

The Koding IDE is a simple, yet powerful, editor for your browser based development.
Explore it today and if you ever need help with the IDE you can just click on the bottom right corner question mark icon and the support modal will pop-up or email us at support@koding.com and we&amp;apos;ll gladly help.
</description>
  </item>
  
  <item>
    <title>Custom Domains with your Koding VM</title>
    <link>//learn.koding.com/guides/domains</link>
    <pubDate>"2015-06-20T00:00:00.000Z"</pubDate>
    <guid isPermaLink="true">//learn.koding.com/guides/domains</guid>
    <author>Team Koding</author>
    <description>Koding VMs support custom domains (for free!) as long as your domain provider
supports one of the following record types.

CNAME Record
A Record

 tipThese record types are the most common and should be supported by 100% of the 
domain providers out there.
   Find your VM Address First, you&amp;apos;ll need to find and copy your VM Address. To
find this, please refer to this guide - it will look
something like the address below:
ulkk3a3a4bb3.joshmurray.koding.io
  Create Your Domain Record Next, you&amp;apos;ll need to create and configure either a CNAME Record, or
an A Record with your domain provider.
To configure either of these record types, refer to your provider&amp;apos;s guides
and create the record of the type that you prefer. Once you have created the record 
on your domain registrar&amp;apos;s panel, paste in the VM Address from above to the Record Value of
your domain providers DNS panel. This will point your Domain to the Address that the host resolves to.
 tipYou can use either type. There&amp;apos;s no difference from our end.
   The Waiting Game If the record you are creating is new, it should resolve very quickly. If
however, it is an older record you must wait for the global cache to expire.
This may take anywhere from 5 minutes to 24 hours.
If it has not been resolved after a day, ensure that you used the proper
VM Address (as shown above). If it is correct, try contacting your
Domain Provider and ensure that they are able to use Addresses rather
than IPs in their record values.
  Can I use my VMs IP? Our free VMs have rotating IPs which means that after your VM goes
offline, it is not guaranteed to boot up with the same IP. This means
that you should not use your VMs IP as the record value if you&amp;apos;re
not using an Always-On VM.
If you have a paid Koding account and your VM is marked as Always-On, 
an IP should work, as long as your VM is not shutdown. For more information 
on Always-On VMs, see the Pricing Page.
Once you are done pointing your domain to your VM, you can experiment with
pointing multiple domains to the same VM using as described in this guide.
</description>
  </item>
  
  <item>
    <title>Installing Ionic Framework</title>
    <link>//learn.koding.com/guides/installing-ionic-framework</link>
    <pubDate>"2015-06-20T00:00:00.000Z"</pubDate>
    <guid isPermaLink="true">//learn.koding.com/guides/installing-ionic-framework</guid>
    <author>Sergiu Butnarasu</author>
    <description>This guild will explain how to install Ionic Framework  and how to run the application in your browser.
To install Ionic Framework you must update your packages and have nodejs and npm installed on your Koding VM:

Update packages

sudo apt-get update

Install nodejs

sudo apt-get install nodejs

Install npm

sudo apt-get install npm
 tipFollow this guide and this guide to learn more on how to get started with nodejs and npm on your Koding VM.
   Step 1 - Install Ionic Framework After installing npm you will be able to install Ionic Framwork on your Koding VM. Write the following command in your terminal:
sudo npm install -g cordova ionic
 tipCheckout this guide for more info regarding Apache Cordova on your Koding VM.
   Step 2 - Navigate to Applications directory Navigate to your application directory, where you will create the ionic app. To do this, write in terminal:
cd Applications
  Step 3 - Create your Ionic application Now you can create your application using the following command:
sudo ionic start myApp
  Step 4 - Navigate to the myApp directory To be able to run you application, first you&amp;apos;ll need to navigate to your application directory:
cd myApp
  Step 5 - Set address On this step you can specify what address your browser will connect to:
ionic address
  Step 6 - Start a local development server Now you can start a local development server to test your Ionic application. To do this, write in your terminal:
ionic serve --all
  Step 7 - Access your running dev server url: Finally you can access your dev server url:
http://KODING_USERNAME.koding.io:8100
Find out more about your VM hostname here.
And that&amp;apos;s it.
If you encounter any issues or have any questions please drop an email here
</description>
  </item>
  
  <item>
    <title>Hello World on Koding: Ruby</title>
    <link>//learn.koding.com/guides/hello-world/ruby</link>
    <pubDate>"2015-06-01T00:00:00.000Z"</pubDate>
    <guid isPermaLink="true">//learn.koding.com/guides/hello-world/ruby</guid>
    <author>Team Koding</author>
    <description>  Introduction Ruby is a dynamic, reflective, object-oriented, general-purpose programming language. Ruby was influenced by Perl, Smalltalk, Eiffel, Ada, and Lisp. It supports multiple programming paradigms, including functional, object-oriented, and imperative. It also has a dynamic type system and automatic memory management.
  Implementation The first thing you need to do is to create a file called helloworld.rb in your Koding VM and paste the bellow snippet into it.
#!/usr/bin/ruby

puts &amp;apos;Hello, world!&amp;apos;
To run the above file in your Koding VM, just open your Koding Terminal and type the following command:
ruby helloworld.rb
  Explanation #!/usr/bin/ruby
The shebang line is read by the program loader to determine what program to use to run the script. This line cannot be preceded by any blank lines or any leading spaces.
puts &amp;apos;Hello, world!&amp;apos;
The above line is pretty self explanatory. It will put something (in the above case, a &amp;quot;Hello World!&amp;quot; string) on the screen.
And that&amp;apos;s it!
You just wrote and ran your first Hello World in Ruby.
</description>
  </item>
  
  <item>
    <title>Hello World on Koding: Python</title>
    <link>//learn.koding.com/guides/hello-world/python</link>
    <pubDate>"2015-06-01T00:00:00.000Z"</pubDate>
    <guid isPermaLink="true">//learn.koding.com/guides/hello-world/python</guid>
    <author>Team Koding</author>
    <description>  Introduction Python is a widely used general-purpose, high-level programming language. Its design philosophy emphasizes code readability, and its syntax allows programmers to express concepts in fewer lines of code than would be possible in languages such as C++ or Java. The language provides constructs intended to enable clear programs on both a small and large scale.
  Implementation The first thing you need to do is to create a file called helloworld.py in your Koding VM and paste the bellow snippet into it.
print &amp;quot;Hello World!&amp;quot;
To run the above file in your Koding VM, just open your Koding Terminal and type the following command:
python helloworld.py
  Explanation print &amp;quot;Hello World!&amp;quot;
Since Python emphasizes code readability, the above line is pretty self explanatory. It will print out something (in the above case, a &amp;quot;Hello World!&amp;quot; string) on the screen.
And that&amp;apos;s it!
You just wrote and ran your first Hello World in Python.
</description>
  </item>
  
  <item>
    <title>Hello World on Koding: PHP</title>
    <link>//learn.koding.com/guides/hello-world/php</link>
    <pubDate>"2015-06-01T00:00:00.000Z"</pubDate>
    <guid isPermaLink="true">//learn.koding.com/guides/hello-world/php</guid>
    <author>Team Koding</author>
    <description>  Introduction PHP is a server-side scripting language designed for web development but also used as a general-purpose programming language. PHP code can be simply mixed with HTML code, or it can be used in combination with various templating engines and web frameworks.
  Implementation The first thing you need to do is to create a file called helloworld.php, place it in your Web folder and paste the bellow snippet into it.
&amp;lt;html&amp;gt;
    &amp;lt;head&amp;gt;
    &amp;lt;title&amp;gt;Hello World&amp;lt;/title&amp;gt;
    &amp;lt;/head&amp;gt;
    &amp;lt;body&amp;gt;
        &amp;lt;?php
            echo &amp;quot;Hello World&amp;quot;;
        ?&amp;gt;
    &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
To run the above file in your Koding VM, follow a similar URL in your browser:
http://KODING_USERNAME.koding.io/helloworld.php
 tipReplace KODING_USERNAME above with your koding username. (It&amp;apos;s not obvious to everyone).
Find out more about your VM hostname.
   Explanation The first part until the initial &amp;lt;?php tag is just basic HTML code.
&amp;lt;?php

?&amp;gt;
You need to tell the server when the PHP will start and end. In PHP you use the tags &amp;lt;?php and ?&amp;gt; to mark the start and end for the PHP code that the server must execute.
echo &amp;quot;Hello World&amp;quot;;
echo outputs one or more strings. echo is not actually a function (it is a language construct). echo does not behave like a function, so it cannot always be used in the context of a function.
The last part after the closing ?&amp;gt; tag if just basic HTML code.
And that&amp;apos;s it!
You just wrote and ran your first Hello World in PHP.
</description>
  </item>
  
  <item>
    <title>Hello World on Koding: Perl</title>
    <link>//learn.koding.com/guides/hello-world/perl</link>
    <pubDate>"2015-06-01T00:00:00.000Z"</pubDate>
    <guid isPermaLink="true">//learn.koding.com/guides/hello-world/perl</guid>
    <author>Team Koding</author>
    <description>  Introduction Perl is a family of high-level, general-purpose, interpreted, dynamic programming languages. The Perl languages borrow features from other programming languages including C, shell scripting (sh) etc. They provide powerful text processing facilities without the arbitrary data-length limits of many contemporary Unix commandline tools, facilitating easy manipulation of text files.
  Implementation The first thing you need to do is to create a file called helloworld in your Koding VM and paste the bellow snippet into it.
#!/usr/bin/perl

use strict;
use warnings;

print &amp;quot;Hello, World!&amp;quot;;
To run the above file in your Koding VM, just open your Koding Terminal and type the following commands:
first ensure the file is given executable permissions:
chmod u+x helloworld
and then run this command
perl helloworld
  Explanation #!/usr/bin/perl
Every Perl program should start with this as its very first line, although this may vary from system to system. This line tells the machine what to do with the file when it is executed.
use strict;
use warnings;
These two statements turn on the &amp;apos;strict&amp;apos; and &amp;apos;warnings&amp;apos; pragmas. These are strongly encouraged for all Perl programs since they tell the Perl interpreter to check for programming errors like undeclared variables.
print &amp;quot;Hello, World!&amp;quot;;
The print function outputs some data. In the above case it prints out the string Hello world, and as always the statement ends with a semicolon.
And that&amp;apos;s it!
You just wrote and ran your first Hello World in Perl.
</description>
  </item>
  
  <item>
    <title>Hello World on Koding: Pascal</title>
    <link>//learn.koding.com/guides/hello-world/pascal</link>
    <pubDate>"2015-06-01T00:00:00.000Z"</pubDate>
    <guid isPermaLink="true">//learn.koding.com/guides/hello-world/pascal</guid>
    <author>Bee Jay</author>
    <description>  Introduction Pascal &amp;#x2014;or Object Pascal&amp;#x2014; nowadays is mostly known as an old and outdated programming language. The fact is, Pascal is still alive and kicking right to this very day. Today&amp;apos;s Pascal is not the old 70s Pascal. It evolves, adapts, and grows with the modern world. The most known and used Pascal compilers of today are Free Pascal with its Lazarus IDE and Embarcadero&amp;apos;s Delphi RAD Studio as the successor of Borland Delphi.
Functionally, similarly to C language, Pascal is a general-purpose programming language. It has imperative, object-oriented and generic programming features, while also providing the facilities for low-level memory manipulation and the speed of native code. However, conceptually Pascal is a very different compared to the C programming language. Pascal brings you an elegant and neat language, yet still has as much power as C, or other modern programming languages.
  Implementation Since Koding doesn&amp;apos;t include the Free Pascal compiler, by default on your VM, the first thing you need to do is to install it manually. Don&amp;apos;t worry, it&amp;apos;s very easy and straight forward, thanks to Ubuntu OS that is present on each Koding VM. 
Now, open your Koding Terminal and type the following commands:
sudo apt-get update
sudo apt-get install fpc

Let it run and just answer Yes (Y) every time it asks for your confirmation. If all goes fine, Free Pascal should now be installed on your VM. To make sure, continue with this command:
fpc

It is should show Free Pascal&amp;apos;s commands and arguments list. If these show up then Free Pascal has been installed on your VM, successfully.
Next, you&amp;apos;ll need to create a file named helloworld.pas in your home folder and paste the below snippet into it.
begin
    writeln(&amp;apos;Hello World!&amp;apos;);
end.
To run the above file in your Koding VM, just open your Koding Terminal and type the following commands:
fpc helloworld.pas
./helloworld

The beauty of the Pascal language is that the syntax is very human friendly. That&amp;apos;s what a modern programming language should be. So the above snippet will basically write a line of text that outputs Hello World!.
  Pascal on the Web Beeing able to compile and run a simple Hello World console application isn&amp;apos;t enoug! Today, everything goes on the web. And Pascal certainly is able to do just that!
Now, open the same helloworld.pas program above and let&amp;apos;s add some more code. Modify the above code into this:
begin
    writeln(&amp;apos;content-type: text/html;&amp;apos;);
    writeln;
    writeln(&amp;apos;Hello World from Pascal!&amp;apos;)
end.
Then switch to your Terminal window and type these commands:
$ fpc helloworld.pas
$ mv helloworld Web/helloworld.cgi

The last command above is deploying your Pascal program as CGI into your web accessible folder on your Koding VM.
Next, open a new browser window and type your Koding VM domain followed by helloworld.cgi, for example:
 tipFind out more about your VM hostname here.
 http://KODING_USERNAME.koding.io/helloworld.cgi
Your first Pascal CGI is running and accessible from the internet. Congratulations!
  Going Further It&amp;apos;s possible to write complex applications using Pascal. If you&amp;apos;re new to Pascal, there are lots of Pascal tutorial on the internet. This one from Tutorials Point is one of the best online Pascal tutorials.
Free Pascal has pretty rich libraries, frameworks, and tools for almost any kind of programming needs, from console, database, mobile, games, multimedia, etc
And that&amp;apos;s it.
If you encounter any issues or have any questions please drop an email here
</description>
  </item>
  
  <item>
    <title>Hello World on Koding: Java</title>
    <link>//learn.koding.com/guides/hello-world/java</link>
    <pubDate>"2015-06-01T00:00:00.000Z"</pubDate>
    <guid isPermaLink="true">//learn.koding.com/guides/hello-world/java</guid>
    <author>Team Koding</author>
    <description>  Introduction Java is a general-purpose computer programming language that is concurrent, class-based, object-oriented, and specifically designed to have as few implementation dependencies as possible.
  Implementation The first thing you need to do is to create a file called HelloWorld.java in your Koding VM and paste the bellow snippet into it.
public class HelloWorld {
    public static void main(String[] args) {
        System.out.println(&amp;quot;Hello, World!&amp;quot;);
    }
}
To run the above file in your Koding VM, just open your Koding Terminal and type the following commands:
javac HelloWorld.java
java HelloWorld
  Explanation public class HelloWorld
The first line defines a class called HelloWorld. In Java, every line of code that can actually run needs to be inside a class. This line declares a class named HelloWorld, which is public, that means that any other class can access it.
public static void main(String[] args)
The main method has to have this exact signature in order to be able to run your program.

public - means that anyone can access it.
static  - means that you can run this method without creating an instance of Main.
void - means that this method doesn&amp;apos;t return any value.
main - is the name of the method.

The arguments inside the method are the arguments that you will get when running the program with parameters. It&amp;apos;s an array of strings.
{}
The curly brackets, one in the beginning and one at the end, are used to group all commands together, they are used to mark the beginning and end of a
group or function.
System.out.println(&amp;quot;Hello, World!&amp;quot;);
System is a pre-defined class that Java provides and it also holds some useful methods and variables. out is a static variable within System that represents the output of your program. println is a method of out that can be used to print a line.
And that&amp;apos;s it!
You just wrote and ran your first Hello World in Java.
If you&amp;apos;d like to continue dabbling in Java, we recommend taking a look at this tutorial written for Koding over at Andriodauthority.com
</description>
  </item>
  
  <item>
    <title>Hello World on Koding: Go</title>
    <link>//learn.koding.com/guides/hello-world/go</link>
    <pubDate>"2015-06-01T00:00:00.000Z"</pubDate>
    <guid isPermaLink="true">//learn.koding.com/guides/hello-world/go</guid>
    <author>Team Koding</author>
    <description>  Introduction Go or golang is a statically-typed language with syntax loosely derived from C, that adds garbage collection, type safety, some dynamic-typing capabilities, additional built-in types such as variable-length arrays and key-value maps, and a large standard library.
  Implementation The first thing you need to do is to create a file called helloworld.go in your Koding VM and paste the bellow snippet into it.
package main

import &amp;quot;fmt&amp;quot;

func main() {
    fmt.Println(&amp;quot;Hello World!&amp;quot;)
}
To run the above file in your Koding VM, just open your Koding Terminal and type the following command:
go run helloworld.go
Or you can build the program into a binary. You can do this using the bellow command:
go build helloworld.go
And you can then execute the built binary directly.
./hello-world
  Explanation package main
This is known as a &amp;#x201C;package declaration&amp;#x201D;. Every Go program must start with a package declaration. There are two types of Go programs: executables and libraries. Executable applications are the kinds of programs that you can run directly from the terminal.
import &amp;quot;fmt&amp;quot;
The import keyword is how you include code from other packages to use with you program. The fmt package (shorthand for format) implements formatting for input and output.
func main()
Functions are the building blocks of a Go program. They have inputs, outputs and a series of steps called statements which are executed in order. All functions start with the keyword func followed by the name of the function (main in this case), a list of zero or more &amp;#x201C;parameters&amp;#x201D; surrounded by parentheses, an optional return type and a &amp;#x201C;body&amp;#x201D; which is surrounded by curly braces.
{}
The two curly brackets, one in the beginning and one at the end, are used to group all commands together, they are used to mark the beginning and end of a
group or function.
fmt.Println(&amp;quot;Hello World&amp;quot;)
This statement is made of three pieces. First you access another function inside of the fmt package called Println (that&amp;apos;s the fmt.Println piece, Println means Print Line). Then you create a new string that contains Hello World and call that function with the string as the first and only argument.
And that&amp;apos;s it!
You just wrote and ran your first Hello World in Go.
</description>
  </item>
  
  <item>
    <title>Koding with Sublime Text</title>
    <link>//learn.koding.com/guides/koding-with-sublime-text</link>
    <pubDate>"2015-06-01T00:00:00.000Z"</pubDate>
    <guid isPermaLink="true">//learn.koding.com/guides/koding-with-sublime-text</guid>
    <author>koding</author>
    <description>This guide will show you how to connect your Koding VM with Sublime Text (v2 or v3) via SFTP.
  What you will need: 
Set up FTP on your Koding VM 
Your Koding username
Your Koding VM user&amp;apos;s password
Your VM Hostname
Sublime Text v2.x or v3.x

  Getting started 
Download Package Control and use the Package Control: Install Package command from the command palette. The command palette is opened via ctrl+shift+p on Windows and Linux, and cmd+shift+p on OS X.


Once you run the Package Control: Install Package command, a list of packages will appear. Type in SFTP and hit enter. Using Package Control ensures Sublime SFTP will stay up to date automatically.


Open the folder that you want to sync with your VM using Sublime Text


Right click the folder in the sidebar and select SFTP/FTP -&amp;gt; Map to Remote


You should now see a file by the name of sftp-config.json open up in the editor


Configure your sftp-config.json file as described below and save it.
{
 // The tab key will cycle through the settings when first created
 // Visit http://wbond.net/sublime_packages/sftp/settings for help

 // sftp, ftp or ftps &amp;lt;&amp;lt;&amp;lt;&amp;lt; this is very important. only use &amp;apos;ftp&amp;apos;
 &amp;quot;type&amp;quot;: &amp;quot;ftp&amp;quot;,

 // select the options below that suit your needs
 &amp;quot;save_before_upload&amp;quot;: true,
 &amp;quot;upload_on_save&amp;quot;: false,
 &amp;quot;sync_down_on_open&amp;quot;: false,
 &amp;quot;sync_skip_deletes&amp;quot;: false,
 &amp;quot;sync_same_age&amp;quot;: true,
 &amp;quot;confirm_downloads&amp;quot;: false,
 &amp;quot;confirm_sync&amp;quot;: true,
 &amp;quot;confirm_overwrite_newer&amp;quot;: false,

 // vm connection config
 // make sure that your personal domain is active. see http://learn.koding.com/faq/vm-hostname/
 &amp;quot;host&amp;quot;: &amp;quot;&amp;lt;your koding username&amp;gt;.koding.io&amp;quot;,
 &amp;quot;user&amp;quot;: &amp;quot;&amp;lt;your koding username&amp;gt;&amp;quot;,
 // this is not your koding password
 &amp;quot;password&amp;quot;: &amp;quot;&amp;lt;your vm user&amp;apos;s password&amp;gt;&amp;quot;,
 //&amp;quot;port&amp;quot;: &amp;quot;22&amp;quot;,

 &amp;quot;remote_path&amp;quot;: &amp;quot;/home/&amp;lt;your koding username&amp;gt;&amp;quot;,
 &amp;quot;ignore_regexes&amp;quot;: [
     &amp;quot;\\.sublime-(project|workspace)&amp;quot;, &amp;quot;sftp-config(-alt\\d?)?\\.json&amp;quot;,
     &amp;quot;sftp-settings\\.json&amp;quot;, &amp;quot;/venv/&amp;quot;, &amp;quot;\\.svn/&amp;quot;, &amp;quot;\\.hg/&amp;quot;, &amp;quot;\\.git/&amp;quot;,
     &amp;quot;\\.bzr&amp;quot;, &amp;quot;_darcs&amp;quot;, &amp;quot;CVS&amp;quot;, &amp;quot;\\.DS_Store&amp;quot;, &amp;quot;Thumbs\\.db&amp;quot;, &amp;quot;desktop\\.ini&amp;quot;
 ],
 //&amp;quot;file_permissions&amp;quot;: &amp;quot;664&amp;quot;,
 //&amp;quot;dir_permissions&amp;quot;: &amp;quot;775&amp;quot;,

 //&amp;quot;extra_list_connections&amp;quot;: 0,

 &amp;quot;connect_timeout&amp;quot;: 30,
 &amp;quot;keepalive&amp;quot;: 120,
 &amp;quot;ftp_passive_mode&amp;quot;: true,
 //&amp;quot;ftp_obey_passive_host&amp;quot;: false,
 //&amp;quot;ssh_key_file&amp;quot;: &amp;quot;~/.ssh/id_rsa&amp;quot;,
 //&amp;quot;sftp_flags&amp;quot;: [&amp;quot;-F&amp;quot;, &amp;quot;/path/to/ssh_config&amp;quot;],

 //&amp;quot;preserve_modification_times&amp;quot;: false,
 //&amp;quot;remote_time_offset_in_hours&amp;quot;: 0,
 //&amp;quot;remote_encoding&amp;quot;: &amp;quot;utf-8&amp;quot;,
 //&amp;quot;remote_locale&amp;quot;: &amp;quot;C&amp;quot;,
 //&amp;quot;allow_config_upload&amp;quot;: false,
}

Right click the folder, select SFTP/FTP. You will now see many more options than before.


(IMPORTANT) Chose whether you want to Sync Local -&amp;gt; Remote or Sync Remote -&amp;gt; Local. Be very careful about which you choose. Sync Local -&amp;gt; Remote overwrites what you have in your remote directory that you specified in you sftp-config.json file with what you have in your local directory.  Sync Remote -&amp;gt; Local overwrites what you have in your local directory with what you have in your remote directory that you specified in you sftp-config.json file.


(IMPORTANT) Check what is about to be performed in the box below before confirming your actions!



And there you have it, a folder synced with your Koding VM.
</description>
  </item>
  
  <item>
    <title>What happens upon upgrade?</title>
    <link>//learn.koding.com/guides/what-happens-upon-upgrade</link>
    <pubDate>"2015-06-01T00:00:00.000Z"</pubDate>
    <guid isPermaLink="true">//learn.koding.com/guides/what-happens-upon-upgrade</guid>
    <author>Team Koding</author>
    <description>You just upgraded your account, awesome (and thanks!) but what happens now?
Based on the type of plan you selected on the Pricing page you now have access to more resources as compared to your free Koding account. These resources fall into the following categories:

Ability to mark your VM(s) as Always-On
Add more storage to your VM(s)
Share our VM with other Koding users
Create snapshots of your VM

  Turn on &amp;quot;Always On&amp;quot; mode for your VM 
Go to the VM settings modal.
On the &amp;quot;General&amp;quot; tab, find the switch for &amp;quot;Always On&amp;quot; and turn it on. Your VM will
now not turn off even if you log out. This also means your public IP address will now be static.


  Adding more disk space 
Head over to VM settings
Click on the &amp;quot;Disk Usage&amp;quot; tab and click the &amp;quot;resize your VM&amp;quot; link  (as shown in the image below)

This will open the resize modal from where you can resize your VM.

  Adding more VMs (Only for Developer and Professional Plans) 
Hover your mouse over the &amp;quot;Your VMs&amp;quot; label in the sidebar (as shown in the image below)

The &amp;quot;+&amp;quot; icon will appear
Click the icon to and you will be presented with the option to create a new VM. You can select the size and the region of the VM.


  Share your VM with other Koding users Sharing your VM is very useful when you are doing &amp;quot;serial collaboration&amp;quot; which means one person takes over when the other is done. You can learn all about how to share your VMs through this guide.
  Create Snapshots of your VM Snapshots are very handy when you want to save the state of your VM as a backup or as a starting point
for a new VM. We have a full guide on this feature that will help you understand all the features.
</description>
  </item>
  
  <item>
    <title>How to free up space on a Koding VM</title>
    <link>//learn.koding.com/guides/freeing-up-space</link>
    <pubDate>"2015-05-27T00:00:00.000Z"</pubDate>
    <guid isPermaLink="true">//learn.koding.com/guides/freeing-up-space</guid>
    <author>Team Koding</author>
    <description> tipYou can get more space by referring your friends and colleagues to Koding! For every
new referral, you get an extra 500MB. More details here.
 This tutorial will cover some basic steps and advanced that will help you clear space on your VM by deleting software packages that you don&amp;apos;t need or use.
  Basics Use the command below to delete downloaded packages (.deb) already installed and that you no longer need:
sudo apt-get clean
Use this command to remove all stored archives in your cache for packages that can not be downloaded anymore (since the packages are no longer in the repository or they have a new version in the repo).
sudo apt-get autoclean
Some apps leave behind remnant files even after you uninstall them. This command will clean up those orphaned files.
sudo apt-get autoremove
  Advanced Check for the the top 10 biggest subfolders in the current folder using this command:
du -sk * | sort -nr | head -10
You can also check to see if you have old kernels that require deletion:
ls -lh /boot
Use the bellow command to get a list of all installed packages, sorted by size. If you see something big and you&amp;apos;re not using it uninstall it.
dpkg-query -W --showformat=&amp;apos;${Installed-Size} ${Package}\n&amp;apos; | sort -nr | less
You can clean unused language files with translations using the localepurge tool:
sudo apt-get install localepurge
Check for unused content here /var/tmp/ using this command:
du -sh /var/tmp/
If you wan to search for big files the bellow commands will help you do that:
find / -type f -size +1024k
or
find / -size +50000  -exec ls -lahg {} \;
That should give you plenty to consider for deletion and once you are done deleting, hopefully you can recover storage space on your VM.
If you encounter any issues or have any questions please drop us an email here.
</description>
  </item>
  
  <item>
    <title>Sync files using Google Drive</title>
    <link>//learn.koding.com/guides/sync-files-google-drive</link>
    <pubDate>"2015-05-27T00:00:00.000Z"</pubDate>
    <guid isPermaLink="true">//learn.koding.com/guides/sync-files-google-drive</guid>
    <author>Team Koding</author>
    <description> alertDue to Google recently deprecating the API on which grive depended, we do not
recommend you install grive to connect to Google Drive as the author of grive
has not yet updated the software to work with the new version of the Google
Docs API. We will update this msg once we have a better solution.
 Before you continue reading this guide why not try a more easy way, using the Koding Package Manager (kpm) and start synchronizing your files using Google Drive with just one command:
kpm install gdrive

This guide will cover how to get started with synchronizing your files that are hosted on your Google Drive account (works
with both personal and business Google Apps accounts).
You can install Google Drive on your Koding VM by following these simple steps in Terminal.
  Steps To achieve the sync, we will use an app called grive so first you need to install the grive app using the following command:
sudo apt-get install grive
After that you need to create a folder where the Google Drive folders and files will be synced.
mkdir GDrive
cd GDrive
We need to soft-link some dependencies for the grive app to work properly. Use the following command to achieve this.
sudo ln -s /usr/lib/libbfd-2.23.2-system.so /usr/lib/libbfd-2.23-system.so
The last step is to start the Google Drive app and authorize it with the Google services.
grive -a
Cut and paste the link that the grive app shows you into a new browser tab/window to get an authorization code.
Once you have an auth code, paste it back in the Terminal window to continue the installation process.
Now you can sync you files using the command grive in the GDrive folder you created.
Note 1: The app does not run in the background automatically continuously doing a sync. In order to achieve that, you can set up a cron job on your VM that runs every x seconds/minutes/hours depending on your preference. To learn more about cron, open up a new Terminal tab and type in:
man cron
 Note 2: As per the author of grive, the application will not download any files that are the traditional Google Docs (Spreadsheet, Documents,Presentations, etc.). The app will only automatically upload/download any non-native Google Doc formats which include code files, text files, images, etc.
</description>
  </item>
  
  <item>
    <title>Installing Jekyll on Koding</title>
    <link>//learn.koding.com/guides/installing-jekyll</link>
    <pubDate>"2015-05-21T00:00:00.000Z"</pubDate>
    <guid isPermaLink="true">//learn.koding.com/guides/installing-jekyll</guid>
    <author>dehli</author>
    <description>Before you continue reading this guide why not try a more easy way using the Koding Package Manager (kpm) and install Jekyll using just one command:
kpm install jekyll

This tutorial will guide you through the installation of Jekyll on a Koding VM.
  Install RVM Use the two commands below to install rvm on your virtual machine (for more information visit here):
gpg --keyserver hkp://keys.gnupg.net --recv-keys 409B6B1796C275462A1703113804BB82D39DC0E3

\curl -sSL https://get.rvm.io | bash -s stable --ruby
Then run the rvm script:
source .rvm/scripts/rvm
  Install Jekyll Use this command to install Jekyll:
gem install jekyll
  Create a Jekyll site  tip The next step can be skipped if you&amp;apos;ve already created a Jekyll site.
 Execute the following command, where JekyllSite is the destination folder of your website:
jekyll new JekyllSite
  Run the server Set the current directory to the website&amp;apos;s directory (for this tutorial it&amp;apos;s JekyllSite):
cd JekyllSite
Execute the following command:
jekyll serve --host 0.0.0.0
 tipFor more details on your hostname, read this.*
   View the website Navigate to http://username.koding.io:4000
 tipMake sure to replace username above with your Koding username.
 </description>
  </item>
  
  <item>
    <title>Using Dropbox with Koding</title>
    <link>//learn.koding.com/guides/dropbox-for-file-sync</link>
    <pubDate>"2015-05-19T00:00:00.000Z"</pubDate>
    <guid isPermaLink="true">//learn.koding.com/guides/dropbox-for-file-sync</guid>
    <author>Team Koding</author>
    <description>In this guide we&amp;apos;ll walk you through how to set up Dropbox right on your Koding VM for a seamless sync experience between your local system and your Koding VM. Dropbox has built a best-in-class file sync and storage service.
  Getting started Before we begin please make sure you have the Koding Package Manager (KPM) installed on your VM. Follow this guide to understand what KPM is and how to install it so you will be able to continue with this guide.
Also make sure you have an active Dropbox account (free or paid).
  Setup Run the following command, in your Koding Terminal, to install the necessary dependency:
 alertIf you already have Dropbox installed via KPM then you need to run kpm uninstall dropbox and then the below command to get the latest version.
 kpm install dropbox
This will install the Dropbox daemon on your Koding VM, that will make the file sync possible.
After the install has finished you&amp;apos;ll need to configure the daemon with your Dropbox account. In order to that you&amp;apos;ll need to type this command:
dropboxd
Next you&amp;apos;ll see a message similar to this one:
Please visit https://www.dropbox.com/cli_link_nonce?nonce=A_VERY_LONG_NUMBER to link this device.
Copy the link and past it in a new tab.
Sign in to your Dropbox account.
That&amp;apos;s it! You should see a message in your Terminal similar to this one:
This computer is now linked to Dropbox. Welcome YOUR_DROPBOX_NAME
The Dropbox deamon will sync files into the ~/Dropbox folder. At this point, the Dropbox deamon is syncing all the files from your Dropbox account to your Koding VM. If you have a lot of files on your Dropbox account, this can quickly eat up the space on your VM so we recommend you configure &amp;quot;Selective Sync&amp;quot; as described below. To immediately stop the Dropbox deamon and cancel the download that is in progress, hit Ctrl-c.
 tipWhenever you turn on Koding VM you will have to run the dropbox start command to get dropbox started.
   Using the Dropbox selective sync feature Selective sync allows you to specify which files from your Dropbox folder you would like to sync between your Koding VM and your Dropbox account.
To set up selective sync, follow these easy steps:

Download the Dropbox command line instructions script that Dropbox has created for this purpose.
Now all you need to do is add the folder that you wish to omit to the &amp;quot;do not sync&amp;quot; list. You can do that as follows:/path/to/dropbox.py exclude add ~/Dropbox/path/to/folder/
Simply substitute the /path/to/ above to the actual path to the Dropbox script you downloaded.

If you encounter any issues or have any questions please drop us an email here.
</description>
  </item>
  
  <item>
    <title>Setting up a Symfony2 webserver</title>
    <link>//learn.koding.com/guides/setting-symfony2-webserver</link>
    <pubDate>"2015-05-19T00:00:00.000Z"</pubDate>
    <guid isPermaLink="true">//learn.koding.com/guides/setting-symfony2-webserver</guid>
    <author>Team Koding</author>
    <description>  Getting started Before you can start the Symfony2 install process, you&amp;apos;ll need to update all of the apt-get packages:
sudo apt-get update
Then make sure you have curl installed on your VM. You can install it using the bellow command:
sudo apt-get install curl
Also you&amp;apos;ll have to have Composer installed on your VM. You can install it either manually or using the Koding Package Manager (kpm).
Run the following commands to download, move and give right permissions to Composer:
curl -sS https://getcomposer.org/installer | php #!/usr/bin/env php
sudo mv composer.phar /usr/local/bin/composer
chmod +x /usr/local/bin/composer
or you can just run
kpm install composer
  Usage Create a new project to test your webserver and move into that project:
composer create-project symfony/framework-standard-edition goodbyetolocalhost
cd goodbyetolocalhost
You can now start the Symfony2 webserver like so:
php app/console server:run 0.0.0.0:8080
You will now be able to access the Symfony2 webserver by following a similar URL:
http://KODING_USERNAME.koding.io:8080
Find out more about your VM hostname here.
If you can&amp;apos;t reach your project via the browser you have to make sure it listens to 0.0.0.0:8080. You can check this, using the netstat command in another terminal window and the bellow command:
sudo netstat -tnlp
And that&amp;apos;s it!
If you encounter any issues or have any questions please drop us an email here.
</description>
  </item>
  
  <item>
    <title>Elasticsearch install for beginners</title>
    <link>//learn.koding.com/guides/elasticsearch-install-for-beginners</link>
    <pubDate>"2015-05-19T00:00:00.000Z"</pubDate>
    <guid isPermaLink="true">//learn.koding.com/guides/elasticsearch-install-for-beginners</guid>
    <author>Team Koding</author>
    <description>Before you continue reading this guide why not try a more easy way, using the Koding Package Manager (kpm) and install Elasticsearch using just one command:
kpm install elasticsearch

Elasticsearch is a flexible and powerful open source, distributed, real-time search and analytics engine. It can be scaled as needed. This tutorial will cover the installation process on a Koding VM.
  Getting started Before you can start the Elasticsearch install process, you&amp;apos;ll need to update all of the apt-get packages:
sudo apt-get update
Make sure you have Oracle Java 7 installed on your VM before you continue. You can install the later using the following commands:
Add the repository first:
sudo add-apt-repository ppa:webupd8team/java
and then install the package like so:
sudo apt-get install oracle-java7-installer
You can check if Java has installed correctly by running java -version.
 tipAll Koding VMs come preinstalled with Java.
   Installing To get Elasticsearch installed you&amp;apos;ll need to run the following commands in your Koding Terminal.
Download the archive:
wget https://download.elasticsearch.org/elasticsearch/elasticsearch/elasticsearch-1.4.2.zip
Now unzip the downloaded archive:
unzip elasticsearch-1.4.2.zip
This will create a directory called elasticsearch-1.4.2. You now need to change into that directory by entering:
cd elasticsearch-1.4.2
and you&amp;apos;ll be able to find the binaries in the bin folder.
  Configuration The configuration files for Elasticsearch are found in the config folder of the above resulting directory.
There are two important configuration files: elasticsearch.yml and logging.yml. The first configures the Elasticsearch server settings, and the latter, the logger settings used by Elasticsearch.
You can find the Elasticsearch logs here /var/log/elasticsearch, by default.
The first thing you need to do is to remove the public access. Open the elasticsearch.yml file and search for network.bind_host, uncomment it and change the value to 0.0.0.0 so it looks like this:
network.bind_host: 0.0.0.0
After that you need to insert the following line somewhere in the file, to disable dynamic scripts:
script.disable_dynamic: true
You can now save the file and exit.
  Starting Elasticsearch Make sure you are in the folder generated in the install process.
You can now start the Elasticsearch server by running the following command:
./bin/elasticsearch
Consider that fact that Elasticsearch needs some time to start but when it does it should be running on port 9200. You can check this using the following command:
curl -X GET &amp;apos;http://localhost:9200&amp;apos;
Or open up a new browser window and follow a similar URL and you should see everything working:
http://KODING_USERNAME.koding.io:9200
Find out more about your VM hostname here.
You can stop the server using the RESTful API like so:
curl -XPOST &amp;apos;http://localhost:9200/_shutdown&amp;apos;
And that&amp;apos;s it!
If you encounter any issues or have any questions please drop us an email here.
</description>
  </item>
  
  <item>
    <title>Setup Cockpit on Koding</title>
    <link>//learn.koding.com/guides/setting-up-cockpit</link>
    <pubDate>"2015-05-19T00:00:00.000Z"</pubDate>
    <guid isPermaLink="true">//learn.koding.com/guides/setting-up-cockpit</guid>
    <author>Team Koding</author>
    <description>Before you continue reading this guide why not try a more easy way, using the Koding Package Manager (kpm) and install Cockpit using just one command:
kpm install cockpit

  What is Cockpit? Cockpit was born out of the need of building a simple dynamic site. Cockpits goal is to be simple, but yet powerful and designed in that way that you can spend less time trying to squeeze your site into a theme or template.
  Getting started Before you can start the Cockpit install process, you&amp;apos;ll need to update all of the apt-get packages:
sudo apt-get update
Make sure you have the PHP SQLite package installed on your VM before you continue. You can install it using this command:
sudo apt-get install php5-sqlite
Last but not least restart Apache:
sudo service apache2 restart
  Step 1 Run the below commands, which will install Cockpit on your VM:
Download the latest version:
curl -Lo /tmp/cockpit-0.13.0.tar.gz https://github.com/aheinze/cockpit/archive/0.13.0.tar.gz
Untar the archive and move it:
tar -C /tmp -zxf /tmp/cockpit-0.13.0.tar.gz

mv /tmp/cockpit-0.13.0 ~/Web/cockpit
Set the proper permissions for the storage folder and its subfolders:
cd Web
chmod 777 -R cockpit/storage
Clean up using the following command
sudo rm /tmp/cockpit-0.13.0.tar.gz
The set up has finished, you now need to complete the installation by heading over to a similar URL as this one and finish the installation:
http://KODING_USERNAME.koding.io/cockpit/install
Find out more about your VM hostname here.
  Step 2 If everything was successful this is the first thing your should see:

And that&amp;apos;s it!
If you encounter any issues or have any questions please drop us an email here.
</description>
  </item>
  
  <item>
    <title>How to install GruntJS</title>
    <link>//learn.koding.com/guides/installing-gruntjs</link>
    <pubDate>"2015-05-19T00:00:00.000Z"</pubDate>
    <guid isPermaLink="true">//learn.koding.com/guides/installing-gruntjs</guid>
    <author>Team Koding</author>
    <description>Before you continue reading this guide why not try a more easy way, using the Koding Package Manager (kpm) and install GruntJS using just one command:
kpm install grunt

  Getting started Before you can start the GruntJS install process, you&amp;apos;ll need to update all of the apt-get packages:
sudo apt-get update
By default every Koding VM comes preinstalled with NodeJS and npm but if it is missing, from your VM, have a look at this guide to learn how to install it.
  Installing To install GruntJS you&amp;apos;ll need to run the following command:
sudo npm install -g grunt-cli
This will install GruntJS globally on your VM.
You can verify if GruntJS has installed correctly using the following command:
grunt --version
  Usage You can use GruntJS in your project by inputting some basic commands.
Move into your project:
cd ~/your_project
Generate an empty package file:
echo &amp;quot;{}&amp;quot; &amp;gt; package.json
Finally, install GruntJS into that project using the following command:
npm install grunt --save-dev
And that&amp;apos;s it!
If you encounter any issues or have any questions please drop us an email here.
</description>
  </item>
  
  <item>
    <title>Install Rockmongo</title>
    <link>//learn.koding.com/guides/install-rockmongo</link>
    <pubDate>"2015-05-19T00:00:00.000Z"</pubDate>
    <guid isPermaLink="true">//learn.koding.com/guides/install-rockmongo</guid>
    <author>Thien</author>
    <description>Before you continue reading this guide why not try a more easy way, using the Koding Package Manager (kpm) and install Rockmongo using just one command:
kpm install rockmongo

  What is Rockmongo Rockmongo is a MongoDB administration tool that can be used to manage servers, databases, collections, documents, indexes etc. It provides a very user-friendly way for reading, writing and creating documents. It is very similar to phpMyAdmin.
  Step 1 The first thing you need to do is to open up your Koding Terminal and type in the following command:
cd Web
  Step 2. Next up, you need to download the Rockmongo version that you&amp;apos;re planing on using. In this case, you are going to use the latest version:
git clone --depth=1 https://github.com/iwind/rockmongo.git
  Step 3 Open the config.php file and change the following things:

Host - should be set to 0.0.0.0
Port - choose a desired port
Chose a username and password. Note that by default they are set to admin and admin.

  Step 4 Now Mongodb will need the PHP driver to work. You need to install it by running this command:
sudo pecl install mongo
After that you will need to edit the file 20-mono.ini, that is located at this path /etc/php5/apache2/conf.d/, and you you will need to add this line at the very end:
extension=mongo.so
  Step 5 Restart the Apache server using the following command and you should see everything working.
sudo service apache2 restart
You will now be able to access Rockmongo by following a similar URL:
http://YOUR_KODING_USERNAME.koding.io/rockmongo
If everything is working properly, you should see the following screen in your browser:

And that&amp;apos;s it!
If you encounter any issues or have any questions please drop us an email here.
</description>
  </item>
  
  <item>
    <title>Install phpPgAdmin</title>
    <link>//learn.koding.com/guides/install-phppgadmin</link>
    <pubDate>"2015-05-19T00:00:00.000Z"</pubDate>
    <guid isPermaLink="true">//learn.koding.com/guides/install-phppgadmin</guid>
    <author>Team Koding</author>
    <description>Before you continue reading this guide why not try a more easy way, using the Koding Package Manager (kpm) and install phpPgAdmin using just one command:
kpm install phppgadmin

This guide will walk you through the steps you need to take in order to get phpPgAdmin installed on your Koding VM.
Just follow the steps and you should get phpPgAdmin installed in no time.
  Getting started Before you begin please make sure you have PostgreSQL installed on your VM. Follow this guide to learn how to install PostgreSQL on your Koding VM.
  Step 1 The first thing that you need to do is to update you package list. You can do that using the following command.
sudo apt-get update
After that you can go ahead and install phpPgAdmin using the following command:
sudo apt-get install phppgadmin
  Step 2 After the installation process has finished you have to make sure that the Apache server is serving phpPgAdmin properly. In order to do that you need to edit the Apache configuration file. You can use the following command:
sudo nano /etc/apache2/conf.d/phppgadmin
Make sure the file looks like this:
Alias /phppgadmin /usr/share/phppgadmin

&amp;lt;Directory /usr/share/phppgadmin&amp;gt;

DirectoryIndex index.php
# AllowOverride None

order deny,allow
deny from all
allow from 127.0.0.0/255.0.0.0 ::1/128
allow from all

&amp;lt;IfModule mod_php5.c&amp;gt;
  php_flag magic_quotes_gpc Off
  php_flag track_vars On
  #php_value include_path .
&amp;lt;/IfModule&amp;gt;
&amp;lt;IfModule !mod_php5.c&amp;gt;
  &amp;lt;IfModule mod_actions.c&amp;gt;
    &amp;lt;IfModule mod_cgi.c&amp;gt;
      AddType application/x-httpd-php .php
      Action application/x-httpd-php /cgi-bin/php
    &amp;lt;/IfModule&amp;gt;
    &amp;lt;IfModule mod_cgid.c&amp;gt;
      AddType application/x-httpd-php .php
      Action application/x-httpd-php /cgi-bin/php
    &amp;lt;/IfModule&amp;gt;
  &amp;lt;/IfModule&amp;gt;
&amp;lt;/IfModule&amp;gt;

&amp;lt;/Directory&amp;gt;
Save the file.
Now you&amp;apos;ll need to create a symlink to be able to access phpPgAdmin correctly:
ln -s /usr/share/phppgadmin /var/www/phppgadmin
  Step 3 Restart the Apache server using the following command:
sudo service apache2 restart
You will now be able to access phpPgAdmin by following a similar URL and you should see everything working:
http://KODING_USERNAME.koding.io/phppgadmin

Find out more about your VM hostname here.
And that&amp;apos;s it.
If you encounter any issues or have any questions please drop us an email here.
</description>
  </item>
  
  <item>
    <title>CouchDB installation for beginners</title>
    <link>//learn.koding.com/guides/couchdb-installation-for-beginners</link>
    <pubDate>"2015-05-19T00:00:00.000Z"</pubDate>
    <guid isPermaLink="true">//learn.koding.com/guides/couchdb-installation-for-beginners</guid>
    <author>Team Koding</author>
    <description>Before you continue reading this guide why not try a more easy way, using the Koding Package Manager (kpm) and install CouchDB using just one command:
kpm install couchdb

This guide will help install CouchDB on your Koding VM.
  Getting started Before you can start the CouchDB install process, you&amp;apos;ll need to update all of the apt-get packages:
sudo apt-get update
Make sure you have curl installed on your VM before you continue. You can install it using the following command:
sudo apt-get install curl
  Installing CouchDB can be installed by running the following command:
sudo apt-get install couchdb
By default CouchDB runs on port :5984. If you want to check CouchDB and see if it&amp;apos;s running correctly you can issue this command:
curl localhost:5984
and it should output something like this:
{&amp;quot;couchdb&amp;quot;:&amp;quot;Welcome&amp;quot;,&amp;quot;uuid&amp;quot;:&amp;quot;dfd16361e5321d4a90d01feedee6c0b1&amp;quot;,&amp;quot;version&amp;quot;:&amp;quot;1.5.0&amp;quot;,&amp;quot;vendor&amp;quot;:{&amp;quot;name&amp;quot;:&amp;quot;Ubuntu&amp;quot;,&amp;quot;version&amp;quot;:&amp;quot;14.04&amp;quot;}}
  Usage If you want to create a new database you can use the PUT command:
curl -X PUT localhost:5984/new_database
The output should look like this:
{&amp;quot;ok&amp;quot;:true}
And that&amp;apos;s it!
If you encounter any issues or have any questions please drop us an email here.
</description>
  </item>
  
  <item>
    <title>How to install Memcache</title>
    <link>//learn.koding.com/guides/install-memcache</link>
    <pubDate>"2015-05-19T00:00:00.000Z"</pubDate>
    <guid isPermaLink="true">//learn.koding.com/guides/install-memcache</guid>
    <author>Team Koding</author>
    <description>Before you continue reading this guide why not try a more easy way, using the Koding Package Manager (kpm) and install Memcache using just one command:
kpm install memcached

  Getting started Before you can start the Memcache install process, you&amp;apos;ll need to update all of the apt-get packages:
sudo apt-get update
Make sure you have mySQL and PHP installed on your VM before you continue.
  Step 1 To install Memcache you&amp;apos;ll need to run the following command:
sudo apt-get install php5-memcached memcached
This will install the required package for PHP and also the Memcached package.
  Step 2 You can now check if the packages have been installed correctly. Run the following commands from your Terminal:
cd Web
sudo nano info.php
Copy the following lines into the file:
&amp;lt;?php
phpinfo();
?&amp;gt;
You&amp;apos;ll now be able to check if Memcache has installed correctly by accessing a url similar to this one:
http://KODING_USERNAME.koding.io/info.php
Find out more about your VM hostname here.
If you scroll down or search for the &amp;quot;memcached&amp;quot; section header, you should find something that looks like this:

You can check whether the Memcache service is running by typing:
ps aux | grep memcached
And it should output something similar to this:
memcache  6584  0.0  0.0 327448  3004 ?        Sl   14:07   0:00 /usr/bin/memcached -m 64 -p 11211 -u memcache -l 127.0.0.1
demouser  6636  0.0  0.0  11744   904 pts/0    S+   14:29   0:00 grep --color=auto memcached
You can query Memcache for stats by typing:
echo &amp;quot;stats settings&amp;quot; | nc localhost 11211
And that&amp;apos;s it!
If you encounter any issues or have any questions please drop us an email here.
</description>
  </item>
  
  <item>
    <title>How to install MediaWiki</title>
    <link>//learn.koding.com/guides/how-to-install-mediawiki</link>
    <pubDate>"2015-05-19T00:00:00.000Z"</pubDate>
    <guid isPermaLink="true">//learn.koding.com/guides/how-to-install-mediawiki</guid>
    <author>Team Koding</author>
    <description>Before you continue reading this guide why not try a more easy way, using the Koding Package Manager (kpm) and install MediaWiki using just one command:
kpm install mediawiki

  MediaWiki requirements Before we begin you may want to make sure you have the following things installed on your Koding VM.

PHP 5.3.5 or greater
MySQL 5.0.2 or greater
The mod_rewrite Apache module

  Getting started You&amp;apos;ll need to update all of the apt-get packages first:
sudo apt-get update
  Database creation The first thing we need for our MediaWiki installation to work, is a new database. We can create one using either:

the command line
via phpMyAdmin.

The rest of this guide will focus on the command line method to create a database for our MediaWiki installation.
  Setting up MySQL Type in the commands listed below in a Koding Terminal.

Login to mySQL as the root user:

mysql -u root -p

Create a new database:

CREATE DATABASE mediawiki;

Create a new user and assign a password:

CREATE USER mediawikiuser@localhost IDENTIFIED BY &amp;apos;your_password&amp;apos;;

Give that user permission to access that database using the following command:

GRANT ALL PRIVILEGES ON mediawiki.* TO mediawikiuser@localhost;

Apply the changes so that mySQL knows about them:

FLUSH PRIVILEGES;

exit
 tipKeep the database user and password somewhere safe because you&amp;apos;ll need them later on in the install process.
 Restart the Apache and mySQL server to make sure everything is working properly:
sudo service apache2 restart
sudo service mysql restart
  Installing First you&amp;apos;ll need to download the Mediawiki package, like so:
cd Web
wget http://releases.wikimedia.org/mediawiki/1.24/mediawiki-1.24.1.tar.gz
Extract the archive:
tar zxvf mediawiki-1.24.1.tar.gz
Rename the folder:
mv mediawiki-1.24.1 mediawiki
 tipYou can rename this folder afterwords anyway you like.
   Finalizing the MediaWiki install Open up a new browser tab and navigate to your VM&amp;apos;s hostname and add /mediawiki at the end. If you don&amp;apos;t know what you VM hostname is, follow this guide to find out.
You should see the initial setup page. It should look like this:

Press the setup the wiki first button and now you&amp;apos;ll just need to follow the instructions on screen and finish the install.
At the very last step of the install process you&amp;apos;ll need to download a file and place it&amp;apos;s contents in your MediaWiki folder.
Download the file, open it with your local editor and copy it&amp;apos;s contents to a newly created file in your MediaWiki folder. You can use the following commands to achieve this:
Create the file on your VM:
touch LocalSettings.php
Open it using nano:
nano LocalSettings.php
copy the contents from the file you just downloaded and then save the file.
And that&amp;apos;s it! If you navigate to your VM&amp;apos;s hostname and add /mediawiki at the end you should see a working wiki.
If you encounter any issues or have any questions please drop us an email here.
</description>
  </item>
  
  <item>
    <title>How to install Redis</title>
    <link>//learn.koding.com/guides/install-redis</link>
    <pubDate>"2015-05-19T00:00:00.000Z"</pubDate>
    <guid isPermaLink="true">//learn.koding.com/guides/install-redis</guid>
    <author>Team Koding</author>
    <description>Before you continue reading this guide why not try a more easy way, using the Koding Package Manager (kpm) and install Redis using just one command:
kpm install redis

  Getting started Before you start the Redis install process, you&amp;apos;ll need to install a few things.
But first update all of the apt-get packages:
sudo apt-get update
You&amp;apos;ll need to download a compiler with build essential which will help you install Redis from the source:
sudo apt-get install build-essential
Last but not least download and install tcl:
sudo apt-get install tcl8.5
  Step 1 Download the source from the official website.
wget http://download.redis.io/releases/redis-2.8.19.tar.gz
Untar it and switch into the newly created directory:
tar xzf redis-2.8.19.tar.gz

cd redis-2.8.19
Continue with the make command:
make
After that you should run the recommended command:
make test
Lastly run make install, which installs the program system-wide.
sudo make install
  Step 2 Once Redis has finished installing, you&amp;apos;ll be able to run it as a background daemon because it comes with a built in script that allows you to do that.
To access the script switch into the utils directory:
cd utils
From there, run the Ubuntu install script using the following command:
sudo ./install_server.sh
While the script is running, you can choose the default options by pressing enter. Once the script is done, the redis-server will be running in the background.
You now have access to these commands that can start and stop Redis (the number depends on the port you set during the installation. 6379 is the default port setting):
sudo service redis_6379 start
sudo service redis_6379 stop
  Step 3 You can now access the Redis database by typing the following command:
redis-cli
You now have Redis installed and running. The prompt will look like this:
redis 127.0.0.1:6379&amp;gt;
If you want to set Redis to automatically start when you boot up your VM, run the next command:
sudo update-rc.d redis_6379 defaults
And that&amp;apos;s it!
If you encounter any issues or have any questions please drop us an email here.
</description>
  </item>
  
  <item>
    <title>Codeigniter Installation for Beginners</title>
    <link>//learn.koding.com/guides/codeigniter-for-beginners</link>
    <pubDate>"2015-05-19T00:00:00.000Z"</pubDate>
    <guid isPermaLink="true">//learn.koding.com/guides/codeigniter-for-beginners</guid>
    <author>Team Koding</author>
    <description>Before you continue reading this guide why not try a more easy way, using the Koding Package Manager (kpm) and install Codeigniter using just one command:
kpm install codeigniter

In this article we will go over installing Codeigniter for beginners.
  What is Codeigniter? Codeigniter may be old hat to some, but the tried and true frameworks tend to hold their own for quite a long time, and for good reason. It is polished, has an extensive history, and above all has a large community to back it up. 
  So how do i get started with Codeigniter? Before you begin make sure you are in your Web folder:
cd Web
First you will need to download the latest version of Codeigniter using the following command, in your Terminal:
wget https://github.com/bcit-ci/CodeIgniter/archive/2.2-stable.zip
After that you&amp;apos;ll need to unzip the file using the command:
unzip 2.2-stable.zip
Next we need to rename the folder to a more friendly one:
mv CodeIgniter-2.2-stable codeigniter
You will now be able to access Codeigniter by following a similar URL:
http://KODING_USERNAME.koding.io/codeigniter
Find out more about your VM hostname here.
Koding comes with Apache by default, so Codeigniter just works.
As you can see, setting up CodeIgniter is a pretty simple process.
If you encounter any issues or have any questions please drop us an email here.
</description>
  </item>
  
  <item>
    <title>Setting up a Laravel webserver with Artisan</title>
    <link>//learn.koding.com/guides/setting-laravel-artisan-webserver</link>
    <pubDate>"2015-05-19T00:00:00.000Z"</pubDate>
    <guid isPermaLink="true">//learn.koding.com/guides/setting-laravel-artisan-webserver</guid>
    <author>Team Koding</author>
    <description>Before you continue reading this section why not try a more easy way, using the Koding Package Manager (kpm) and install Laravel using just one command:
kpm install laravel

  Getting started Before you can start the Laravel install process, you&amp;apos;ll need to update all of the apt-get packages:
sudo apt-get update
Then make sure you have curl installed on your VM. You can install it using the bellow command:
sudo apt-get install curl
  Installing You can install Laravel using the bellow command:
sudo curl -o /usr/local/bin/laravel &amp;apos;http://laravel.com/laravel.phar&amp;apos;
After that process is over you need to set execute permission on the Laravel executable.
sudo chmod +x /usr/local/bin/laravel
  Usage You can now create a new Laravel project.
laravel new goodbyelocalhost
After that you should navigate into the newly created directory:
cd goodbyelocalhost
and you should have the ability to start the webserver using the bellow command:
php artisan serve --host=0.0.0.0 --port=8080
You will now be able to access the Laravel webserver by following a similar URL:
http://KODING_USERNAME.koding.io:8080
Find out more about your VM hostname here.
If you can&amp;apos;t reach your project via the browser you have to make sure it listens to 0.0.0.0:8080. You can check this, using the netstat command in another terminal window and the bellow command:
sudo netstat -tnlp
And that&amp;apos;s it!
If you encounter any issues or have any questions please drop us an email here.
</description>
  </item>
  
  <item>
    <title>PyroCMS Setup and Installation for Beginners</title>
    <link>//learn.koding.com/guides/pyrocms-installation-for-beginners</link>
    <pubDate>"2015-05-19T00:00:00.000Z"</pubDate>
    <guid isPermaLink="true">//learn.koding.com/guides/pyrocms-installation-for-beginners</guid>
    <author>Team Koding</author>
    <description>Before you continue reading this guide why not try a more easy way, using the Koding Package Manager (kpm) and install PyroCMS using just one command:
kpm install pyrocms

This article will cover the basic steps on how to setup a blog using PyroCMS as the base.
  What&amp;apos;s PyroCMS? It&amp;apos;s a really simple, flexible and community driven CMS built with the CodeIgniter PHP framework that has an on-growing community of developers and supporters around it.
After you&amp;apos;ve finished with the tutorial you&amp;apos;ll have a brand new website that runs PyroCMS.
  Step-by-step PyroCMS   Step 1. Open up your Koding Terminal and type in the following command to get you started.
cd Web
  Step 2. Still in the terminal window download the source code like so:
wget https://www.pyrocms.com/downloads/v2.2.5
  Step 3. We rename the downloaded file, unzip it and rename the newly created folder.
mv v2.2.5 v2.2.5.zip; unzip v2.2.5.zip; mv pyrocms-pyrocms-08759da pyrocms
  Step 4. You will now be able to access the PyroCMS by following a similar URL:
http://KODING_USERNAME.koding.io/pyrocms
Find out more about your VM hostname here.
And that&amp;apos;s it!
If you encounter any issues or have any questions please drop us an email here.
</description>
  </item>
  
  <item>
    <title>Setting up a Django webserver</title>
    <link>//learn.koding.com/guides/setting-django-webserver</link>
    <pubDate>"2015-05-19T00:00:00.000Z"</pubDate>
    <guid isPermaLink="true">//learn.koding.com/guides/setting-django-webserver</guid>
    <author>Team Koding</author>
    <description>Before you continue reading this section why not try a more easy way, using the Koding Package Manager (kpm) and install Django using just one command:
kpm install django

  Getting started Before you can start the Django install process, you&amp;apos;ll need to update all of the apt-get packages:
sudo apt-get update
Then make sure you have pip installed on your VM. You can install it using the Koding Package Manager (kpm) like so:
kpm install pip
  Installing You can install Django using the bellow command:
sudo pip install django
  Usage After Django has finished installing you can start a new project like so:
django-admin.py startproject goodbyelocalhost
After that you can run the webserver without binding it to localhost using the bellow commands:
cd goodbyelocalhost/
python manage.py runserver 0.0.0.0:8000
You will now be able to access the Django webserver by following a similar URL:
http://KODING_USERNAME.koding.io:8000
Find out more about your VM hostname here.
If you can&amp;apos;t reach your project via the browser you have to make sure it listens to 0.0.0.0:8000. You can check this, using the netstat command in another terminal window and the bellow command:
sudo netstat -tnlp
And that&amp;apos;s it!
If you encounter any issues or have any questions please drop us an email here.
</description>
  </item>
  
  <item>
    <title>Cassandra installation for beginners</title>
    <link>//learn.koding.com/guides/cassandra-installation-beginners</link>
    <pubDate>"2015-05-19T00:00:00.000Z"</pubDate>
    <guid isPermaLink="true">//learn.koding.com/guides/cassandra-installation-beginners</guid>
    <author>Team Koding</author>
    <description>Before you continue reading this guide why not try a more easy way, using the Koding Package Manager (kpm) and install Cassandra using just one command:
kpm install cassandra

Apache Cassandra, is a highly scalable open source database system, that can achieve great performance on multi-node setups. This guide will help install Cassandra on your Koding VM.
  Getting started Before you can start the Cassandra install process, you&amp;apos;ll need to update all of the apt-get packages:
sudo apt-get update
Make sure you have Oracle Java7 installed on your VM before you continue. You can install it using the following commands:
Add the repository:
sudo add-apt-repository -y ppa:webupd8team/java
Install the package:
sudo apt-get install -y oracle-jdk7-installer
Or you can use the KPM version by running:
kpm install oracle-java7
  Installing Installing Cassandra is fairly easy. You just need to download the binary files from the official website and unpack them:
Download the files into the temp folder:
cd ~/temp
wget http://www.us.apache.org/dist/cassandra/2.1.2/apache-cassandra-2.1.2-bin.tar.gz
Unzip them:
tar -xvzf apache-cassandra-2.1.2-bin.tar.gz
Move them into your personal folder:
mv apache-cassandra-2.1.2 ~/cassandra
The next thing you need to do is to make sure that the folders Cassandra accesses, such as the log folder, exist and that Cassandra has the rights to write on them. Use the bellow commands to achieve this:
sudo mkdir /var/lib/cassandra
sudo mkdir /var/log/cassandra
sudo chown -R $USER:$GROUP /var/lib/cassandra
sudo chown -R $USER:$GROUP /var/log/cassandra
You now need to set Cassandra&amp;#x2019;s variables by running the following commands:
export CASSANDRA_HOME=~/cassandra
export PATH=$PATH:$CASSANDRA_HOME/bin
The default per-thread stack size needs to be increased. You can do that by running:
nano ~/cassandra/conf/cassandra-env.sh
and then scroll down to the line that says:
JVM_OPTS=&amp;quot;$JVM_OPTS -Xss180k&amp;quot;
and change it to:
JVM_OPTS=&amp;quot;$JVM_OPTS -Xss280k&amp;quot;
  Running Cassandra To run Cassandra, you won&amp;apos;t need to change anything in the cassandra.yaml file. You can simply run:
sudo sh ~/cassandra/bin/cassandra
and then run:
sudo sh ~/cassandra/bin/cassandra-cli
The result of the above commands should output Connected to: &amp;apos;Test Cluster&amp;apos;. So you are now running your single-node cluster.
And that&amp;apos;s it!
If you encounter any issues or have any questions please drop us an email here.
</description>
  </item>
  
  <item>
    <title>Setting up a MeteorJS webserver</title>
    <link>//learn.koding.com/guides/setting-meteorjs-webserver</link>
    <pubDate>"2015-05-19T00:00:00.000Z"</pubDate>
    <guid isPermaLink="true">//learn.koding.com/guides/setting-meteorjs-webserver</guid>
    <author>Team Koding</author>
    <description>Before you continue reading this section why not try a more easy way, using the Koding Package Manager (kpm) and install MeteorJS using just one command:
kpm install meteor

  Getting started Before you can start the MeteorJS install process, you&amp;apos;ll need to update all of the apt-get packages:
sudo apt-get update
Then make sure you have curl installed on your VM. You can install it using the bellow command:
sudo apt-get install curl
  Installing You can install MeteorJS using the bellow command:
curl https://install.meteor.com/ | sh
  Usage Creating a new MeteorJS project is really easy. It just takes one command and you&amp;apos;re good to go:
meteor create goodbyelocalhost
You can run that project like so:
cd goodbyelocalhost
meteor
You will now be able to access the MeteorJS webserver by following a similar URL:
http://KODING_USERNAME.koding.io:3000
Find out more about your VM hostname here.
MeteorJS should listen to 0.0.0.0:3000 by default. If you can&amp;apos;t reach your project via the browser you have to make sure it listens to 0.0.0.0:3000. You can check this, using the netstat command in another terminal window and the bellow command:
sudo netstat -tnlp
And that&amp;apos;s it!
If you encounter any issues or have any questions please drop us an email here.
</description>
  </item>
  
  <item>
    <title>CakePHP Installation for Beginners</title>
    <link>//learn.koding.com/guides/cakephp-for-beginners</link>
    <pubDate>"2015-05-19T00:00:00.000Z"</pubDate>
    <guid isPermaLink="true">//learn.koding.com/guides/cakephp-for-beginners</guid>
    <author>Team Koding</author>
    <description>Before you continue reading this guide why not try a more easy way, using the Koding Package Manager (kpm) and install CakePHP using just one command:
kpm install cakephp

If you are a beginner with CakePHP than this article will help you with the install process.
  What is CakePHP? CakePHP is a popular PHP framework created with ease of use, small codebase, and MVC in mind. It&amp;apos;s also being actively developed, with two point releases in the last month alone. With a solid codebase, a supportive community, and active developers, it is a strong choice for any project. 
  Installing On the homepage of CakePHP, copy the download link for the latest version of CakePHP. In this case you&amp;apos;re going to be using CakePHP 2.4.2. 
Open your Koding Terminal and type:
cd Web
wget -O cake.zip
and then paste your download link with Ctrl-Shift-V. As an example, it should look like this: 
wget -O cake.zip https://github.com/cakephp/cakephp/zipball/2.4.2
On the left hand side, in the Koding FileTree, right click your file and choose Extract. This will extract your downloaded cake.zip into a directory cake/.
Expand that directory, and you&amp;apos;ll see a directory with a name similar to cakephp-cakephp-f53efef. 
Drag that into your Web/ directory. You can rename this directory to &amp;quot;cake&amp;quot;, or whatever you like, as this will make it easier to type in your browser. 
Finally make sure that you have Apache&amp;apos;s mod_rewrite enabled. Follow this guide to learn you can do that.
The last step is a security step enforced by CakePHP. 
Open up app/Config/core.php and look for the following two lines. 
Edit the DYhG93b0qyJfIxfs2guVoUubWwvniR2G0FgaC9mi and 76859309657453542496749683645 strings to have randomized content for your deploy. Just remember that the second string is numbers only.  
/** * A random string used in security hashing methods. */ 
Configure::write(&amp;apos;Security.salt&amp;apos;, &amp;apos;DYhG93b0qyJfIxfs2guVoUubWwvniR2G0FgaC9mi&amp;apos;);

/** * A random numeric string (digits only) used to encrypt/decrypt strings. */ 
Configure::write(&amp;apos;Security.cipherSeed&amp;apos;, &amp;apos;76859309657453542496749683645&amp;apos;);
You will now be able to access CakePHP by following a similar URL:
http://KODING_USERNAME.koding.io/cake
Find out more about your VM hostname here.
And that&amp;apos;s it!
If you encounter any issues or have any questions please drop us an email here.
</description>
  </item>
  
  <item>
    <title>Elixir on Koding</title>
    <link>//learn.koding.com/guides/elixir-on-koding</link>
    <pubDate>"2015-05-19T00:00:00.000Z"</pubDate>
    <guid isPermaLink="true">//learn.koding.com/guides/elixir-on-koding</guid>
    <author>Antoine Proulx</author>
    <description>This tutorial will show you how to install Elixir on your Koding VM and then how to update it when a new version is available.
  What is Elixir? From Elixir website:
 Elixir is a functional, meta-programming aware language built on top of the Erlang VM. It is a dynamic language that focuses on tooling to leverage Erlang&amp;apos;s abilities to build concurrent, distributed and fault-tolerant applications with hot code upgrades.
   Installation Because Elixir runs on the Erlang VM, you need to install Erlang first. At the time of this
writing, Elixir is at version 0.14.2 and it needs at least Erlang 17.
  Erlang Before you continue reading this section why not try a more easy way, using the Koding Package Manager (kpm) and install Erlang using just one command:
kpm install erlang

To install Erlang, you can use the Erlang Solutions repository.
The first thing to do is to add the repository. To do that, open the Terminal and then enter the following:
wget http://packages.erlang-solutions.com/erlang-solutions_1.0_all.deb
sudo dpkg -i erlang-solutions_1.0_all.deb

The wget command will download a package that will be used to add the
Erlang Solutions repository and the other one installs it.
You can now install Erlang by typing this in the Terminal:
sudo apt-get update
sudo apt-get install erlang

(When prompted if you want to continue, type y and then Enter.)
This will refresh the list of available packages and then install Erlang.
  Elixir Before you continue reading this section why not try a more easy way, using the Koding Package Manager (kpm) and install Elixir using just one command:
kpm install elixir

Now that you have Erlang, you can install Elixir. To do this, we&amp;apos;ll use a precompiled version and place it in ~/lang/elixir.
In the following commands, you need to replace [elixir-version] by the value of the latest version that you&amp;apos;ll find on the download page. For example, at the time of this writing, Elixir is at version 0.14.2, so you would replace [elixir-version] with 0.14.2.
mkdir -p ~/lang/elixir
wget -O elixir.zip https://github.com/elixir-lang/elixir/releases/download/v[elixir-version]/Precompiled.zip
unzip elixir.zip -d ~/lang/elixir

The last thing you need to do is to add the Elixir binaries to your PATH. Your terminal will now know where to find Elixir.
First, open up your .profile file using nano:
nano ~/.profile

Then, at the end of the file, add:
PATH=$PATH:~/lang/elixir/bin

To exit nano and save the file, type Ctrl+x, y and then Enter.
To apply the modification to the PATH immediately, type:
source ~/.profile

Elixir is now installed!
  Usage The easiest way to begin with Elixir is to use Interactive Elixir. In your terminal, type iex to start it. You can now enter Elixir expressions and see their results.
The last thing you need to do is to learn Elixir!
  Update When a new version of Erlang and/or Elixir is released, you will want to update your installation.
  Erlang Because Erlang has been installed with apt-get, the only thing you need to do is to run the following command in your Terminal:
sudo apt-get update
sudo apt-get upgrade

The first command will update the list of the available packages and the second one will download
and install the packages that have been updated in the repositories.
  Elixir Updating Elixir is not very complicated. First, you need to remove the old installation by issuing the following command in your Terminal:
rm -r ~/lang/elixir

Then, you can download the latest version of Elixir and extract the content of the archive like this (do not forget to replace [elixir-version]!):
mkdir -p ~/lang/elixir
wget -O elixir.zip https://github.com/elixir-lang/elixir/releases/download/v[elixir-version]/Precompiled.zip
unzip elixir.zip -d ~/lang/elixir

And that&amp;apos;s it!
If you encounter any issues or have any questions please drop us an email here.
</description>
  </item>
  
  <item>
    <title>Apache Tomcat on Koding</title>
    <link>//learn.koding.com/guides/apache-tomcat-on-koding</link>
    <pubDate>"2015-05-19T00:00:00.000Z"</pubDate>
    <guid isPermaLink="true">//learn.koding.com/guides/apache-tomcat-on-koding</guid>
    <author>Vinay Jain</author>
    <description>Before you continue reading this guide why not try a more easy way, using the Koding Package Manager (kpm) and install Tomcat using just one command:
kpm install tomcat

In this guide we&amp;apos;ll take a look on how to deploy Java Web Applications on Apache Tomcat Server running on your Koding Virtual Machine.
Since you are here we assume that you already know what Web Applications are and why do you need Apache Tomcat to run those applications.
 alertTomcat doesn&amp;apos;t come preinstalled with your VM, so you need do download, install and configure Tomcat manually.
 Follow the steps below to get started:
Head over to your VM Terminal, and download Apache Tomcat 7.0 using the wget command.
wget http://apache.mirrors.hoobly.com/tomcat/tomcat-7/v7.0.55/bin/apache-tomcat-7.0.55.tar.gz
If the above link doesn&amp;apos;t work, make sure you get the link from Tomcat&amp;apos;s official download page.
Extract the downloaded file by typing:
tar -xvzf apache-tomcat-7*
Rename the directory for easy access in future.
mv apache-tomcat-7.0.55 tomcat
Now we need to set role and password in tomcat-users.xml. Use the command below to edit the tomcat-user.xml file.
nano apache/conf/tomcat-users.xml
Add this line just above &amp;lt;/tomcat-users&amp;gt;
&amp;lt;user name=&amp;quot;CHOOSE A USERNAME&amp;quot; password=&amp;quot;INSERT A PASSWORD HERE&amp;quot; roles=&amp;quot;admin-gui,manager-gui&amp;quot; /&amp;gt;
 alertMake sure you replace the CHOOSE A USERNAME and INSERT A PASSWORD HERE with a desired username and password.
 Since you already have the Apache server running on your VM on port 80, you must specify another running port for Apache Tomcat. So we will edit the server.xml file now. Use the command below to open it using nano.
nano apache/conf/server.xml
Find this line
&amp;lt;Connector port=&amp;quot;8080&amp;quot; protocol=&amp;quot;HTTP/1.1&amp;quot; ....&amp;gt;
Change the port number to 8084.
Everything is setup now. It&amp;apos;s time to run Apache Tomcat. Use the bellow command to achieve this.
bash tomcat/bin/startup.sh
If you see the Tomcat Started message, you can now follow a similar url as the bellow one:
http://KODING_USERNAME.koding.io:8084
Find out more about your VM hostname here.
Click on the manager app button and enter your username and password you set in tomcat-users.xml.
Deploy the .war file of your Java app to Apache Tomcat and run it.
And that&amp;apos;s it.
If you encounter any issues or have any questions please drop us an email here
</description>
  </item>
  
  <item>
    <title>How to install pgcli</title>
    <link>//learn.koding.com/guides/installing-pgcli</link>
    <pubDate>"2015-05-19T00:00:00.000Z"</pubDate>
    <guid isPermaLink="true">//learn.koding.com/guides/installing-pgcli</guid>
    <author>Team Koding</author>
    <description>Before you continue reading this guide why not try a more easy way, using the Koding Package Manager (kpm) and install pgcli using just one command:
kpm install pgcli

Pgcli is a command line interface for Postgres with auto-completion and syntax highlighting.
  Getting started Before you can start the pgcli install process, you&amp;apos;ll need to update all of the apt-get packages:
sudo apt-get update
After that make sure you have the Python package manager or pip installed.
First check if pip is installed on the system.
which pip
If the above command returns an error, then you do not have pip installed on your VM. You can install it using this command.
sudo apt-get install python-pip
 alertMake sure you also have Python installed on your VM before you can install pip.
   Installing Pgcli uses psycopg to talk to the postgres database. In order to install psycopg, you will need libpq and python-dev installed on your VM. Use the bellow command to achieve this.
sudo apt-get install libpq-dev python-dev
Now you can go ahead and install pgcli. You can use this command.
sudo pip install pgcli
And that&amp;apos;s it!
If you encounter any issues or have any questions please drop us an email here.
</description>
  </item>
  
  <item>
    <title>Webmin for Koding</title>
    <link>//learn.koding.com/guides/webmin-for-koding</link>
    <pubDate>"2015-05-19T00:00:00.000Z"</pubDate>
    <guid isPermaLink="true">//learn.koding.com/guides/webmin-for-koding</guid>
    <author>Mike Spick</author>
    <description>Before you continue reading this guide why not try a more easy way, using the Koding Package Manager (kpm) and install Webmin using just one command:
kpm install webmin

  The Details This guide will cover the installation of Webmin on your Koding VM.
Webmin is a web-based adminstration tool for Unix based operating systems.
This tool will allow you to modify and control applications like Apache, and view/modify your MySQL DBs. Webmin also allows you to modify other system tools
from the web like users, passwords, iptables, log file rotations and more!
If you&amp;apos;d like to read more about Webmin, you can check out their website here.
  Downloading and installing Webmin Alright, first thing&amp;apos;s first, we want to add the webmin team&amp;apos;s repo to our apt sources. Run the following command to open apt&amp;apos;s source list for editing.
sudo vi /etc/apt/sources.list
Press i to enter the vi input mode to edit the list. Add the following to the bottom of the file.
deb http://download.webmin.com/download/repository sarge contrib
It should look like below when you are done.

After adding this line press ESC to exit input mode. Then type :wq to write(save) and quit the file.
Now that apt has the source, lets run the following command to download and install the key needed for Webmin.
wget -q http://www.webmin.com/jcameron-key.asc -O- | sudo apt-key add -
We can now update apt, and install Webmin. You can use the following commands.
sudo apt-get update

sudo apt-get install webmin
You will be prompted if you want to continue, press Y to accept.
Once the install is complete, you will see the following as the final output:

Make note of the url given here as you will need it to access Webmin once it is setup.
  Configuration Congratulations! Webmin is now installed on your Koding VM. We only have a few things left to do before it is useable. We need to change the SSL setting in the miniserv config file from 1 to 0. Enter the following command to open the config file for editing.
sudo vim /etc/webmin/miniserv.conf
Once the file is open press i to enter input mode. Use the arrow keys to navigate to the line SSL=1 change this line to read SSL=0. Again, hit ESC and type :wq to write(save) and quit the file.
The file should look like below before editing.

In order to apply the changes we have made to the configuration, we will need to restart the webmin service. To do that enter the following command.
sudo service webmin restart
And that&amp;apos;s it!
If you encounter any issues or have any questions please drop us an email here.
</description>
  </item>
  
  <item>
    <title>Understanding Snapshots</title>
    <link>//learn.koding.com/guides/vm-snapshot</link>
    <pubDate>"2015-05-19T00:00:00.000Z"</pubDate>
    <guid isPermaLink="true">//learn.koding.com/guides/vm-snapshot</guid>
    <author>Team Koding</author>
    <description>  What are Snapshots? Koding&amp;apos;s Snapshot feature gives you the ability to save a point-in-time image of your virtual machine. When you make a snapshot,
the system will make a copy of the VM so that you can use it:

as a restorable backup
as a starting point for new VMs that you can create.

  How can I make a snapshot? To create a snapshot, follow these easy steps:

Head over to VM Settings modal, click on 
the &amp;quot;Snapshots&amp;quot; tab as shown below and then click the &amp;quot;Add New Snapshot&amp;quot; button.


Give your new snapshot a name and then click on &amp;quot;Add Snapshot&amp;quot;.


The snapshot will begin to build. 
 tipIt can take anywhere between 2 to 5 minutes (depending on the size of your VM) to create the snapshot.
 
Once it is done creating, the snapshot will be listed and you can take additional actions on it (as shown
in the image below).



  How do I delete a snapshot? To delete a snapshot, hover over the name of the snapshot with your mouse to reveal the snapshot
action button and from the available option, select the delete option.
  How many snapshots can I create? The snapshot feature is only available to users with a paid plan. If you have a paid plan, the
snapshot limits are as follows:

Hobbyist plan: 1 snapshot
Developer plan: 3 snapshots
Professional plan: 5 snapshots

 tipFree accounts cannot create snapshots (for now).
   How do I use a snapshot to create a new VM? You can use a snapshot as the creation point for a new VM. This is helpful if you have done the work
to install the relevant software that you use and have a snapshot that is ready to be used.
To create a new VM using a snapshot, simply add a new VM (if your plan allows) and use an existing
snapshot as the starting point (as shown in the image below).

</description>
  </item>
  
  <item>
    <title>VNC Startup Guide</title>
    <link>//learn.koding.com/guides/vnc-startup-guide</link>
    <pubDate>"2015-05-19T00:00:00.000Z"</pubDate>
    <guid isPermaLink="true">//learn.koding.com/guides/vnc-startup-guide</guid>
    <author>Kaitlyn Schmidt</author>
    <description>or How to Develop and Run Client GUI Applications with Koding and noVNC
The Koding environment and tool base is a great way to code within the cloud.  No longer are we tied down to software running on our individual computers.  Coding, testing, and running web based applications within Koding is a snap as other tutorials will attest to, but what if you are trying to use Koding to develop a traditional client based GUI application?  How can we code and test those types of applications in the cloud?  Is it even possible? The answer of course, is YES!  We can develop our applications in Koding AND test them in the cloud, all from the comfort our our browser.
In the following tutorial I will demonstrate how to set up your Koding VM to allow you to test and run a client GUI application.  In the end we are going to accomplish the following goals:

Install Tkinter for Python.
Write a simple Python GUI application to run.
Download, install, and Start a TightVNC Server.
Download, install, and start WebSockify.
Connect to your Koding VM via noVNC.
Test our sample GUI application.

  Install Tkinter for Python Go to your Koding Terminal
Within the terminal type the following command:
sudo apt-get install python-tk
 alertThe terminal will ask you for your password before it installs Tkinter.  Be ready to type in your password.
 This process downloads and installs Tkinter into your VM.
  Write a Simple Python GUI Application Using your favorite Koding text editor, the built in Koding Editor or VI, create a new file called &amp;quot;test.py&amp;quot; in your &amp;quot;Documents&amp;quot; folder. Our example will use VI.
Go to your Koding Terminal.
Create a &amp;quot;Documents&amp;quot; folder under your home directory, if one does not already exist.
mkdir home/YOUR_USER_NAME/Documents
Create a &amp;quot;test.py&amp;quot; file in your Documents Folder using the bellow command. It will open up Vim so you can edit the file.
vi /home/YOUR_USER_NAME/Documents/test.py
File Contents will be two lines.  Paste the following lines into VI or Ace.
import Tkinter
Tkinter._test();
To save the file in Vim, hit the &amp;quot;Escape&amp;quot; key to put Vim into command mode, then type:
:wq
You have now created and saved a very simple python GUI application.
  Download, install, and Start a TightVNC Server Before you continue reading this section why not try a more easy way, using the Koding Package Manager (kpm) and install TightVNC using just one command:
kpm install vnc

Go to your Koding Terminal
Type the following into your terminal
sudo apt-get install tightvncserver
 alertThe terminal will ask you for your password before it installs TightVNC.  Be ready to type in your password.
 This process downloads and installs TightVNC into your VM.
To start your TightVNC server type the following command into your terminal.
vncserver :1
  Download, Install, and Start WebSockify Before you continue reading this section why not try a more easy way, using the Koding Package Manager (kpm) and install noVNC using just one command:
kpm install novnc

Go to your Koding Terminal
Ensure you are in your home directory.
cd /home/YOUR_USER_NAME/
From your terminal type the following.
git clone git://github.com/kanaka/noVNC
This will create a new folder in your home directory called noVNC.  Everything you need to run noVNC is contained in here.
Next we need to ensure our settings for noVNC are correct.
In either the built in Koding Editor or your Koding Terminal , open up your xstartup file.
more /home/YOUR_USER_NAME/.vnc/xstartup
Your xstartup should look like the following:
#!/bin/sh

xrdb $HOME/.Xresources
xsetroot -solid grey
x-terminal-emulator -geometry 80x24+10+10 -ls -title &amp;quot;$VNCDESKTOP Desktop&amp;quot; &amp;amp;
x-window-manager &amp;amp;
# Fix to make GNOME work
export XKL_XMODMAP_DISABLE=1
/etc/X11/Xsession
If your xstartup file does not look like this, use your editor (Vim or the built in Koding Editor) to modify and save the file to make it look like the example above.
Next thing to check is our launch.sh file.
more /home/YOUR_USER_NAME/noVNC/utils/launch.sh
Your launch.sh should look like the following:
#!/usr/bin/env bash

usage() {
    if [ &amp;quot;$*&amp;quot; ]; then
        echo &amp;quot;$*&amp;quot;
        echo
    fi
    echo &amp;quot;Usage: ${NAME} [--listen PORT] [--vnc VNC_HOST:PORT] [--cert CERT]&amp;quot;
    echo
    echo &amp;quot;Starts the WebSockets proxy and a mini-webserver and &amp;quot;
    echo &amp;quot;provides a cut-and-paste URL to go to.&amp;quot;
    echo
    echo &amp;quot;    --listen PORT         Port for proxy/webserver to listen on&amp;quot;
    echo &amp;quot;                          Default: 6080&amp;quot;
    echo &amp;quot;    --vnc VNC_HOST:PORT   VNC server host:port proxy target&amp;quot;
    echo &amp;quot;                          Default: localhost:5900&amp;quot;
    echo &amp;quot;    --cert CERT           Path to combined cert/key file&amp;quot;
    echo &amp;quot;                          Default: self.pem&amp;quot;
    echo &amp;quot;    --web WEB             Path to web files (e.g. vnc.html)&amp;quot;
    echo &amp;quot;                          Default: ./&amp;quot;
    exit 2
}

NAME=&amp;quot;$(basename $0)&amp;quot;
HERE=&amp;quot;$(cd &amp;quot;$(dirname &amp;quot;$0&amp;quot;)&amp;quot; &amp;amp;&amp;amp; pwd)&amp;quot;
PORT=&amp;quot;8787&amp;quot;
VNC_DEST=&amp;quot;localhost:5901&amp;quot;
CERT=&amp;quot;&amp;quot;
WEB=&amp;quot;&amp;quot;
proxy_pid=&amp;quot;&amp;quot;
Pay particular attention to the PORT and VNC_DEST variables.
If your launch.sh file does not look like this, use your editor (Vim or the built in Koding Editor) to modify and save the file to make it look like the example above.
Using your Koding Terminal, type the following to start WebSockify from the noVNC folder:
/home/YOUR_USER_NAME/noVNC/utils/launch.sh
  Connect to your VNC Server Connecting to your VNC Server from the cloud is fairly easy with noVNC.
Within your browser navigate to
http://YOUR_ASSIGNED_URL:8787/vnc.html?host=YOUR_ASSIGNED_URL&amp;amp;port=8787
YOUR_ASSIGNED_URL can be found by looking up the URL for your VM.  It should be of the form 12_OR_SO_CHARACTERS.YOUR_USER_NAME.koding.io
Within the top righthand corner there will be a monitor looking icon.  When you hover over this button the tool-tip will say &amp;quot;Connect&amp;quot;.

Click on this button and fill out the resulting form.
Host: YOUR_ASSIGNED_URL
Port: 8787
Password: YOUR VNC PASSWORD
If this doesn&amp;apos;t work, and the noVNC setup asked you to define a password, use it here.  The noVNC password will be 8 characters or less.

Hit the &amp;quot;Connect&amp;quot; button.
You are now connected to your Koding VM within a VNC connection! You should see a terminal on your screen that you can use to control your VM.

  Test Our Sample GUI Application Connect to your VNC Server via the above instructions.
Use the terminal shown in noVNC for the following steps.
DO NOT RUN THESE STEPS IN THE KODING TERMINAL!
At the command line within noVNC, type the following command:
python /home/YOUR_USER_NAME/Documemnts/test.py
This will start up our sample GUI application. You should see a pop up with two buttons: &amp;quot;Click ME&amp;quot; and &amp;quot;Quit&amp;quot;

  Conclusion Congratulations!  If you&amp;apos;ve made it this far, you should have a successful setup.  Running other GUI programs that you develop is a easy as calling them from the command line in noVNC.
If you encounter any issues or have any questions please drop us an email here.
</description>
  </item>
  
  <item>
    <title>Using Github with Koding</title>
    <link>//learn.koding.com/guides/using-github</link>
    <pubDate>"2015-05-19T00:00:00.000Z"</pubDate>
    <guid isPermaLink="true">//learn.koding.com/guides/using-github</guid>
    <author>Team Koding</author>
    <description>This guide will cover the basics on how to get started with Github on you Koding VM using Ungit.
  What is Ungit? Ungit is a web based interface for Github made by Fredrik Noren that runs on any platform. It has a clean and intuitive UI that makes it easy to understand git. It runs on any platform that node.js &amp;amp; git supports and it works well with GitHub.
  Getting started Before we begin please make sure you have the Koding Package Manager (KPM) installed on your VM. Follow this guide to understand what KPM is and how to install it so you will be able to continue with this guide.
  Setup  tipgit is installed by default with every Koding VM. So you will be able to get started right away.
 Before you can get started with Github on your Koding VM you need to first setup the environment to be able to work properly with Github.
You&amp;apos;ll need to generate an SSH key that will be used to authenticate with Github. You can use the following command to generate one:
ssh-keygen -t rsa -C &amp;quot;your_email@example.com&amp;quot;
After that you&amp;apos;ll need to copy your Public Key, usually found in ~/.ssh/id_rsa.pub, and copy it in its entirety. Note the .pub in the filename. This is the public key, and it is very important that you copy this one. It will look something like this.
ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCyhKankDE4DRM86JqZ3JPdWDeqg+Tbzlql
TLfOKTeokhRoMgy5WoMY/ZWUVES3d2vSHHwW3cwWlELmVdc3Ow57boZv3fOsPhybYHVRTClX
Yr1ncSxyTvjvCfvV5q22aIxHPWQ353543ssda87sa+85XEa4VnveJsEzxBZl4oJ4GB0AGa48
+UdIqutrgZu7D7JCK+Yl228X+3bJf3ddlqDaKaVXPivvvYqImK6ZwFsxh2lNO4E8IOd3OSK9
zv6i+io8PxWmwP0tLFokxulAI8Td1sOPBE9s9bdJ5c2T/GfGjKF+aNKsd33TsYEjjc/plMZm
RRrOgQwre6OAkgMvyV2X your_email@example.com
Head over to this page on Github and add the SSH key, that you just generated.
After that run the following command, in your Koding Terminal, to install the necessary dependency:
kpm install ungit
This will install a visually friendly interface for Github, where you will be able to interact with Github and your Koding VM. Think of it as a bridge between Koding and Github.
After the installation process has finished you will need to start the Github interface using the following command:
ungit
When the process has finished you should see a link outputted in the Terminal similar to this one:
your_koding_username.koding.io:8448
Copy that link and open it in a separate browser window. You should see something like this:

  Basic interaction In the top area of the screen, in the input box you will be able to input the path to a local existing repository on your Koding VM or start with a fresh empty one.
 alertPlease note that the input field has autocomplete
 Start with a basic path like this one. Just make sure that folder exists before you input the path. If that folder doesn&amp;#x2019;t exist then you will be able to create it using this interface.
/home/your_koding_username/Web/demo
After that hit Enter || Return
You should see something like this:

Now, you can either transform that folder into a git repository or clone a repository in a subfolder in that folder.
Let&amp;#x2019;s transform this folder into a git repository. After transformation is complete just hit the little + sign at the top next to path, in order to see repository on the main view of the interface.
Before we continue, please make sure you have a Github repository ready in your Github account. Now you have to link that repository to your local Koding one using the Add new remote modal.

Copy the URL from your Github repository in this modal window and hit Submit.
Now head over to the Koding IDE and start adding code to your newly created repository. After you finished with your changes, you should already see you changes in the Ungit interface, just ready to be committed to your Github repository.
After you have named your commit, hit the commit button.
Now you can push your changes to the desired branch in your Github repository. Click on the name of the branch and then on the Push button.

You will be required to input your Github username and password before you can push your changes.

Input them, so you can continue with pushing your changes. After that you should see a successful commit of your changes.
Cloning an existing repository is a really straightforward process.
In order to clone a repository we need to have a location where we want to store our cloned repository.
Following the first step from above, in the input field at the top of Ungit select your desired path. For eg.
/home/your_koding_username/Web
Now you can clone any desired repository in this folder using this form:

Just copy the repository URL from Github, in the input field and then hit Clone repository.
Wait for the cloning process to finish and now you should see all the commit history and you are now able to work on that repository, perform commits, push changes, using the Koding IDE.
 alertWhenever you turn on Koding VM you will have to run the ungit command to get this interface started.
 If you encounter any issues or have any questions please drop us an email here.
</description>
  </item>
  
  <item>
    <title>Octopress Installation for Beginners</title>
    <link>//learn.koding.com/guides/octopress-for-beginners</link>
    <pubDate>"2015-05-19T00:00:00.000Z"</pubDate>
    <guid isPermaLink="true">//learn.koding.com/guides/octopress-for-beginners</guid>
    <author>Team Koding</author>
    <description>Before you continue reading this guide why not try a more easy way, using the Koding Package Manager (kpm) and install Octopress using just one command:
kpm install octopress

In this guide we&amp;apos;ll go over the basics of setting up Octopress.
  What is Octopress? Octopress is a framework built on top of Jekyll, a static site generator. Think of it like easier, friendlier, more powerful Jekyll.
Static site generators get a fair amount of buzz these days, for good reason. They&amp;apos;re simple to maintain, easy to contribute to, and store content in a user friendly manner. The compilation process can sometimes be complex, but at the end of the day your content is understandable by all, and your site has no dependencies to run. No databases to manage, no real points of failure, it&amp;apos;s static.
  Octopress and Koding The only downside to static site generators is publishing the content often requires a local machine of some sort. Non-static sites have the ability to take your input from the browser and save it somewhere such as your Disk or a Database. This complexity allows you to do all of this from your browser, and static sites suffer in this regard.
With Koding this is not the issue. Koding enables the &amp;quot;local machine&amp;quot; entirely in your browser. No local tools needed, no local installs needed, no localhost hassle. Lets go over the process of installing Octopress, on Koding!
  Tutorial Steps First, we want to get a hold of the Octopress code base. Open your Terminal and run the following two commands to clone Octopress, and navigate into the directory.
git clone git://github.com/imathis/octopress.git octopress
cd octopress
Next, we need to install some dependencies for Octopress. Run the following commands, which will install Bundle, then use Bundle to install the Octopress dependencies. Lastly, we use rake to set up some directories and initialize our project.
sudo gem install bundle
bundle install
rake install
That&amp;apos;s it for Octopress! But how do we view it? To view it, we need to compile the html and expose that to Apache (our web server). To do this, run the following commands which will generate the html, then symlink our compiled directory as our main Web directory.
rake generate
mv ~/Web ~/Web.bkp
ln -s ~/octopress/public ~/Web
You will now be able to access the Octopress by following a similar URL:
http://KODING_USERNAME.koding.io
Find out more about your VM hostname here.
And that&amp;apos;s it!
If you encounter any issues or have any questions please drop us an email here.
</description>
  </item>
  
  <item>
    <title>Setting up WebDav on Koding</title>
    <link>//learn.koding.com/guides/setting-up-webdav-on-koding</link>
    <pubDate>"2015-05-19T00:00:00.000Z"</pubDate>
    <guid isPermaLink="true">//learn.koding.com/guides/setting-up-webdav-on-koding</guid>
    <author>Team Koding</author>
    <description>This tutorial will cover the basics on how to set up WebDav on Koding and then connect to it using a Mac, Windows or Ubuntu machine. We already know how to set up FTP and SSH, but what about WebDav? Just follow the steps below.
  Steps The first step is to open up the Terminal app and type the following commands.
sudo a2enmod dav
sudo a2enmod dav_fs
sudo nano /etc/apache2/sites-enabled/000-default
When the file opens from the last command, we just paste in this configuration and save it.
Alias /webdav1 /var/www/WebDAV1
&amp;lt;Directory /var/www/WebDAV1/&amp;gt;
 Options Indexes MultiViews
 AllowOverride None
 Order allow,deny
 allow from all
 &amp;lt;/Directory&amp;gt;
&amp;lt;Location /webdav1&amp;gt;
 DAV On
 AuthType Basic
 AuthName &amp;quot;webdav1&amp;quot;
 AuthUserFile /etc/apache2/webdav.password
 Require valid-user
&amp;lt;/Location&amp;gt;
The third step is to create the folder that will be used to store the files. You can do this by entering these commands:
cd ~/Web
mkdir WebDAV1
chown -R www-data.www-data WebDAV1
The last step is to set up a password, of your choosing, and after that to restart the Apache server. You can do this by entering the commands below, where is your Koding username.
sudo htpasswd -c /etc/apache2/webdav.password &amp;lt;USERNAME&amp;gt;
sudo service apache2 reload
Just remember to restart the Apache server so that all the settings that
we made so far are remembered, and you&amp;apos;re good to go. Now, what about
connecting to it? Sure. It&amp;apos;s super simple stuff. We can check if our
WebDAV works by heading over to
http://..koding.io/webdav1 and then when the box
pops up we just enter our username and the password we set up earlier.For local connection you can follow these steps.
  On Mac OS The Apple support website offers the quickest solution to our problem. Just follow the guide located here.
  On Windows OS On a Windows machine we need NetDrive. You can download it by clicking this
link. After we install
and open it, we need to add a New Site.  The
settings are as followed:

Site Name: Koding
Site IP or URL: http://..koding.io/webdav1
Server Type: WebDav
Drive: 
Account: 
Password: 
We then hit connect and it should work.

  On Ubuntu On Ubuntu we can quickly test and use our newly created WebDav by using just the command line. First we need to install cadaver. Cadaver is a command line WebDav client.
sudo apt-get install cadaver
After that we connect to our WebDav like this
cadaver http://&amp;lt;hostname&amp;gt;.&amp;lt;username&amp;gt;.koding.io/webdav1/
After the connection is established we enter our username and password and we&amp;apos;re good to go.
cadaver http://&amp;lt;hostname&amp;gt;.&amp;lt;username&amp;gt;.koding.io/webdav1
Authentication required for test on server
`http://&amp;lt;hostname&amp;gt;.&amp;lt;username&amp;gt;.koding.io/webdav1`:
Username: &amp;lt;username&amp;gt;
Password: *******
dav:/webdav1/&amp;gt; quit
Connection to `http://&amp;lt;hostname&amp;gt;.&amp;lt;username&amp;gt;.koding.io/webdav1`
closed.
That is all. If you have any issues setting up WebDav you can drop us an email at support@koding.com
</description>
  </item>
  
  <item>
    <title>Using mySQL</title>
    <link>//learn.koding.com/guides/using-mysql</link>
    <pubDate>"2015-05-19T00:00:00.000Z"</pubDate>
    <guid isPermaLink="true">//learn.koding.com/guides/using-mysql</guid>
    <author>Alvin Wan</author>
    <description>mySQL offers a popular implementation of the SQL language. This guide will get you started on using mySQL on Koding.
First make sure you have mySQL installed. Have a look at this guide to learn how to install it.
Are you using PostgreSQL? Have a look at this guide.
  Starting mySQL Let&amp;apos;s start the mySQL server using the following command:
sudo service mysql start
  Getting Started First, you&amp;apos;ll need to login using th root user that was configured during the mySQL installation. Open your Terminal and type in the following:
mysql -u root -p
Enter your password, and hit enter. You&amp;apos;re now logged in.
  Creating a User You&amp;apos;ll now create a new account for our code, with the username &amp;quot;bob&amp;quot; and password &amp;quot;pass&amp;quot;.
create user &amp;apos;bob&amp;apos;@&amp;apos;localhost&amp;apos; identified by &amp;apos;pass&amp;apos;;
If you see an arrow
-&amp;gt;
that means you forgot the end semicolon &amp;quot;;&amp;quot;. Enter that and hit enter.
You can exit the server by using Ctrl+D and then login again as Bob:
mysql -u bob -p;
After entering the password, you&amp;apos;ll be readmitted into the mySQL server. To continue with this guide, you&amp;apos;ll need to be logged in as root.
  Creating a Database Each mySQL server includes a variety of databases. The initial installation comes with several. You can view them by typing:
show databases;
You should see a short list of databases:
+--------------------+
| Database           |
+--------------------+
| information_schema |
| mysql              |
| performance_schema |
+--------------------+
3 rows in set (0.00 sec)
Let&amp;apos;s create your first database:
create database test;
  Linking Users and Databases You&amp;apos;ll need to grant privileges to the user, so that &amp;quot;Bob&amp;quot; can access the database &amp;quot;test&amp;quot; and modify it accordingly.
To grant &amp;quot;Bob&amp;quot; all privileges on all tables in database &amp;quot;test&amp;quot;:
grant all on test.* to &amp;apos;bob&amp;apos;@&amp;apos;localhost&amp;apos;;
  Using the Database Exit out of root by using Ctrl+D, and login as &amp;quot;Bob&amp;quot;. To connect to a database, prefix the database name with &amp;quot;use&amp;quot;.
use test;
Once here, you&amp;#x2019;ll be able to execute mySQL commands. 
And that&amp;apos;s it!
If you encounter any issues or have any questions please drop us an email here.
</description>
  </item>
  
  <item>
    <title>Setting up a Tornado webserver</title>
    <link>//learn.koding.com/guides/setting-tornado-webserver</link>
    <pubDate>"2015-05-19T00:00:00.000Z"</pubDate>
    <guid isPermaLink="true">//learn.koding.com/guides/setting-tornado-webserver</guid>
    <author>Team Koding</author>
    <description>  Getting started Before you can start the Tornado install process, you&amp;apos;ll need to update all of the apt-get packages:
sudo apt-get update
Then make sure you have pip installed on your VM. You can install it using the Koding Package Manager (kpm) like so:
kpm install pip
  Installing You can install Tornado using the bellow command:
pip install tornado
  Usage To test if you can run a Tornado webserver correctly, create a goodbyetolocalhost.py file. Then insert the bellow code snippet:
import tornado.ioloop
import tornado.web

class MainHandler(tornado.web.RequestHandler):
    def get(self):
        self.write(&amp;quot;Hello, world&amp;quot;)

application = tornado.web.Application([
    (r&amp;quot;/&amp;quot;, MainHandler),
])

if __name__ == &amp;quot;__main__&amp;quot;:
    application.listen(8888, &amp;apos;0.0.0.0&amp;apos;)
    tornado.ioloop.IOLoop.instance().start()
You can run that script like so:
python goodbyetolocalhost.py
You will now be able to access the Tornado webserver by following a similar URL:
http://KODING_USERNAME.koding.io:8888
Find out more about your VM hostname here.
If you can&amp;apos;t reach your project via the browser you have to make sure it listens to 0.0.0.0:8888. You can check this, using the netstat command in another terminal window and the bellow command:
sudo netstat -tnlp
And that&amp;apos;s it!
If you encounter any issues or have any questions please drop us an email here.
</description>
  </item>
  
  <item>
    <title>Hello World on Koding: C</title>
    <link>//learn.koding.com/guides/hello-world/c</link>
    <pubDate>"2015-05-11T00:00:00.000Z"</pubDate>
    <guid isPermaLink="true">//learn.koding.com/guides/hello-world/c</guid>
    <author>Team Koding</author>
    <description>  Introduction C is a general-purpose, imperative computer programming language. As a language it supports structured programming, lexical variable scope and recursion, also having a static type system that prevents unintended operations is a major advantage.
  Implementation The first thing you need to do is to create a file called helloworld.c in your Koding VM and paste the below snippet into it.
#include&amp;lt;stdio.h&amp;gt;

int main() {
    printf(&amp;quot;Hello World&amp;quot;);
    return 0;
}
To run the above file in your Koding VM, just open your Koding Terminal and type the following commands:
gcc -o hello helloworld.c
./hello
  Explanation #include&amp;lt;stdio.h&amp;gt;
This line will include a file called stdio.h that represents the standard Input/Output header file. This file allow you to use certain commands for input or output which you can use in you program.
int main()
The int is what is called the return value (in this case of the type integer). Every C program must have a main() function since this is the starting point.
{}
The two curly brackets, one in the beginning and one at the end, are used to group all commands together, they are used to mark the beginning and end of a
group or function.
printf(&amp;quot;Hello World&amp;quot;);
The printf is used for printing things on the screen, in this case the words: Hello World. As you can see the data that is to be printed is put inside round brackets. The words Hello World are inside inverted commas, because they are what is called a string (a single letter is called a character and a series of characters is called a string). Strings must always be put between inverted commas. After the last round bracket there must be a semi-colon. The semi-colon shows that it is the end of the command.
return 0;
When you wrote the first line int main(),  you declared that main must return an integer int main(). With return 0; you can return the value null to the operating system. When you return with a zero you tell the operating system that there were no errors while running the program.
And that&amp;apos;s it!
You just wrote and ran your first Hello World in C.
</description>
  </item>
  
  <item>
    <title>Making your VM secure using Ubuntu UFW (Uncomplicated Firewall)</title>
    <link>//learn.koding.com/guides/enable-ufw</link>
    <pubDate>"2015-05-11T00:00:00.000Z"</pubDate>
    <guid isPermaLink="true">//learn.koding.com/guides/enable-ufw</guid>
    <author>Team Koding</author>
    <description> alertYou should follow the steps in this guide to its entirety otherwise if you enable the firewall and don&amp;apos;t finish
adding key services like ssh, you may be locked out of your VM. Please proceed with caution.
 From time to time, a need may arise when you need to secure your Koding VM from prying eyes. There are several solutions
available when it comes to enabling a firewall on Ubuntu (the operating system that runs on a Koding VM) and you are free
to try any/all of those. For the purposes of this guide, we will focus on the ufw firewall software that is already
installed by default on all Koding VMs.
UFW stands for &amp;quot;Uncomplicated Firewall&amp;quot; and is essentially a wrapper around the more complicated iptables firewall. It
was built to provide an easy interface that is more usable for most users as compared to the more complicated interface that
comes with iptables.
  Checking the state of ufw on your VM ufw should be pre-installed on your VM and you can easily check that by typing the following command in Terminal:
sudo ufw status
you should see the following result (in most cases):
Status: inactive
If for some reason, ufw is not installed on your VM, you can easily install it by using the following command:
sudo apt-get install ufw
To view a list of the current active rules, use the following command:
sudo ufw status verbose
you may see something like:
Status: active
Logging: on (low)
Default: deny (incoming), allow (outgoing)
New profiles: skip
  Enable ufw Type in this command to turn on the firewall
sudo ufw enable
Please follow the steps in the next section immediately as by default every incoming connection is denied and
if we don&amp;apos;t add some specific rules quickly, you may get locked out of your own VM... yikes!
  Adding rules to ensure that your Koding VM works just fine even with ufw enabled. Since you are using Koding via a browser, there are services running on your VM that the Koding application
needs to talk to. When you enable the firewall, you essentially are cutting off access to these services so
it is VERY IMPORTANT that you enable the services below as soon as you turn on the firewall.
Type in this command to enable ssh access through the firewall
sudo ufw allow ssh
Now, enable ports needed for Koding
sudo ufw allow http
and then add a rule for a specific port that Koding requires
sudo ufw allow 56789/tcp
 alertIf you do not open up the ports mentioned above, then you will be locked out of your VM and will need to send us a support request to have it fixed.
   Allowing access to specific standard services. ufw already knows what to do for standard services like ftp, http, ssh, telnet, etc. so if you want to enable
any of these services, simply type in:
sudo ufw enable ftp
similarly, do deny a standard service, do:
sudo ufw deny ftp
  Adding rules for specific ports Sometimes, you may have a non-standard port that you want to allow access to, you can achieve that by typing in:
sudo ufw allow 2290:2300/tcp
where 2290:2300 represents the port range you want to allow access to. Please note that you will need to replace
tcp with udp if you wish to allow access to both tcp and udp ports within that range.
  Adding a specific IP address As you saw, you can add rules for specific ports and so similarly, you can also add rules for specific IP addresses.
sudo ufw allow from 192.168.0.0
you can also combine ports and IP addresses to create specific rules:
sudo ufw allow from 192.168.0.101 proto tcp to any port 22
Syntax to create deny rule is similar with allow rule. You only need to change parameter from allow to deny.
  Deleting a rule First, get a numbered list of all rules:
sudo ufw status numbered
You may see something like:
Status: active

     To                         Action      From
     --                         ------      ----
[ 1] 22                         ALLOW IN    Anywhere
[ 2] 80                         ALLOW IN    Anywhere
[ 3] 56789/tcp                  ALLOW IN    Anywhere
[ 4] 22 (v6)                    ALLOW IN    Anywhere (v6)
[ 5] 80 (v6)                    ALLOW IN    Anywhere (v6)
[ 6] 56789/tcp (v6)             ALLOW IN    Anywhere (v6)
Now, simply use the number next to the rule you wish to delete and replace it in the command below:
sudo ufw delete 4
  Resetting back to original state This is helpful when you want to delete/reset all rules.
sudo ufw reset
you will get a confirmation:
Resetting all rules to installed defaults. Proceed with operation (y|n)? y
When you hit &amp;quot;y&amp;quot; ufw will backup all existing rules before doing the reset. Resetting the rules will also disable your firewall.
  Help, I locked myself out of my VM If for some reason you enabled your firewall and did not take the steps needed to open up the ports needed for Koding to work, then
your only recourse is to reinit your VM. That process is described in this guide. If you
encounter any issues or have any questions please drop us an email here.
</description>
  </item>
  
  <item>
    <title>Building C / C++ applications with biicode</title>
    <link>//learn.koding.com/guides/getting-started-biicode</link>
    <pubDate>"2015-05-04T00:00:00.000Z"</pubDate>
    <guid isPermaLink="true">//learn.koding.com/guides/getting-started-biicode</guid>
    <author>drodri</author>
    <description>Building larger applications can be somewhat difficult and cumbersome to the newbie.
As soon as your application start to have several files, you will need to define
how to build them in Makefiles or using the CMake build system.
We will be using in the following examples biicode, which is a dependency manager
that allows to easily retrieve existing code and also manages to automatically generate
build files for your project.
  Install biicode You can install it running from your terminal:
$ wget http://apt.biicode.com/install.sh &amp;amp;&amp;amp; chmod +x install.sh &amp;amp;&amp;amp; ./install.sh
After it finishes, you can run a helper command that install an updated version of CMake:
$ bii setup:cpp
  Build you application Lets build an application that computes the SHA1 of a string. Usually you don&amp;apos;t want to write
yourself such algorithm, but rather use an existing implementation.
  Create a project Create a simple project:
$ bii init mycppcrypto -L
$ cd my_cpp_project
Now you are inside a new block called &amp;quot;mycppcrypto&amp;quot;. Let&amp;apos;s place some code in!
Create a new main.cpp file and place the code below:
#include &amp;quot;cryptopp/cryptopp/sha.h&amp;quot;
#include &amp;quot;cryptopp/cryptopp/filters.h&amp;quot;
#include &amp;quot;cryptopp/cryptopp/hex.h&amp;quot;
#include &amp;lt;iostream&amp;gt;
#include &amp;lt;string&amp;gt;

int main() {
    CryptoPP::SHA1 sha1;
    std::string source = &amp;quot;Hello&amp;quot;;
    std::string hash = &amp;quot;&amp;quot;;
    CryptoPP::StringSource(source, true, new CryptoPP::HashFilter(sha1,
                            new CryptoPP::HexEncoder(new CryptoPP::StringSink(hash))));
    std::cout &amp;lt;&amp;lt; hash &amp;lt;&amp;lt; std::endl;
}
  Manage your dependencies If you now try to build this example, it will fail. You can try to do so, and then check
your dependencies with bii deps:
$ bii build
$ ... #ERROR
$ bii deps
  user/mycppcrypto depends on:
       system:
          iostream
          string
       unresolved:
          cryptopp/cryptopp/filters.h
          cryptopp/cryptopp/hex.h
          cryptopp/cryptopp/sha.h
The code depends on some external code, the Crypto++ library. With bii find command biicode will easily retrieve dependencies:
$ bii find
...
INFO: All dependencies resolved
Find resolved new dependencies:
        cryptopp/cryptopp: 8
INFO: Saving files from: cryptopp/cryptopp
  Build the project Now you can build and run it:
$ bii build
$ ./bin/myuser_crypto_main
F7FF9E8B7BB2E09B70935A5D785E0CC5D9D0ABF0
That is the encryption code for the &amp;quot;hello&amp;quot; string!
For further examples, you can have a look to the biicode C/C++ documentation and the
examples.
Got any doubts using biicode in your projects? Do not hesitate to contact us or visit our forum. We&amp;apos;re available at Stackoverflow tag too.
</description>
  </item>
  
  <item>
    <title>Emmet support in the Koding IDE/Editor</title>
    <link>//learn.koding.com/guides/emmet</link>
    <pubDate>"2015-05-04T00:00:00.000Z"</pubDate>
    <guid isPermaLink="true">//learn.koding.com/guides/emmet</guid>
    <author>Team Koding</author>
    <description>  What is Emmet? Emmet (formerly Zen Coding) is a web-developer&amp;#x2019;s toolkit that can greatly improve HTML &amp;amp; CSS workflow.
Using Emmet, you can type CSS-like expression that dynamically expand to produce valid HTML/CSS syntax thereby
saving you tons of typing time.
  How do I use Emmet? Follow these steps to get a quick taste of Emmet:

Make sure Emmet support is turned on in the Editor/IDE settings
Open up a new file in the Koding Editor/IDE
Save the file as a .html file by pressing Cmd+s or Ctrl+s
In the first line of the file, type in:html&amp;gt;head&amp;gt;title&amp;gt;body
and hit the tab key. Your abbreviated emmet syntax should automatically expand into:&amp;lt;head&amp;gt;
 &amp;lt;body&amp;gt;
     &amp;lt;head&amp;gt;
         &amp;lt;title&amp;gt;
         &amp;lt;/title&amp;gt;
     &amp;lt;/head&amp;gt;
 &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;

...that was easy!

You can also do crazy things like:
ul#nav&amp;gt;li.item$*4&amp;gt;a{Item $}
which then expands into:
&amp;lt;ul id=&amp;quot;nav&amp;quot;&amp;gt;
    &amp;lt;li class=&amp;quot;item1&amp;quot;&amp;gt;&amp;lt;a href=&amp;quot;&amp;quot;&amp;gt;Item 1&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
    &amp;lt;li class=&amp;quot;item2&amp;quot;&amp;gt;&amp;lt;a href=&amp;quot;&amp;quot;&amp;gt;Item 2&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
    &amp;lt;li class=&amp;quot;item3&amp;quot;&amp;gt;&amp;lt;a href=&amp;quot;&amp;quot;&amp;gt;Item 3&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
    &amp;lt;li class=&amp;quot;item4&amp;quot;&amp;gt;&amp;lt;a href=&amp;quot;&amp;quot;&amp;gt;Item 4&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;

As you can see, once you master the emmet syntax, your productivity is vastly improved.
 tipA full list of Emmet shortcuts is available here and
the full documentation is available here.
 </description>
  </item>
  
  <item>
    <title>Using FileZilla to connect to your Koding VM</title>
    <link>//learn.koding.com/guides/ftp-with-filezilla</link>
    <pubDate>"2015-05-01T00:00:00.000Z"</pubDate>
    <guid isPermaLink="true">//learn.koding.com/guides/ftp-with-filezilla</guid>
    <author>Team Koding</author>
    <description>FileZilla is a popular FTP client and is widely used
on Windows OS. It&amp;apos;s extremely easy to use FileZilla to connect to your VM. This guide
will cover two methods of connecting:

Using general connection settings
Using a secure connection

 alertBefore continuing, please ensure that FTP is set up and running on your VM. If you
have not yet set up FTP, follow the instructions on this guide to set it up before
proceeding.
   Setting up a generic connection to your Koding VM using FileZilla. As the images below show, its very easy to connect to your Koding VM using the standard
username and password that you created while setting up FTP on your VM.


  Setting up a secure FTP connection to your FTP To have FileZilla connect with your VM using secure (SFTP), you will need to add your
private key(s) to the FileZilla application. You will also need to add your public key
to the authorized_keys file on your VM. If you have not yet set up the
authorized_keys file in your .ssh directory of your VM, then please read this guide before continuing.
 alertWithout setting up the above mentioned file, you will get
connection errors when connecting over SFTP.
 With your public key added to the authorized_keys file, you can now set up
FileZilla with your private key and easily connect to your VM.
Within the FileZilla preferences, find the SFTP section and add your private key as
shown in the image below.

Once the file is accepted by FileZilla, you can go back to the host setup and change the settings
to connect using SFTP (as shown in the image below).

  Connection errors and how to fix them If you get the error below while trying to connect, please check your public and private keys.
SSH key setup is very temperamental and even an extra space or line break can render the keys useless
which in turn will cause connection problems.
Status: Connecting to your_koding_username.koding.io...
Response: fzSftp started, protocol_version=2
Command: keyfile &amp;quot;path_to_your_key_file&amp;quot;
Command: open &amp;quot;xxxxxxx@your_koding_username.koding.io&amp;quot; 22
Command: Trust new Hostkey: Once
Error: Disconnected: No supported authentication methods available (server sent: publickey)
Error: Could not connect to server
</description>
  </item>
  
  <item>
    <title>How to share your VM with someone?</title>
    <link>//learn.koding.com/guides/permanent-shared-vm</link>
    <pubDate>"2015-05-01T00:00:00.000Z"</pubDate>
    <guid isPermaLink="true">//learn.koding.com/guides/permanent-shared-vm</guid>
    <author>Team Koding</author>
    <description>  What does &amp;quot;Shared VM&amp;quot; mean? The &amp;quot;Share VM&amp;quot; feature allows you to give another Koding user full access to your
VM even if you are not using your Koding.com account. This is very different from
Collaboration on Koding where you are working with someone in
real-time and sharing the IDE and Terminal.
 tipThis feature is only available for accounts with a paid plan (hobbyist, developer or professional).
Even though a paid account is required to start the sharing, a free account can receive a shared
VM.
 that as a paid plan owner, you can share your VM with another paid or free plan account.
&amp;gt;
  What&amp;apos;s the benefit? There are several use cases where this makes sense. For example:

Multiple people are working on a project. They don&amp;apos;t need to collaborate real-time but still need to access the same VM independently.
A &amp;quot;master&amp;quot; VM has been set up by the team lead that needs to be accessed by many team members (share code, docs, etc.).
Team member B needs to take over from team member A because a team is doing &amp;quot;follow the sun&amp;quot; development practice.
You are stuck somewhere, cannot be online but need someone else to look at your work.
Can you think of more? If yes, let us know!

  How do I share my VM? 
Head over to VM settings and locate the &amp;quot;Share VM&amp;quot; feature.
Click the &amp;quot;+&amp;quot; sign to add the username of a Koding user with whom you wish to share your VM. 
The user with whom the VM has been shared will now see an accept/reject notice. 
Once they accept, the shared VM will appear in the sidebar as a new avaialble resource. 

  How can I stop sharing my VM? 
Go into VM settings and remove the user with whom you no longer wish to share your VM. 

  How do I leave a shared VM? 
Click the VM settings for the shared VM and then select &amp;quot;Leave Shared VM&amp;quot; to remove the VM from your Sidebar.

</description>
  </item>
  
  <item>
    <title>Setting up MOSH on Koding.io</title>
    <link>//learn.koding.com/guides/setting-up-mosh-on-koding</link>
    <pubDate>"2015-04-29T00:00:00.000Z"</pubDate>
    <guid isPermaLink="true">//learn.koding.com/guides/setting-up-mosh-on-koding</guid>
    <author>Tushar Mathur</author>
    <description>Using a remote server for development is so much cooler for obvious reasons. Using MOSH on top of it naturally makes the experience much better.
  Koding.com + MOSH = Ecstasy Here is how you can get mosh to work on koding.com

SSH into the koding server from your client machine. If you haven&amp;apos;t added ssh keys yet checkout their tutorial. 
 ssh &amp;lt;username&amp;gt;@&amp;lt;username&amp;gt;.koding.io


Setup uncomplicated firewall in the remote machine.
 sudo apt-get install ufw
 sudo ufw status verbose
 sudo ufw enable


Open up critical ports first viz. HTTP, SSH and 56789 for koding.
 sudo ufw allow ssh
 sudo ufw allow http
 sudo ufw allow 56789/tcp


Open up the port (60001 is used by mosh in most cases) on the remote machine for the client machine to access it via udp.
 sudo ufw allow 60001/udp


Connect the remote machine by running the mosh command from the client machine. This will automatically ssh into the remote server and start the mosh-server.
 mosh &amp;lt;username&amp;gt;@&amp;lt;username&amp;gt;.koding.io



That&amp;apos;s it, you are done.
</description>
  </item>
  
  <item>
    <title>How to setup an SSH Tunnel in Unix</title>
    <link>//learn.koding.com/guides/ssh-tunneling</link>
    <pubDate>"2015-04-29T00:00:00.000Z"</pubDate>
    <guid isPermaLink="true">//learn.koding.com/guides/ssh-tunneling</guid>
    <author>Team Koding</author>
    <description>In this guide we&amp;apos;ll go over what SSH Tunneling is, what it&amp;apos;s used for, 
and how to set one up on your Koding VM. So, lets get started!
  What is SSH Tunneling? SSH Tunneling is the process of sending and receiving TCP and UDP packets 
through an SSH Connection. This enables you to bypass proxies and go 
directly to your VM, with whatever data/etc that you need.
  Why would I want to SSH Tunnel? Koding Virtual Machines do not have direct IP access. They proxy http 
connections from your domain, to the machine itself. Note that only HTTP 
is proxied. This is why when you SSH into your VM, you set up a special 
SSH config to run your connection through ssh.koding.com.
Because of this Proxy, some things you may want to do on Koding, such as 
connecting a MySQL Database Client directly to your MySQL Server becomes 
impossible via the username domains.
To solve this, you use SSH Tunneling to connect to servers directly on 
your VM, from your local machine. Lets take a look at how this is done.
  Using a SSH Tunnel First up, make sure you have gone through the SSH Guide, and 
can successfully connect to your VM using the steps outlined in that 
guide. You must have a working SSH connection for this to work.
Next, run the following command.
ssh -L 8080:localhost:80 hostname.username.koding.io
Where hostname is the hostname of your VM, and username is your 
Koding username.
After running this command, you&amp;apos;ll simply connect to your VM.. it may 
appear like nothing has happened. But now, like magic, try loading the 
following URL into your browser.
http://localhost:8080/
Just like magic, you can see that your Port 8080 on localhost is 
returning the same thing as:
http://hostname.username.koding.io:80
Awesome! To connect with something like a MySQL Database Client, simply 
create an SSH tunnel with the appropriate Port on the Virtual 
Machine, and any port you&amp;apos;d like for your localhost. Then connect to 
your localhost with your MySQL Client!
</description>
  </item>
  
  <item>
    <title>TogetherJS Setup and Usage for Beginners</title>
    <link>//learn.koding.com/guides/togetherjs-setup-for-beginners</link>
    <pubDate>"2015-04-29T00:00:00.000Z"</pubDate>
    <guid isPermaLink="true">//learn.koding.com/guides/togetherjs-setup-for-beginners</guid>
    <author>Team Koding</author>
    <description>In this article we will go over beginner steps for TogetherJS.
  What is TogetherJS? TogetherJS is a drop-in collaboration framework. Think of it like easily adding Google Docs to any site. Normally when you program a real time site, you use a framework like SocketIO, SockJS, or Firebase, and it takes a considerable amount of work just to make content sync up between clients. Adding text chat/mouse tracking/voice chat is a lot of additional work that is often outside the scope of your project. TogetherJS takes away that problem. You focus on your application, and TogetherJS can focus on the difficulty of mouse tracking. With just two lines of code, you get all of these features. Easy! 
  Setting up TogetherJS In the following example, we&amp;apos;ll setup TogetherJS by using a plain html page and the TogetherJS Scripts. 
And just like that, we have a static page with text chat, voice chat, and mouse tracking built into our html page! And because we used Koding we can share this project with our friends easily. On localhost you would have to run a web server, expose and forward your ports, figure out your ip, and finally share it with a friend. Koding saves you that localhost-hassle, and makes this a one-step process. Just share your domain and you&amp;apos;re done. 
</description>
  </item>
  
  <item>
    <title>Using Tmux on Koding</title>
    <link>//learn.koding.com/guides/using-tmux-on-koding</link>
    <pubDate>"2015-04-29T00:00:00.000Z"</pubDate>
    <guid isPermaLink="true">//learn.koding.com/guides/using-tmux-on-koding</guid>
    <author>Team Koding</author>
    <description>In this Tmux FAQ we will address an issue people have had with Tmux on Koding. It&amp;apos;s easy to deal with, but not an obvious workaround.
  Odd Behavior When you first try and install and run tmux on Koding, it seems to load properly, but many commands just don&amp;apos;t seem to work. Some, like C-b c (used to create a new window) even force close the Terminal. What is going on?
Well, Koding uses GNU Screen to help reconnect your Terminal sessions after connection issues. Koding&amp;apos;s preconfigured Screen is set to use C-b as it&amp;apos;s own prefix key. So when you run and use Tmux, and attempt to use C-b commands, you are actually sending commands to Screen. This explains the general odd behavior, as things like C-b c in Screen mean &amp;quot;close&amp;quot;, so you unintentionally logout of screen and close your Terminal.
  The Solution The solution is quite simple, rebind your Tmux Prefix key. This can be done by creating a ~/.tmux.conf file and placing the following command into it:
set-option -g prefix C-a
Where C-a is Control key. This sets it to Control-a, a popular alternative for Tmux users (and the traditional Screen PREFIX). You can of course bind it to whatever you want. Once you have your PREFIX rebound, killall tmux instances and reopen, and it will run just like you expect.. just remember to use Control-a as your PREFIX :)
  But i love C-b! Unfortunately, this is the way it has to be for now. A guru developer over at Koding did mention that they would like to make their version of screen not use any keybinds, so that it does not block your input at all. So, think of this alternate bind as a short-term workaround, until this &amp;quot;issue&amp;quot; is resolved.
</description>
  </item>
  
  <item>
    <title>PrestaShop Installation for Beginners</title>
    <link>//learn.koding.com/guides/prestashop-installation-for-beginners</link>
    <pubDate>"2015-04-29T00:00:00.000Z"</pubDate>
    <guid isPermaLink="true">//learn.koding.com/guides/prestashop-installation-for-beginners</guid>
    <author>Team Koding</author>
    <description>Before you continue reading this guide why not try a more easy way, using the Koding Package Manager (kpm) and install Prestashop using just one command:
kpm install prestashop

In this article we&amp;#x2019;ll go over the basics of setting up PrestaShop.
  About PrestaShop A lot of retail stores these days are turning to online shops. It gives them a different power over the products they are selling and in the era of smart gadgets, consumers can now buy almost anything online.
There are a lot of e-commerce solutions, but a there is one that stands out, PrestaShop. You may have heard of it, because it&amp;apos;s all over the news. It&amp;apos;s one of the most reliable and flexible Open-source e-commerce software out there and with a team of 70 developers and with a community that has more than 500.000 members, it sure is a platform worth developing for.
Luckily you can do that on Koding with ease. So how do you setup a PrestaShop shop on Koding? You just follow the next few simple steps and you&amp;apos;re good to go.
  Setting up PrestaShop   Step 1. Open up a Terminal window in Koding and type the following commands to get you started. We navigate to our Web folder and then we try to get the latest version of PrestaShop available on their website. In this case PrestaShop 1.6.0.13
cd Web;
wget http://www.prestashop.com/download/prestashop_1.6.0.13.zip;
  Step 2. We unzip the file.
unzip prestashop_1.6.0.13.zip
  Step 3. We can now head over to the setup page and begin the installation
procedure. Our link is:
http://[your_vm_hostname].[your_Koding_username].koding.io/prestashop
All we have to do now is to fill in the required fields to set up the
shop.
And that&amp;apos;s it, three simple steps to set up your e-commerce solution. As always, more Quick Tips and beginner friendly guides from Koding coming soon, so stay tuned!
</description>
  </item>
  
  <item>
    <title>Koding Subdomains and VHosts</title>
    <link>//learn.koding.com/guides/vhosts-and-subdomains</link>
    <pubDate>"2015-04-29T00:00:00.000Z"</pubDate>
    <guid isPermaLink="true">//learn.koding.com/guides/vhosts-and-subdomains</guid>
    <author>Team Koding</author>
    <description>In this guide we&amp;apos;ll go over setting up a Koding subdomain to point to a
directory of your choice.
  Creating Subdomains To create a subdomain, refer to the Subdomain Section
here
  Creating a Virtual Host First, run the following command, where mysubdomain is the name of your subdomain.
sudo touch /etc/apache2/sites-available/mysubdomain.conf

Next, open the above file with nano, vim, or whatever command line
editor you prefer. We&amp;apos;re using a command line editor, because files
located in /etc/apache2/sites-available are owned by root, and
require sudo.
If you used nano, your command should look like this:
sudo nano /etc/apache2/sites-available/mysubdomain.conf

Now that you have the file open with your preferred editor, paste in the
following code:
&amp;lt;Virtualhost *:80&amp;gt;
  ServerName mysubdomain.username.koding.io
  DocumentRoot /var/www/myDirectory
&amp;lt;/Virtualhost&amp;gt;

There are a two things you&amp;apos;re going to have to change here, so lets go over them.

ServerName: The value of ServerName should be your full subdomain
url, without the http.

DocumentRoot: This is the folder location that you want the
subdomain to direct to. Remember that /var/www equals ~/Web, so in
the given example, /var/www/myDirectory equals ~/Web/myDirectory.


&amp;lt;Virtualhost *:80&amp;gt;
  ServerName hello.joshmurray.koding.io
  DocumentRoot /var/www/helloworld
&amp;lt;/Virtualhost&amp;gt;

 alertThe DocumentRoot has to be an absolute path. Relative directories such as /var/www/../foo and ~/MyDirectory will not work.  If you would like to supply an directory outside of ~/Web, use your full home path, eg: /home/joshmurray/myNotWebDirectory
   Enable the Subdomain Lastly, we need to add our &amp;quot;site&amp;quot; and reload apache. Run the following
two commands, replacing mysubdomain with the name of your subdomain.
sudo a2ensite mysubdomain
sudo service apache2 reload

  Confirming To confirm you did all the steps completely, connect to
http://mysubdomain.username.koding.io and you should see whatever you
have in your directory of choice.
  Troubleshooting   Apache 404 If you see a plain white page saying &amp;quot;Not Found&amp;quot; with mentions of
Apache and Ubuntu, then Apache is correctly loading a directory, but the
directory is empty. Confirm that your DocumentRoot is a correct, and an
absolute directory.
  Forbidden By default, Apache is configured to not allow access to directories
outside of /var/www. So, if you link to an absolute directory outside
of /var/www, such as /home/joshmurray/hello, you may see a message
similar to the following.
You do not have permission to access / on this server.
To resolve this, you can use the &amp;lt;Directory&amp;gt; directive inside of your
VirtualHost directive from above. Example:
&amp;lt;Virtualhost *:80&amp;gt;
  ServerName hello.joshmurray.koding.io
  DocumentRoot /home/joshmurray/hello
  &amp;lt;Directory /home/joshmurray/hello/&amp;gt;
    Options Indexes FollowSymLinks
    AllowOverride None
    Require all granted
  &amp;lt;/Directory&amp;gt;
&amp;lt;/Virtualhost&amp;gt;

Afterwards, don&amp;apos;t forget to reload Apache, with the following command.
sudo service apache2 reload

Important: It is recommended that you review the Directory directive
documentation,
as there are security implications to allowing directory access, that you
should understand.
  I don&amp;apos;t have a Subdomain If you do not already have a Subdomain, you need to create one with the
same name that you used in your Virtual Host
configuration.
To do this, from Koding navigate to your IDE window and go to your VM
Settings. This will appear as little circle next to your VM Name in the
left sidebar of Koding. From the settings menu, Click &amp;quot;More&amp;quot;, and add any
subdomains that you need.
For a more indepth explanation of this process, refer to the Subdomain
Section here.
</description>
  </item>
  
  <item>
    <title>Why is my Virtual Machine (VM) asleep?</title>
    <link>//learn.koding.com/guides/vm-asleep</link>
    <pubDate>"2015-04-29T00:00:00.000Z"</pubDate>
    <guid isPermaLink="true">//learn.koding.com/guides/vm-asleep</guid>
    <author>Team Koding</author>
    <description>  Why does my Virtual Machine (VM) appear as asleep when I visit it on a browser? There are two main reasons for this:

The VM is actually off. If this is the case then all that needs
to be done is that the owner of the VM needs to turn the VM on. Details
on how to turn on your VM are available here. tipIf you have a free account, then your VM will automatically
turn off after 60 minutes of inactivitiy on koding.com.
 
If your VM is on but you are still seeing the &amp;quot;VM is asleep&amp;quot; page, then
that means the global DNS propagation for your particular VM has not yet
completed. Global DNS propagation can take anywhere from 1 to 10 minutes
from the time you turn on your VM. tipFor paid accounts, IP addresses don&amp;apos;t change upon reboot so DNS propagation
time is not a problem.
 

If you have tried the above and are still having issues, please send us a note
 with the details and we&amp;apos;ll be glad to help.
</description>
  </item>
  
  <item>
    <title>Markdown Basics, for Koding</title>
    <link>//learn.koding.com/guides/markdown</link>
    <pubDate>"2015-04-29T00:00:00.000Z"</pubDate>
    <guid isPermaLink="true">//learn.koding.com/guides/markdown</guid>
    <author>Team Koding</author>
    <description>Markdown is a simple language whose syntax can be easily converted into HTML.Koding, like many other sites, use Markdown as a way for users to easily style 
their text. In this guide, we&amp;apos;ll go over the basics of Markdown and it&amp;apos;s usage.
  Official Documentation The official Markdown 
documentation covers the 
Markdown syntax quite well, and as such this guide will only briefly touch on 
each major syntax structure. If any questions remain, please refer to the 
official documentation.
  Emphasis Emphasis can be achieved by wrapping the word you&amp;apos;d like to emphasise with a 
single asterisk or underline. Example:
Hello, *this is emphasised* and this isn&amp;apos;t!

  Strengthen To strengthen your text wrap it with double asterisks or underlines. Example:
Hello, **this is strong** and this isn&amp;apos;t!

  Inline Code Typing code within a sentence is considered inline code. Inline code is 
accomplished by wrapping the code with backticks \ For example:
Foo `bar` baz

  Code Blocks Codeblocks can be achieved by wrapping your code in triple backticks, but make 
sure to include a newline after each tripple backtick. Example:
Take a look at my awesome code:

```coffee
do -&amp;gt; console.log &amp;apos;Weee&amp;apos; while true
```

Nifty eh?
Note the coffee text right behind the first triple backtick. This signifies 
the language of the code used in that code block, and Koding will add syntax 
highlighting if you specify the language.
  Headers # This is a Header 1

## This is a Header 2

The # foo syntax represents headers of varying levels. The number of hashes 
represents the level of header, with a maximum of 6.
  Links [Koding](https://koding.com)
[Koding Terminal, from Koding](/Terminal)

The [foo](bar) syntax will create a link. Links can be absolute or relative, 
just like html links.
  Unordered Lists Unordered lists can be by prepending your items with a hyphen. Example:
- Item one
- Item two
- Item three

Markdown will also embed lists and list content, if you add indentation.Example:
- Item one
- Item two
  This is still within item two.
  - This is a list item in item two.
  - And another
- Item three

  Ordered Lists Ordered lists are identical to unordered lists in features, you just have to 
prepend your list items with a number, instead of a hyphen. Example:
1. Item one
2. Item two
3. Item three

  Images You can easily include images in your markdown by using the following notation:
![Alt text](full url to the image)
![Alt text](full url to the image &amp;quot;Optional title&amp;quot;)

</description>
  </item>
  
  <item>
    <title>Koding Virtual Machines Introduction</title>
    <link>//learn.koding.com/guides/vm-introduction</link>
    <pubDate>"2015-04-29T00:00:00.000Z"</pubDate>
    <guid isPermaLink="true">//learn.koding.com/guides/vm-introduction</guid>
    <author>Team Koding</author>
    <description></description>
  </item>
  
  <item>
    <title>Installing PostgreSQL</title>
    <link>//learn.koding.com/guides/installing-postgresql</link>
    <pubDate>"2015-04-29T00:00:00.000Z"</pubDate>
    <guid isPermaLink="true">//learn.koding.com/guides/installing-postgresql</guid>
    <author>Team Koding</author>
    <description>Before you continue reading this guide why not try a more easy way, using the Koding Package Manager (kpm) and install PostgreSQL using just one command:
kpm install postgresql

PostgreSQL is an open source relational database management system that 
provides an implementation of the SQL query language. In this guide, 
we&amp;apos;ll go over installing PostgreSQL on your Koding VM. Lets get started!
  Updating, and Installing We can install Postgres by using apt-get. To do this, open your 
Terminal and paste in the following two commands.
sudo apt-get update
sudo apt-get install postgresql postgresql-contrib
Once these two commands finish Postgres should be installed and running.
  Confirming Your Installing To confirm your Installation and that Postgres is running, run the 
following command in your Terminal.
service postgresql status
It should respond with approximately the following.
9.3/main (port 5432): online
  Connecting and Using PostgreSQL For instructions on using Postgres, see the Using PostgreSQL 
guide.
</description>
  </item>
  
  <item>
    <title>Installing PHP</title>
    <link>//learn.koding.com/guides/installing-php</link>
    <pubDate>"2015-04-29T00:00:00.000Z"</pubDate>
    <guid isPermaLink="true">//learn.koding.com/guides/installing-php</guid>
    <author>Team Koding</author>
    <description>To install the latest version of PHP, use these commands in the Terminal:
sudo apt-get install php5
After that we need a library that will interact with the Apache server. You can install that using the following command.
sudo apt-get install libapache2-mod-php5
Now, you need to restart the Apache server to see the changes.
sudo /etc/init.d/apache2 restart
That is all!
</description>
  </item>
  
  <item>
    <title>Installing Phalcon on Koding</title>
    <link>//learn.koding.com/guides/installing-phalcon</link>
    <pubDate>"2015-04-29T00:00:00.000Z"</pubDate>
    <guid isPermaLink="true">//learn.koding.com/guides/installing-phalcon</guid>
    <author>Jay</author>
    <description>This article will cover the process of installing and setting up Phalcon in your Koding environment.
  What is Phalcon Phalcon is an open source framework for PHP 5. It differs from other frameworks like Codeigniter, Laravel, etc. in that it is implemented as a C extension. This minimizes memory usage and offers significant performance advantages in comparison to other frameworks.
  Step 1 - Install the Prerequisites Before we can install Phalcon, we need to install the following dependencies:

PHP 5.x development resources
GCC compiler

Open your Koding Terminal and type the following:
sudo apt-get install php5-dev php5-mysql gcc libpcre3-dev
After typing this and hitting enter, you might be prompted for a password. Type in the password of your Koding account and hit enter.
This command might take a few minutes to execute and will fetch and install all the required prerequisites.
  Step 2 - Fetch the Source Code In your Koding Terminal and type the following:
git clone --depth=1 git://github.com/phalcon/cphalcon.git
Executing this command will create a directory named cphalcon and save the latest stable source code in it. We will use this source code to install Phalcon in the next step.
  Step 3 - Install Phalcon Once you have fetched the source code in step 2, type the following two commands in your Koding Terminal:
cd cphalcon/build
sudo ./install
Executing these commands will install the Phalcon extension for PHP in your Koding environment.
  Step 4 - Modify php.ini We now have to modify the php.ini file to include the newly installed Phalcon extension. We can do this by creating a new configuration file for this extension (located at /etc/php5/apache2/conf.d/30-phalcon.ini) and adding the following line to it:
extension=phalcon.so
If you are familiar with vim or nano, you can use either to do this. Alternatively, you can type the following command to append the above line in php.ini:
sudo sh -c &amp;quot;echo &amp;apos;extension=phalcon.so&amp;apos; &amp;gt; /etc/php5/apache2/conf.d/30-phalcon.ini&amp;quot;
This will create the new configuration file and add the required line.
  Step 5 - Restart Apache After completing all the above steps, all that is left to do is restart Apache so that it can load the Phalcon module for PHP. Type in the following command in your Koding Terminal:
sudo service apache2 restart
  Step 6 - Verify the Installation Create a new php file in your public web directory /home/USERNAME/Web (replace USERNAME with your Koding username). You can name it anything but for this example, we&amp;apos;ll name it phpinfo.php. Put the following content in this file:
&amp;lt;?php
phpinfo();
Once this is done, you can open this file in your browser by visiting
http://hostname.username.koding.io/phpinfo.php 
This page should show you the PHP configuration on your machine. 
One of the section contains information about Phalcon (search on the page for phalcon by pressing Ctrl + F). 
If you can see this section, it means that Phalcon has been installed on your machine and you can start using it right away!
</description>
  </item>
  
  <item>
    <title>Changing your IDE and Terminal themes</title>
    <link>//learn.koding.com/guides/change-theme</link>
    <pubDate>"2015-04-29T00:00:00.000Z"</pubDate>
    <guid isPermaLink="true">//learn.koding.com/guides/change-theme</guid>
    <author>Team Koding</author>
    <description>Changing your IDE and Terminal theme is very easy. Not everyone likes the default colors
and fonts so we&amp;apos;ve put together a slew of choices for you to pick from.
To get started, simply head over to your IDE settings panel (as shown in the image below)
and select the IDE and Terminal theme that suits you best. As you select a new theme, the
theme color scheme and font should reflect in the editor and Terminal in real time.
Enjoy your new theme!

</description>
  </item>
  
  <item>
    <title>Getting started with Jenkins</title>
    <link>//learn.koding.com/guides/getting-started-jenkins</link>
    <pubDate>"2015-04-29T00:00:00.000Z"</pubDate>
    <guid isPermaLink="true">//learn.koding.com/guides/getting-started-jenkins</guid>
    <author>Team Koding</author>
    <description>Before you continue reading this guide why not try a more easy way, using the Koding Package Manager (kpm) and install Jenkins using just one command:
kpm install jenkins

This guide will cover the basics on how to install and configure Jenkins on your Koding VM. Just follow the steps and you should have Jenkins running in no time.
  Installing Jenkins The first thing you need to do before you install Jenkins is to make sure you add the key and source list to apt. Using the following commands you will be able to do just that.
 alertYou should be logged in as root to continue with the following steps.
 First add the key:
wget -q -O - http://pkg.jenkins-ci.org/debian/jenkins-ci.org.key | apt-key add -
Create the sources list:
echo deb http://pkg.jenkins-ci.org/debian binary/ &amp;gt; /etc/apt/sources.list.d/jenkins.list
After you finished with the above commands update apt like so:
apt-get update
You can now install Jenkins using the following command:
apt-get install jenkins
 alertPlease note that Jenkins has a lot of dependencies, so it might take some time to install them all.
   Configuring Jenkins Jenkins should now be running properly. Head over to your VMs assigned URL (If you don&amp;apos;t know what&amp;apos;s your VM URL follow this guide to find out) and append :8080 to it. That is where Jenkins currently resides.

The above image shows the default screen when you first open Jenkins.
Jenkins, by default, is insecure and everyone can access it. Head over to Manage Jenkins (in the left menu) then click Setup Security.

Follow these steps to secure your Jenkins installation:


The first thing you need to do is to enable the security setting by checking it.
Now check the box to use Jenkins&amp;apos;s own user database and disable sign ups.
Next, check the box for Matrix-based security and make sure Anonymous only has the Read right under the View group.
Click save. The page should reload and you&amp;apos;ll see a login form. You should ignore that.
Head over to your VMs URL follow by :8080. You&amp;apos;ll see a sign up form.


Sign up and this process should give administrative clearance for your Jenkins installation.
If you have any question or issues please email us at support@koding.com and we&amp;apos;ll gladly help.
</description>
  </item>
  
  <item>
    <title>Installing the MEAN.io stack on Koding</title>
    <link>//learn.koding.com/guides/installing-mean-io</link>
    <pubDate>"2015-04-29T00:00:00.000Z"</pubDate>
    <guid isPermaLink="true">//learn.koding.com/guides/installing-mean-io</guid>
    <author>P1xt</author>
    <description>Before you continue reading this guide why not try a more easy way, using the Koding Package Manager (kpm) and install MEAN or MEAN.io stack using just one command:
If you want to install MEAN:
kpm install mean
and if you want to install MEAN.io stack you can use:
kpm install mean-io-stack

This article will cover the process of installing and setting up a MEAN.io stack in your Koding environment.
  What is MEAN.io MEAN.io is an opinionated fullstack javascript framework which simplifies and accelerates web application development.
It contains Mongodb, Angular.js, Express.js, and Node.js.
The folowing instructions pertain the the MEAN stack as found on http://mean.io. There is a competing MEAN stack found at http://mean.js but a full discussion regarding the merits of the competing stacks is beyond the scope of this document.
  Step 1 - Install the Prerequisites Before we can install MEAN, we need to install the following dependencies:

build-essentials
make
GCC compiler

Open your Koding Terminal and type the following:
sudo apt-get install gcc make build-essential
After typing this and hitting enter, you might be prompted for a password. Type in the password of your Koding account and hit enter.
This command might take a few minutes to execute and will fetch and install all the required prerequisites.
  Step 2 - Install Required Supporting Applications Follow the directions HERE to install mongodb.
Still in your Koding Terminal, type the following to install grunt:
npm install -g grunt-cli
  Step 3 - Install MEAN Still in your Koding Terminal, type the following:
npm install -g mean-cli
  Step 4 - Creating your first MEAN Application $ mean init &amp;lt;myApp&amp;gt;
$ cd &amp;lt;myApp&amp;gt; &amp;amp;&amp;amp; npm install
The npm install will install all the dependencies for your MEAN Application and will take several minutes. 
Once the install is complete, you may start the server for your application using either grunt or node with the following commands (respectively):
$ grunt
$ node server
Then, open a browser and go to:
  http://YOURID.koding.io:3000
Where YOURID is replaced with your actual koding id.
</description>
  </item>
  
  <item>
    <title>Installing LinuxBrew</title>
    <link>//learn.koding.com/guides/installing-linuxbrew</link>
    <pubDate>"2015-04-29T00:00:00.000Z"</pubDate>
    <guid isPermaLink="true">//learn.koding.com/guides/installing-linuxbrew</guid>
    <author>Alvin Wan</author>
    <description>There are a variety of package installers to help with what would otherwise be complex installations. Follow these instructions to install HomeBrew for Linux.
  The One-Line Solution Input the following in your shell, as Koding already has Ruby pre-installed:
ruby -e &amp;quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/linuxbrew/go/install)&amp;quot;
From here, you&amp;apos;ll be poised for yet more installations. See their website for more information.
</description>
  </item>
  
  <item>
    <title>How to install Joomla</title>
    <link>//learn.koding.com/guides/how-to-install-joomla</link>
    <pubDate>"2015-04-29T00:00:00.000Z"</pubDate>
    <guid isPermaLink="true">//learn.koding.com/guides/how-to-install-joomla</guid>
    <author>Team Koding</author>
    <description>Before you continue reading this guide why not try a more easy way, using the Koding Package Manager (kpm) and install Joomla using just one command:
kpm install joomla

This guide will walk you through the steps required to install Joomla on your Koding VM. We will walk through the steps needed to download, install, configure and eventually run a full Joomla system.
  Joomla requirements Before we begin you may want to make sure you have the following things installed on your Koding VM.

PHP 5.3.10 or greater
MySQL 5.1 or greater
The mod_rewrite Apache module

Also make sure you have the PHP mySQL package installed. Use the following command if you do not have it.
sudo apt-get install -y php5-mysql
After you made sure and/or installed the above requirements you can go ahead a continue with the guide.
  Step 1 - Database creation The first thing we need for our Joomla installation to work, is a new database. We can create one using either:

the command line
via phpMyAdmin.

The rest of this guide will focus on the command line method to create a database for our Joomla installation.
  Setting up MySQL: Type in the commands listed below in a Koding Terminal.

Login to mySQL as the root user:

mysql -u root -p

Create a new database:

CREATE DATABASE joomla;

Create a new user and assign a password:

CREATE USER dbuser@localhost IDENTIFIED BY &amp;apos;your_password&amp;apos;;

Give that user permission to access that database using the following command:

GRANT ALL PRIVILEGES ON joomla.* TO dbuser@localhost;

Apply the changes so that mySQL knows about them:

FLUSH PRIVILEGES;

exit
Restart the Apache server to make sure everything is working properly
sudo service apache2 restart
  Step 2 - Configuring Joomla The first thing we need to do is to head over to our Web folder like so type in the following command in Terminal:
cd ~/Web
Now, we need to download the latest Joomla release. We can do that using the following command:
wget https://github.com/joomla/joomla-cms/releases/download/3.4.0/Joomla_3.4.0-Stable-Full_Package.zip
Unzip the downloaded file:
unzip Joomla_3.4.0-Stable-Full_Package.zip -d joomla
All of the Joomla install files will now be extracted into a older named joomla.
 tipYou can rename this folder afterwords anyway you like.
 After the unzip has finished and the Joomla files are in the web directory, we need to modify some permissions to give access to the Joomla installer.
First we need to create a Joomla configuration file and make it temporarily world-writeable:
cd joomla
sudo touch configuration.php
sudo chmod 777 configuration.php
 alertAfter the installation is complete, we&amp;apos;ll need to change the permissions back to 755.
   Step 3 - Finalizing the Joomla install Open up a new browser tab and navigate to your VM&amp;apos;s hostname and add /joomla at the end. If you don&amp;apos;t know what you VM hostname is, follow this guide to find out.
You should see the initial configuration page. It should look like this:

Now you just need to follow the instructions on screen and finish the install.
After the install process has finished, delete the installation folder, as per Joomla&amp;#x2019;s instructions, and change the permissions on the config file:
sudo rm -rf installation/
chmod 755 configuration.php
And thats it!
If you encounter any issues or have any questions regarding Joomla on Koding you can email us at support@koding.com and we&amp;apos;ll gladly help.
</description>
  </item>
  
  <item>
    <title>Installing MySQL</title>
    <link>//learn.koding.com/guides/installing-mysql</link>
    <pubDate>"2015-04-29T00:00:00.000Z"</pubDate>
    <guid isPermaLink="true">//learn.koding.com/guides/installing-mysql</guid>
    <author>Team Koding</author>
    <description>Before you continue reading this guide why not try a more easy way using the Koding Package Manager (kpm) and install mySQL using just one command:
kpm install mysql

In this guide we will cover the basics on how you can install MySQL and 
the latest version of PHP-MySQL modules on your Koding VM.
  Installation via apt-get First open up your Koding IDE and paste the following command into 
your Terminal. This will ensure that your apt-get 
database is at the latest level. 
sudo apt-get update
Now, type in the command below to install mysql, and it&amp;apos;s dependencies.
sudo apt-get install mysql-server mysql-common mysql-client
As part of the installation process, you&amp;apos;ll be presented with the 
following screen.

This is to create your MySQL Root user passphrase. Enter a passphrase 
of your choice, and repeat it at the next screen.
  Logging into MySQL Afterwards, you can confirm your installation by running the following 
command.
mysql -u root -p
When prompted, enter the MySQL root user passphrase that you created 
above.
  PHP MySQL Extensions (Optional) A popular addition to this installation process, are the PHP extensions 
needed to use MySQL form PHP. This is optional, and if you don&amp;apos;t use PHP, 
you can ignore these.
To install the PHP MySQL Extension, simply run the following command.
sudo apt-get install php5-mysql
After that, you&amp;apos;ll need to restart Apache to make use of this extension.This can be done with the following command.
sudo service apache2 restart
That&amp;apos;s it!
</description>
  </item>
  
  <item>
    <title>Install WordPress</title>
    <link>//learn.koding.com/guides/installing-wordpress</link>
    <pubDate>"2015-04-29T00:00:00.000Z"</pubDate>
    <guid isPermaLink="true">//learn.koding.com/guides/installing-wordpress</guid>
    <author>Team Koding</author>
    <description>Before you continue reading this guide why not try a more easy way, using the Koding Package Manager (kpm) and install WordPress using just one command:
kpm install wordpress

This guide will walk you through the steps required to install WordPress on your Koding VM. We will walk through the steps needed to download, install, configure and eventually run a full WordPress system.
  WordPress requirements Before we begin you may want to make sure you have the following things installed on your Koding VM.

PHP 5.2.4 or greater
MySQL 5.0 or greater
The mod_rewrite Apache module

After you made sure and/or installed the above requirements you can go ahead a continue with the guide.
  Step 1 - Database creation The first thing we need for our WordPress installation to work is a new database. We can create one using either:

the command line
via phpMyAdmin.

The rest of this guide will focus on the command line method to create a database for our WordPress installation.
  Setting up MySQL: Type in the commands listed below in a Koding Terminal.

Login to mySQL as the root user:

mysql -u root -p

Create a new database:

CREATE DATABASE wordpress;

Create a new user and assign a password:

CREATE USER dbuser@localhost IDENTIFIED BY &amp;apos;your_password&amp;apos;;

Give that user permission to access that database using the following command:

GRANT ALL PRIVILEGES ON wordpress.* TO dbuser@localhost;

Apply the changes so that mySQL knows about them:

FLUSH PRIVILEGES;

exit
  Step 2 - Configuring WordPress The first thing we need to do is to head over to our Web folder like so type in the following command in Terminal:
cd ~/Web
Now, we need to download the latest WordPress release. We can do that using the following command:
wget http://wordpress.org/latest.zip
Unzip the downloaded file:
unzip latest.zip
All of the WordPress install files will now be extracted into a older named wordpress (that you can rename afterwards if you want to).
The last thing we need to do before we can start the installation process is to set up the link between WordPress and the database we created earlier. We can achieve this by typing in the following commands in Terminal:

Head over to the WordPress folder:

cd wordpress

Rename the default config file:

cp wp-config-sample.php wp-config.php

Edit the config file via the command line:

nano wp-config.php

Add the proper database info into the config file and then save it:

// ** MySQL settings - You can get this info from your web host ** //
/** The name of the database for WordPress */
define(&amp;apos;DB_NAME&amp;apos;, &amp;apos;database_name&amp;apos;);

/** MySQL database username */
define(&amp;apos;DB_USER&amp;apos;, &amp;apos;username&amp;apos;);

/** MySQL database password */
define(&amp;apos;DB_PASSWORD&amp;apos;, &amp;apos;password&amp;apos;);

/** Stop WordPress from asking for FTP credentials */
define(&amp;apos;FS_METHOD&amp;apos;, &amp;apos;direct&amp;apos;);
The above variables: database_name, username, password should be replaced with the values you set when creating the database on Step 1.
The last thing that we need to do before we begin the install, is to set up the uploads folder. That can be achieved like so:

From the command line we create a folder:

mkdir wp-content/uploads

We need to give the web server write permission to all WordPress files so you can make changes to the install directly from within WordPress. You can achieve this by using the following commands:

sudo chown -R www-data:www-data wp-content/uploads

sudo chmod -R 755 wp-content/uploads
  Step 3 - Finalizing the WordPress install Open up a new browser tab and navigate to your VM&amp;apos;s hostname and add /wordpress at the end. If you don&amp;apos;t know what you VM hostname is, follow this guide to find out.
You should see the initial configuration page. It should look like this:

Now you just need to follow the instructions on screen and finish the install!
If you encounter any issues or have any questions regarding WordPress on Koding you can email us at support@koding.com and we&amp;apos;ll gladly help.
</description>
  </item>
  
  <item>
    <title>Installing Linux Dash</title>
    <link>//learn.koding.com/guides/linux-dash</link>
    <pubDate>"2015-04-29T00:00:00.000Z"</pubDate>
    <guid isPermaLink="true">//learn.koding.com/guides/linux-dash</guid>
    <author>Team Koding</author>
    <description>Before you continue reading this guide why not try a more easy way, using the Koding Package Manager (kpm) and install Linux Dash using just one command:
kpm install linux-dash

Linux Dash is a low-overhead monitoring web dashboard for a GNU/Linux
machine. With a dead-simple installation and easy to view information, it
can make viewing an overview of your Linux system a beginner friendly
endevour. In this guide we&amp;apos;ll go over this two step install process on
Koding. Lets get started!
  Installation To install Linux Dash we simply need to download the source and then
place it into the Web folder. To do this, run the following
commands. Note, you can simply copy the entire group of commands and
paste it into your Terminal. They will execute sequentially.
wget https://github.com/afaqurk/linux-dash/archive/master.zip
unzip master.zip
rm master.zip
mv linux-dash-master ~/Web/dash
That&amp;apos;s it! Linux Dash uses PHP, which means there is no traditional
installation process. We only need a few things, all of which Koding
comes with by default!
Linux Dash also supports NodeJS and Go in the same copy of the source. You can find instructions for those alternative server languages here.
  Dashboard To access your dashboard, visit your Koding Domain, which will look like
the following address.
http://hostname.username.koding.io/dash
Where username is your Koding Username. You will see a Dashboard,
similar to the following image.

That&amp;apos;s all there is to it! Enjoy!
</description>
  </item>
  
  <item>
    <title>Installing Apache Cordova</title>
    <link>//learn.koding.com/guides/installing-apache-cordova</link>
    <pubDate>"2015-04-29T00:00:00.000Z"</pubDate>
    <guid isPermaLink="true">//learn.koding.com/guides/installing-apache-cordova</guid>
    <author>Team Koding</author>
    <description>This guide will cover the basics on how to get Apache Cordova installed on your Koding VM.
Before you begin please check that you have the following things installed on your Koding VM. For each requirement run each command to make sure that you have that requirement installed on your VM.
 tipNote: By default all Koding VMs come preinstalled with the below requirements.
 
NodeJS

nodejs -v

NPM (Node Packaged Modules)

npm -v

Git

git --version
  Step 1 - Install In order to install Apache Cordova you will need to use NPM. Input the following command to install Apache Cordova.
sudo npm install -g cordova
  Step 2 - Finish up After the process has finished installing, the module, you need to make sure it has installed correctly. You can simply check the version using the following command:
cordova -v
The output of the above command should be something similar to this:
3.5.0-0.2.6
  Step 3 - Setting up a first project To create your first Apache Cordova app project you can use the following command:
cordova create FOLDER ID NAME
FOLDER represents the folder where the source or the project will be stored (the folder should not be created beforehand).
ID is the reverse domain-style identifier
NAME is the application&amp;apos;s title.
If you installed NodeJS and not used the default one that came with your Koding VM you may encounter the following error:
/usr/bin/env: node: No such file or directory
In order to fix this issue you can run the following:
ln -s /usr/bin/nodejs /usr/bin/node
You now need to switch to the app folder, the one that you used above, where the source is stored, in order to add platforms:
cd FOLDER
You can add platforms like so:
cordova platform add PLATFORM_NAME
Where PLATFORM_NAME is the platform you want to add. Some of the platforms are enumerated here: ios, amazon-fireos, android, blackberry10, firefoxos, wp8, and windows8. Please do not try to add a Windows platform as this will result in an error.
If you have set everything correctly, until this point, you can go ahead an build your project using the following command (Note: Please make sure you&amp;apos;re in the project folder before inputing the below command):
cordova build
If you want to build a project for a particular platform, you can use the following command:
cordova build PLATFORM_NAME
And that&amp;apos;s it!
If you encounter any issues or have any questions regarding Apache Cordova on Koding you can email us at support@koding.com and we&amp;apos;ll gladly help.
</description>
  </item>
  
  <item>
    <title>Installing Nginx</title>
    <link>//learn.koding.com/guides/nginx</link>
    <pubDate>"2015-04-29T00:00:00.000Z"</pubDate>
    <guid isPermaLink="true">//learn.koding.com/guides/nginx</guid>
    <author>Team Koding</author>
    <description>Before you continue reading this guide why not try a more easy way, using the Koding Package Manager (kpm) and install Nginx using just one command:
kpm install nginx

Nginx is an open source proxy server, commonly used as a replace
Nginx is an open source web server. Built with performance and memory usage in 
mind, it&amp;apos;s an excellent alternative to Apache. In this guide, we&amp;apos;ll go through 
the simple process of installing Nginx on Koding. Lets get started!
  Installing Nginx Koding runs Ubuntu, gives you root, and of course comes with apt-get. This 
means that installation of many packages, programs and servers simply 
require using apt-get. To install Nginx with apt-get, run the following 
command.
sudo apt-get install nginx
Confirm the installation by pressing enter at the [Y/n] prompt, and proceed 
to the next step.
  Starting Nginx Your Virtual Machine comes with Apache preinstalled and configured. It&amp;apos;s 
what serves up the web page that you see when you visit 
http://hostname.username.koding.io. So before we start Nginx, we have 
to stop Apache with the following command.
sudo service apache2 stop
You can then start your Nginx server by using the following command.
sudo service nginx start
If you now visit your User (or VM) domain at 
http://hostname.username.koding.io, you&amp;apos;ll see a welcome to nginx page 
like the one below. This means your Nginx server is up and running.

  Using ~/Web Your Nginx server is running, but it&amp;apos;s not serving up the files that you expect 
from your ~/Web directory. To do this we need to edit out 
/etc/nginx/sites-available/default file with a Terminal editor such as Nano 
or Vim. In this example we&amp;apos;ll use Nano for simplicity.
Open up your Terminal and run the following command.
sudo nano /etc/nginx/sites-available/default
You&amp;apos;ll see a bunch of green text, similar to the following image. What we&amp;apos;re 
looking to edit is the text root /usr/share/nginx/html, as seen highlighted 
in this image:

Using your arrow keys, navigate to the end of the /usr/share/nginx/html text 
and delete the entire folder name (with your backspace key). Replace it with 
the folder /var/www.
    root /var/www
By doing this, you&amp;apos;re changing the directory of files that nginx is serving by 
default. /var/www is the default Apache dir, and is soft-linked to ~/Web. 
In short, we&amp;apos;re telling Nginx to use what we currently use.
After you&amp;apos;ve made the appropriate edits, use Ctrl-X to close Nano. You&amp;apos;ll be 
prompted with a Y/n question to save the file. Type y. Next you&amp;apos;ll be 
prompted for the filename to save it, press Enter, as the filename field is 
already filled out.
Now all we have to do is restart our web server!
sudo service nginx restart
If you visit your domain again you&amp;apos;ll see the same ~/Web files that you are 
familiar with. You now have an Nginx server up and running, and serving your 
Web files. Enjoy!
</description>
  </item>
  
  <item>
    <title>Installing MongoDB</title>
    <link>//learn.koding.com/guides/install-mongodb</link>
    <pubDate>"2015-04-29T00:00:00.000Z"</pubDate>
    <guid isPermaLink="true">//learn.koding.com/guides/install-mongodb</guid>
    <author>Team Koding</author>
    <description>Before you continue reading this guide why not try a more easy way, using the Koding Package Manager (kpm) and install MongoDB using just one command:
kpm install mongodb

In this short guide we&amp;apos;ll explain how to install MongoDB, and modify
it&amp;apos;s configuration to run in a small storage environment. Lets get
started!
  Installation Installation is easy, and can be done with apt-get, as seen in the
following command.
sudo apt-get install mongodb
That&amp;apos;s it! You can start Mongo with the following command:
sudo service mongodb start
 tipIf you&amp;apos;re running Mongo on a Free Koding VM, read the section below regarding enabling small files...
   Configuring for Limited Storage If you&amp;apos;re running Mongo on a Free VM, you&amp;apos;ll need to configure it to use
small files. To do that, open up the /etc/mongodb.conf file with the
following command:
sudo nano /etc/mongodb.conf
With that file open, navigate to the bottom and add the following line:
smallfiles=true
Now use ctrl-x to save the file. After you&amp;apos;ve saved the file, simply
restart Mongodb with the following command:
sudo service mongodb restart
</description>
  </item>
  
  <item>
    <title>Getting started with Git</title>
    <link>//learn.koding.com/guides/git</link>
    <pubDate>"2015-04-29T00:00:00.000Z"</pubDate>
    <guid isPermaLink="true">//learn.koding.com/guides/git</guid>
    <author>Team Koding</author>
    <description>Git has become an integral part of the modern software development cycle. As per Wikipedia, Git
&amp;quot;is a distributed revision control and source code management (SCM) system with an emphasis on speed. Git was initially designed and developed by Linus Torvalds for Linux kernel development in 2005.&amp;quot;
Several tutorials exist on the Internet that teach you the basics of Git. A simple Google search will reveal many of them. Here&amp;apos;s our favorite from the good folks over at Atlassian.
</description>
  </item>
  
  <item>
    <title>Ghost Blog Installation</title>
    <link>//learn.koding.com/guides/ghost-installation</link>
    <pubDate>"2015-04-29T00:00:00.000Z"</pubDate>
    <guid isPermaLink="true">//learn.koding.com/guides/ghost-installation</guid>
    <author>Team Koding</author>
    <description>In this article we will go over the installation process for the awesome
new blogging software, Ghost. Installation is quick
and easy, and just requires a few configuration edits, making this great
for beginners. So, lets get started!
  What is Ghost? Ghost is an awesome new blog software written with &amp;#x201C;Just Blogging&amp;#x201D; in
mind. Think WordPress without the complexity, bringing blogging back to
it&amp;#x2019;s roots, so to say. This is all well and good, but with any product
that is so new there is always confusion on how to install, develop, and
run it.
So lets try and resolve some of that confusion. Lets go over the simple
process of setting up Ghost on Koding so you can
learn it, toy with it, develop with it, and create your Ghost blog to be
exactly what you want.
  Downloading Ghost We&amp;apos;re going to use the Koding Terminal to download Ghost, so
visit the [Ghost Download][download-page] and look for the download link.
Copy the url.
At the time of writing this guide, the download url is:
https://ghost.org/zip/ghost-0.5.2.zip (This version is likely
outdated, please visit the download page and get the most updated link.)
Now, go to your Terminal and type in the following commands.
mkdir ghost
cd ghost
wget [ghost-zip-url]
Replace [ghost-zip-url] with the full URL of the zip file that you
copied above.
  Unzipping Ghost The download is in zip format, so we need to unzip it. Type in the
following command.
unzip [ghost-zip-name]
  Installing Dependencies Next, we need to install the dependencies.
npm install --production
This step will take a minute or two.
  Edit the config Next up, open up the Ace Editor and double click your ghost
directory to expand it. Right click, and rename, the config.example.js
file to config.js.
On line 36, look for the following section:
        server: {
            // Host to be passed to node&amp;apos;s `net.Server#listen()`
            host: &amp;apos;127.0.0.1&amp;apos;,
            // Port to be passed to node&amp;apos;s `net.Server#listen()`, for
iisnode set this to `process.env.PORT`
            port: &amp;apos;2368&amp;apos;
        },

Replace 127.0.0.1 with 0.0.0.0, and change the Port to whichever
you&amp;apos;d like to use. Save the file with Ctrl-s.
  Starting Ghost Go back to your Terminal and type in the following command to
start your Ghost Blog.
npm start
 tipIf you had previously closed your Terminal, you&amp;apos;ll need to navigate into the ghost directory again, with cd ghost.
   Visiting your Ghost Blog Now open up a new tab and visit your Ghost Blog on your Koding domain at
the following address.
http://hostname.username.koding.io:port
Where username is your Koding username, and port is the port you
chose above.
If you navigate to the following address, you can signup as Admin to your
Ghost installation.
http://hostname.username.koding.io:port/ghost
  Running Ghost on Port 80 If you&amp;apos;d like to run Ghost on the default Port 80, you&amp;apos;ll have to Stop
Apache, and start Ghost with sudo. Here are the commands to do this.
sudo service apache2 stop
sudo npm start
This should be typed from the Ghost installation directory.
And that&amp;apos;s it! You should now have a Ghost installation up and running.
Happy Blogging!
</description>
  </item>
  
  <item>
    <title>Setting up FTP with vsftpd</title>
    <link>//learn.koding.com/guides/setting-up-ftp-with-vsftpd</link>
    <pubDate>"2015-04-29T00:00:00.000Z"</pubDate>
    <guid isPermaLink="true">//learn.koding.com/guides/setting-up-ftp-with-vsftpd</guid>
    <author>Team Koding</author>
    <description>Before you continue reading this guide why not try a more easy way, using the Koding Package Manager (kpm) and install vsftpd using just one command:
kpm install vsftpd

In this guide you&amp;apos;ll go over how to get your FTP Client connected to your VM&amp;apos;s FTP Server using vsftpd. You will be using FileZilla as the FTP Client, but any client should be able to connect to your FTP Server successfully.
  What you will need In this tutorial you will need the following.

A Koding account, and your Koding Username.
The Address of the VM you&amp;apos;d like to connect to. Instructions can be found here.

  Update your software sources Before getting started, make sure you have the latest sources locked down. Type in:
sudo apt-get update
and let the update process complete. It should not require any input.
  Installing vsftpd First off, you&amp;apos;ll need to install vsftpd. This can be done by pasting the following command into your Koding IDE&amp;apos;s Terminal.
sudo apt-get install vsftpd
  Configure vsftpd After the installation is complete open /etc/vsftpd.conf file using this command:
sudo nano /etc/vsftpd.conf
and make changes as follows.
Uncomment the lines below:
write_enable=YES
local_umask=022
Uncomment the following line to prevent access to the other folders outside the Home directory.
chroot_local_user=YES
and add the following line at the end.
allow_writeable_chroot=YES
Add the following lines to enable passive mode.
pasv_enable=Yes
pasv_min_port=40000
pasv_max_port=40100
In order for these changes to take effect restart the vsftpd service using the below command.
sudo service vsftpd restart
  Setting up the FTP User After vsftpd has been successfully installed, you need to set a FTP password for your user. To do
this, paste the following command into your Terminal.
sudo passwd KODING_USERNAME
Make note to replace KODING_USERNAME with your actual Koding username.
After hitting enter, you&amp;apos;ll be prompted for the FTP password you wish to use. Not your Koding password.
  Connecting to your FTP Server Finally, in your FTP Client of choice paste your VM Address into the hostname. If you&amp;apos;re not sure what that is, instructions to find it can be found here.
After the hostname, enter your Koding username, and FTP Password that you chose in the above commands. An example image from FileZilla can be seen below.

  Additional Resources 
FileZilla
FileZilla Download

</description>
  </item>
  
  <item>
    <title>Getting Started with Python</title>
    <link>//learn.koding.com/guides/getting-started-python</link>
    <pubDate>"2015-04-29T00:00:00.000Z"</pubDate>
    <guid isPermaLink="true">//learn.koding.com/guides/getting-started-python</guid>
    <author>Team Koding</author>
    <description>Before you continue reading this guide make sure you have PIP installed. You can use the Koding Package Manager (kpm) and install PIP using just one command:
kpm install pip

In this guide we&amp;apos;ll go over explaining what Python is, how to use Python
Packaging via the PIP command, and how to write your first Python web
server using a small library known as Flask. So, lets get started!
  What is Python Python is a popular, general purpose, high level programing language. It
focuses on readability programmer sanity over raw performance. Python2
and Python3 come pre-installed on Koding VMs, and in this guide we&amp;apos;re
going to focus on Python2. Lets see what it looks like to run some python
code!
  Running your first Python script Open up your Ace Editor create a new file named hello.py. Paste
in the following code into that file.
print &amp;quot;Hello from python!&amp;quot;

The print keyword takes a string and prints it to the Standard Output
(STDOUT) of the process. Lets try running this file so we can see this
output, but first save the file with Ctrl-s.  Now, open up your
Terminal and type in the following command.
python hello.py
You should see output similar to this:
joshmurray: ~ $ python hello.py
Hello from python!
joshmurray: ~ $
Neat! Lets take this a couple steps further, and do something actually
useful, lets run a web server! But first, lets get to know Pip, and
install a library that makes making python Web Applications easy!
  Installing Pip pip is a popular Python Package Manager. However, we need to install it
onto our Koding VM to use it. To do that, we&amp;apos;re going to use AptGet, with
the following command.
sudo apt-get install python-pip
Give that a moment, and once that finishes we can install Flask!
  Using Pip to install Flask You may be wondering why we&amp;apos;re using Flask to write this little web
server of ours. Flask has a really nice API for making compact web
applications.  This is great for a beginner guide, since we can look at a
few core concepts without getting too bogged down with technical details
of a web server.
Now that you have pip installed, to install Flask type the following
command.
sudo pip install Flask
Note that we&amp;apos;re using sudo because the default location for the
installed packages is in a root directory. A common practice to store
these without root permissions is to use a Virtual Environment to keep
your packages installed per-project. We&amp;apos;ll save that for a later guide
though.
Once that finishes installing, lets write our Flask code!
  Creating your first Flask web server Create a new file named web.py, and paste in the following code.
from flask import Flask
app = Flask(__name__)

@app.route(&amp;quot;/&amp;quot;)
def hello():
    return &amp;quot;Hello World!&amp;quot;

if __name__ == &amp;quot;__main__&amp;quot;:
    app.run(host=&amp;apos;0.0.0.0&amp;apos;)

There are a few interesting points in this source though, so before we
run our web server, lets go over the source.
from flask import Flask

First up are our from and import keywords. The import imports a
module to an object with the same name. When used with the from keyword
though, only the Flask object is imported to the current scope. So,
this line imports a function named Flask.
app = Flask(__name__)

Next up, we use that Flask() function to create a Flask instance,
stored in the name app.
__name__ is a special keyword which stores the name of the currently
module, or it equals &amp;quot;__main__&amp;quot; if run directly. We&amp;apos;ll see this again
at the end of the script.
def hello():
    return &amp;quot;Hello World!&amp;quot;

We&amp;apos;re skipping a line, and going straight to the def keyword. This is
how we define a function in Python. In this case, we&amp;apos;re using this
function as a handler for our Flask &amp;quot;route&amp;quot;.
@app.route(&amp;quot;/&amp;quot;)
def hello():
    return &amp;quot;Hello World!&amp;quot;

If we look at that function again, including the line we skipped, we see
a new syntax structure, @app.route(&amp;quot;/&amp;quot;).
This is known as a Decorator. Decorators are a special syntax for a
function wrapping another function. If you&amp;apos;re new to programming, this
can be a bit of a tricky concept which involves Higher Order
Functions. We&amp;apos;ll briefly touch this below, but for now we&amp;apos;ll just
take it at face value. This is how Flask routes our request to our
handler.
A Route is a concept that directs requests (people viewing your web
server) and routes them to your Handler functions. &amp;quot;/&amp;quot; is the path
for this route, meaning that when someone connects to
http://hostname.username.koding.io/ they are given this function.
If someone connected to http://hostname.username.koding.io/foo/bar, it
would not return this handler, because /foo/bar does not match our
hello route.
if __name__ == &amp;quot;__main__&amp;quot;:
    app.run(host=&amp;apos;0.0.0.0&amp;apos;)

Finally we&amp;apos;re at the end of the script. If you remember the __name__
keyword from before, remember that it holds the name of the current
module. If the file is run directly from Python though, ie python
web.py, then the value is &amp;quot;__main__&amp;quot;.
By writing a __name__ == &amp;quot;__main__&amp;quot; condition, we make it so that if
this file is run directly it will start the web server. If the file is
imported though, it will not. This is great because we don&amp;apos;t want
imports to execute a bunch of potentially dangerous code. Good
programming practice.
  Running our Flask web server Now that we have looked at the source, lets run this thing! We can run
this file just like above, with..
python web.py
And then connect to it with the following address.
http://hostname.username.koding.io:5000
Flask will display our text when you request the root path, awesome!
  Decorators Briefly Explained Now that we&amp;apos;ve gone through the web server source, lets revisit the
Decorators and go into a bit more depth. We won&amp;apos;t go over every concept
in full detail, so that we can keep this a sanely short beginner
tutorial, and not a book.
To help explain decorators, lets add our own Decorator.
def from_py(hello):
  def wrapper(*args, **kwargs):
    return hello(*args, **kwargs) + &amp;quot; From Python!&amp;quot;
  return wrapper

@app.route(&amp;quot;/&amp;quot;)
@from_py
def hello():
    return &amp;quot;Hello World!&amp;quot;

Lets analyze this.
from_py is simply a function, that takes another function. When we add
the keyword before of a function def, from_py is called with that
function as the first argument. This &amp;quot;wraps&amp;quot; hello() with our
from_py() function.
Next, we create a new function inside the from_py function that acts as a handler.
The (*args, **kwargs)
parameters is a special syntax to keep all of the given arguments in
those two objects, so that we can fully pass them to the hello()
handler.
In our wrapper function, we then call then hello() function, with
the arguments given to wrapper().
When hello() returns, we add our own string &amp;quot; From Python!&amp;quot;, and
return that as well.
So that means
@app.route(&amp;quot;/&amp;quot;)
@from_py
def hello():
    return &amp;quot;Hello World!&amp;quot;

Is actually many functions, more than three. We could write out the
entire structure here, but just focus on the @from_py for now, as to
avoid being confused by a huge group of nested functions.
If this still doesn&amp;apos;t make sense, don&amp;apos;t worry! Higher order functions can
take some getting used to. Practice them, and make your own, they&amp;apos;re well
worth understanding!
  Python2 vs Python3 Finally, a Python talk is never complete without wrapping everything up
in a big Python2 vs Python3 debate! .. Luckily, we won&amp;apos;t do that here.
If you&amp;apos;re new to Python, and unsure which version to use, it doesn&amp;apos;t
really matter. They&amp;apos;re both quite similar, pick one, and learn it. Once
you learn one, the other version will be easily usable, and you&amp;apos;ll be
able to spot the differences with ease.
Python3 is the eventual future, but it&amp;apos;s taken many years to gain
traction, and will take many more. Choosing which to use can be a hard
decision for seasoned programmers wanting to write large code bases. You
shouldn&amp;apos;t worry about that, currently. Save that for another day :)
This concludes the getting started with Python guide. Thanks for reading!
</description>
  </item>
  
  <item>
    <title>Setting up SFTP on Koding</title>
    <link>//learn.koding.com/guides/setting-up-sftp-on-koding</link>
    <pubDate>"2015-04-29T00:00:00.000Z"</pubDate>
    <guid isPermaLink="true">//learn.koding.com/guides/setting-up-sftp-on-koding</guid>
    <author>Team Koding</author>
    <description>In this guide you&amp;apos;ll go over how to get your SFTP Client connected to your VM&amp;apos;s SFTP Server. You will be using FileZilla as the SFTP Client, but any client should be able to connect to your SFTP Server successfully.
  What you will need In this tutorial you will need the following.

A Koding account, and your Koding Username.
The Address of the VM you&amp;apos;d like to connect to. Instructions can be found here.

  Update your software sources Before getting started, make sure you have the latest sources locked down. Type in:
sudo apt-get update
and let the update process complete. It should not require any input.
  Installing First off, you&amp;apos;ll need to install openssh-server. This can be done by pasting the following command into your Koding IDE&amp;apos;s Terminal.
 tipThe openssh-server package comes preinstalled on all Koding VMs.
 sudo apt-get install openssh-server
  Configure After the install process has finished you&amp;apos;ll need to configure the SFTP server. Start by editing the following file /etc/ssh/sshd_config like so:
sudo nano /etc/ssh/sshd_config
Find the below line:
Subsystem sftp /usr/lib/openssh/sftp-server
and replace it with:
Subsystem sftp internal-sftp
Match group root
ChrootDirectory %h
X11Forwarding no
AllowTcpForwarding no
ForceCommand internal-sftp
finally comment the below line:
#UsePAM yes
After you have performed this steps you&amp;apos;ll need to restart the service using this command:
sudo service ssh restart
  Copy your Public Key Now you need to allow access via ssh. So the first thing you need to do is to, copy your Public Key, usually found in ~/.ssh/id_rsa.pub, and copy it in its entirety. Note the .pub in the filename. This is the public key, and it is very important that you copy this one. It will look something like this.
ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCyhKankDE4DRM86JqZ3JPdWDeqg+Tbzlql
TLfOKTeokhRoMgy5WoMY/ZWUVES3d2vSHHwW3cwWlELmVdc3Ow57boZv3fOsPhybYHVRTClX
Yr1ncSxyTvjvCfvV5q22aIxHPWQ353543ssda87sa+85XEa4VnveJsEzxBZl4oJ4GB0AGa48
+UdIqutrgZu7D7JCK+Yl228X+3bJf3ddlqDaKaVXPivvvYqImK6ZwFsxh2lNO4E8IOd3OSK9
zv6i+io8PxWmwP0tLFokxulAI8Td1sOPBE9s9bdJ5c2T/GfGjKF+aNKsd33TsYEjjc/plMZm
RRrOgQwre6OAkgMvyV2X foo@bar.baz
  Adding to your Authorized Keys Next, we need to create a file called authorized_keys on your Koding VM, and paste the previously copied key into it. Run the following commands in your Koding Terminal.
mkdir -p ~/.ssh
touch ~/.ssh/authorized_keys
Now, open up the authorized_keys file that you just created, and paste in your public key. To open the file you can use a Terminal editor such as Nano or Vim, or simply use the File Explorer on the left hand side to open the ~/.ssh/authorized_keys file.
Once the key has been pasted in, save the file.
  Setting up the SFTP user After the configure process has been completed, You need to set a SFTP password for your user. To do this, paste the following command into your Terminal.
sudo passwd KODING_USERNAME
Make sure to replace KODING_USERNAME with your actual Koding username.
After hitting enter, you&amp;apos;ll be prompted for the SFTP password you wish to use. Not your Koding password.
  Connecting to your SFTP Server Finally, in your SFTP Client of choice paste your VM Address into the hostname. If you&amp;apos;re not sure what that is, instructions to find it can be found here.
After the hostname, enter your Koding username, and SFTP password that you chose in the above commands. An example image from FileZilla can be seen below.
 alertThe default port for a SFTP connection is 22. Make sure to specify this when you input the connection details.
 
  Additional Resources 
FileZilla
FileZilla Download

</description>
  </item>
  
  <item>
    <title>Getting started with the Koding Package Manager</title>
    <link>//learn.koding.com/guides/getting-started-kpm</link>
    <pubDate>"2015-04-29T00:00:00.000Z"</pubDate>
    <guid isPermaLink="true">//learn.koding.com/guides/getting-started-kpm</guid>
    <author>Team Koding</author>
    <description>Koding Package Manager (kpm) is a command line tool that we have set up to make it easy for you to install (and soon remove) your favorite packages like WordPress, Mongodb, Laravel, etc. KPM takes care of measuring disk space requirements, analyzing dependencies and installing all required packages to bring you a running system. It&amp;apos;s the easiest way to get up and running with your favorite technology or package. KPM also replaces the older generation KDApps (most of which were installers).
  Getting started with the Koding Package Manager This guide will cover the basics of the KPM and how to get started with it.
  Usage KPM runs in the Terminal of your Koding account. In order to use KPM you first need to install it. KPM comes pre-installed on Koding VMs and you can easily verify that it is installed by typing in kpm in Terminal. If installed, you should see:
Usage:
    kpm install &amp;lt;name&amp;gt;
    kpm list
    kpm search &amp;lt;name&amp;gt;
    kpm uninstall &amp;lt;name&amp;gt;
    kpm -h | --help
    kpm --version
If you get an error, you can easily install KPM by using the following command in Terminal:
curl -sSL learn.koding.com/kpm.sh | sh

After the process is complete you should have access to the kpm command in your Terminal.
The basic syntax for kpm is as follows. You have access to the following commands:
kpm install &amp;lt;name&amp;gt;
kpm list
kpm search &amp;lt;name&amp;gt;
kpm uninstall &amp;lt;name&amp;gt;
kpm update
kpm -h | --help
kpm --version

The first command kpm install will install a program or a framework from the list of available programs or frameworks.
The second command kpm list will list all available installers that you can currently install on your VM. We keep adding to the list and if you wish, you can contribute as well!
The third command kpm -h or  kpm  --help will show the help for this command. The help command will showcase the syntax and a short version of this guide.
The last command kpm --version will showcase the current version of your local Koding Package Manager.

You also have available an argument for the kpm install command. 
In order to install a framework or program you need to provide the above command with an argument that represents the name of the program / framework that you want to install. For eg.
kpm install &amp;lt;name&amp;gt;
  Available packages Bellow is a list of the current available packages that can be installed using the kpm command.

Codeigniter
Composer
Django
Dropbox
FTP
GruntJS
Laravel
MEAN
MEAN.io stack
Memcached
MeteorJS
MongoDB
mySQL
nginx
noVNC
phpMyAdmin
PIP
Rails
Redis
Apache Tomcat
Ungit
VNC
WordPress

The above list will be updated periodically to include more packages, that you can use on your VM.
KPM is fully extensible so if you want to contribute, you can fork the project on Github and add your own installers for the Koding community!
If we are missing any packages and frameworks that you would like KPM to be able to handle, please let us know via email at support@koding.com.
</description>
  </item>
  
  <item>
    <title>Getting Started with JSP and Maven</title>
    <link>//learn.koding.com/guides/getting-started-jsp-maven</link>
    <pubDate>"2015-04-29T00:00:00.000Z"</pubDate>
    <guid isPermaLink="true">//learn.koding.com/guides/getting-started-jsp-maven</guid>
    <author>Gregory Mihalik</author>
    <description>In this guide we&amp;apos;ll take a look on how to set up and deploy a JavaServer Pages (JSP) website using Maven and Tomcat on your Koding VM. 
This tutorial assumes you have updated your OS and 
set up an Apache Tomcat Server by following this tutorial.
  What is JSP JavaServer Pages (JSP) are used to create dynamic web pages of HTML or XML by using embedded Java and/or Java backend. 
JSP is known for its rapid development and ease of maintenance. JSP separates the UI of an application from
content generation, which allows designers and developers to work together without changes affecting each other. JSP covers the &amp;quot;V&amp;quot; in the Model-View-Controller (MVC) architecture. 
  What is Maven Maven is a software project management tool based on the concept of a Project Object Model (POM) that can be used for building and managing any java-based project. 
By using a POM, Maven is able to manage a projects build, reporting, and documentation from a central piece of information.
  Installing Maven First check and see if you have Maven installed with the following command in the terminal:
mvn -v
If you have a new VM then chances are you do not have Maven installed. If you see the following message you have Maven installed and can skip over the next step for Maven Installation. The message below contains which version of Maven and Java you are using as well as the directory for Maven and Java.
Apache Maven 3.0.5
Maven home: /usr/share/maven
Java version: 1.7.0_65, vendor: Oracle Corporation
Java home: /usr/lib/jvm/java-7-openjdk-amd64/jre
Default locale: en_US, platform encoding: ANSI_X3.4-1968
OS name: &amp;quot;linux&amp;quot;, version: &amp;quot;3.13.0-29-generic&amp;quot;, arch: &amp;quot;amd64&amp;quot;, family: &amp;quot;unix&amp;quot;
To install the latest version of Maven type the following:
sudo apt-get install maven
Next navigate the directories into your Apache Tomcat server to the webapps folder.
cd Documents/tomcat/webapps
Now we will create a Maven project using the Maven project generator with the following command structure. 
mvn archetype:generate -DgroupId=com.[package name] -DartifactId=[web app name] -DarchetypeArtifactId=maven-archetype-webapp -DinteractiveMode=false
You need to fill in the following: the GroupId (package name), the artifactId (project name).
The archetypeArtifactId is the type of project that Maven will create. Use &amp;quot;maven-archetype-webapp&amp;quot; to create a web app.
The following is an example:
mvn archetype:generate -DgroupId=com.mihalik -DartifactId=myWebApp -DarchetypeArtifactId=maven-archetype-webapp -DinteractiveMode=false
Move into the project folder:
cd myWebApp
Use the Maven command to package the project which will install dependencies and prepare the project.
mvn package
Use the Maven command tomcat:run in order to run 
mvn tomcat:run
In your browser type in the following URL to point to your webapp.
http://[hostname].[username].koding.io:8080/[web-app-name]/
If everything worked correctly you should see &amp;quot;Hello world&amp;quot;. If you did, Congrats! You have setup and deployed your first web app using JSP and Maven.
If you did not, please review the instructions and see if you missed anything.
To further understand the structure of your Maven/JSP project, navigate to 
cd Documents/tomcat/webapps/myWebApp/src/main/webapp/resources/index.jsp
on the tomcat web-server.
In this file you will see basic HTML markup with the message &amp;quot;Hello World!&amp;quot;. 
You can change this message and refresh your webpage in your browser and see the changes you made.
&amp;lt;html&amp;gt;
    &amp;lt;body&amp;gt;
      &amp;lt;h1&amp;gt;Hello, the time &amp;amp; date is now: &amp;lt;%= new java.util.Date() %&amp;gt;&amp;lt;/h1&amp;gt;
    &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
In the above example you can see Java code wrapped in the tags &amp;lt;%= [code] %&amp;gt;, this is a JSP expression. A JSP expression will output the result of Java code into the web page. 
Scriptlets, denoted with &amp;lt;% [code] %&amp;gt; tags are useful in adding Java code to your web page. Scriptlets are useful for initializing variables, manipulating data, or adding statements/loops to control the content of the web page.
  &amp;lt;h2&amp;gt;
    Hello! using a scriptlet 1 + 1 = 
    &amp;lt;%
      // This is a scriptlet
      int a = 1;
      int b = 1;
      out.println( a + b); // This code will output the result of a + b to the HTML output.
    %&amp;gt;
  &amp;lt;/h2&amp;gt;
The following example is a great way to dynamically load content that you may receive from a database call. Rather than writing out a line for every result (which we may not know how many results we are going to receive) we can write the code for the table once and iterate over data or some other parameter to output the rows for the table dynamically.
&amp;lt;TABLE BORDER=2&amp;gt;
  &amp;lt;%
  int n = 4;
      for ( int i = 0; i &amp;lt; n; i++ ) {
          %&amp;gt;
          &amp;lt;TR&amp;gt;
          &amp;lt;TD&amp;gt;Number&amp;lt;/TD&amp;gt;
          &amp;lt;TD&amp;gt;&amp;lt;%= i+1 %&amp;gt;&amp;lt;/TD&amp;gt;
          &amp;lt;/TR&amp;gt;
          &amp;lt;%
      }
  %&amp;gt;
&amp;lt;/TABLE&amp;gt;
Congrats! You have made a simple web app using Java (JSP), Maven, Tomcat, and your Koding VM. JSP is a great primer for simple web apps and a great introduction into learning about the Java Web tier.
The Java web tier development has moved towards utilizing Facelets over JSP for creating views since Java EE 6, but JSP is still utilized in programs today. 
Good luck with your further Java web development and happy coding! 
</description>
  </item>
  
  <item>
    <title>Getting Started with ExpressJS</title>
    <link>//learn.koding.com/guides/getting-started-expressjs</link>
    <pubDate>"2015-04-29T00:00:00.000Z"</pubDate>
    <guid isPermaLink="true">//learn.koding.com/guides/getting-started-expressjs</guid>
    <author>Team Koding</author>
    <description>In this guide we will go over basic usage of the NodeJS web framework,
ExpressJS. If you are not familiar with NodeJS, please review the
Getting Started with NodeJS guide. Lets get
started!
  Installing First, make a directory to follow along with this tutorial, and work from
in that directory. Next, we&amp;apos;re going to install Express with the
following command.
npm install express
If you already have a package.json file for your project, you can add
the --save flag and Express will be added as a project dependency. In
this example we&amp;apos;re going to ignore dependencies for simplicity.
You&amp;apos;ll notice a new directory is created named node_modules. This is
where the local installations of your packages are stored. When you
import them, such as with require(&amp;apos;express&amp;apos;), they are loaded from this
directory.
  Hello World and Routes Copy the following code into a file named app.js. Remember that at
anytime you can run your server with node app.js.
var express = require(&amp;apos;express&amp;apos;);
var app     = express();

app.get(&amp;apos;/&amp;apos;, function(req, res){
  res.send(&amp;apos;Hello World, From /&amp;apos;);
});
app.get(&amp;apos;/:name&amp;apos;, function(req, res){
  res.send(&amp;apos;Hello &amp;apos;+ req.params.name);
});

var server = app.listen(3000, &amp;apos;0.0.0.0&amp;apos;, function() {
  console.log(&amp;apos;Listening on port %d&amp;apos;, server.address().port);
});

Lets go over each section real quick.
app.get(&amp;apos;/&amp;apos;, function(req, res){
  res.send(&amp;apos;Hello World, From /&amp;apos;);
});
app.get(&amp;apos;/:name&amp;apos;, function(req, res){
  res.send(&amp;apos;Hello &amp;apos;+ req.params.name);
});

The app.get() method takes a Route (string or regex) to listen to
requests on. If a user visits http://hostname.username.koding.io/, they
are greeted with Hello World, From /.
If someone visits http://hostname.username.koding.io/john, they are
greeted with Hello john. :name is a URL parameter, which is sort of
like a wildcard for that section of the URL. Respond to the request with
the parameter by using the name of the parameter on the req.params
object.
var server = app.listen(3000, &amp;apos;0.0.0.0&amp;apos;, function() {
  console.log(&amp;apos;Listening on port %d&amp;apos;, server.address().port);
});

This final call simply starts the web server on 0.0.0.0:3000.
  Middleware We saw how to run a simple server, with a couple routes, now lets add a
bit of middleware.
Middleware is a concept of a function which is called in the middle of
the request cycle. It&amp;apos;s useful for rejecting non-authorized users to many
routes, logging, or just about anything. Middleware is pretty awesome.
Lets add our own middleware to simply log all requests to the console,
and another to log all /:name requests from above.
app.use(function(req, res, next) {
  console.log(&amp;apos;[&amp;apos;+ new Date() +&amp;apos;] &amp;apos;, req.path);
  next();
});

var logName = function(req, res, next) {
  console.log(&amp;apos;Request to &amp;apos;+ req.params.name);
  next();
}

We&amp;apos;ve defined two middleware functions above. Our logging function is
first, and we immediately pass it to app.use(). Every request that this
express application receives will first go through this logging function.
The logging function just logs the date time, and the path of the
request. Note the next() callback, that tells Express that this
middleware is done, and the next one can be called.
Our second middleware, logName, is not being used yet. Why? Well, we
only want to use this for our /:name route, because it&amp;apos;s supposed to
log names. How can we achieve this though? Lets take a look at our
/:name route, with the middleware added.
app.get(&amp;apos;/:name&amp;apos;, logName, function(req, res){
  res.send(&amp;apos;Hello &amp;apos;+ req.params.name);
});

By adding this middleware to our route, every request to /:name will
first pass through our logName function, and then the final anonymous
function to handle the full response.
Lets look at the full code at this state.
var express = require(&amp;apos;express&amp;apos;);
var app     = express();

app.use(function(req, res, next) {
  console.log(&amp;apos;[&amp;apos;+ new Date() +&amp;apos;] &amp;apos;, req.path);
  next();
});

var logName = function(req, res, next) {
  console.log(&amp;apos;Request to &amp;apos;+ req.params.name);
  next();
}

app.get(&amp;apos;/&amp;apos;, function(req, res){
  res.send(&amp;apos;Hello World, From /&amp;apos;);
});
app.get(&amp;apos;/:name&amp;apos;, logName, function(req, res){
  res.send(&amp;apos;Hello &amp;apos;+ req.params.name);
});

var server = app.listen(3000, &amp;apos;0.0.0.0&amp;apos;, function() {
  console.log(&amp;apos;Listening on port %d&amp;apos;, server.address().port);
});

 alertIt&amp;apos;s important to remember that order of execution matters! If we define a piece of middleware after a route, requests to that route will not run through that middleware. In the above example, the very first thing we do is declare our app.use() middleware, and in the /:name middleware we use the logName function before our handler.
   Adding Templates Now we&amp;apos;re getting a hang of routes and middleware, lets complete the step
and add in a template. Add the following code to the top of your app.js
file.
app.set(&amp;apos;view engine&amp;apos;, &amp;apos;jade&amp;apos;);
app.set(&amp;apos;views&amp;apos;, __dirname + &amp;apos;/views&amp;apos;);

app.set() is used to configure this app instance. In this case, we set
a couple templating settings of Express, to use the Jade templating
language from the ./views directory.
Next, create a directory named views, and add the following code to a
file named index.jade
doctype
html
  head
    title Hello #{name}
  body
    h1 Hello #{name}

We won&amp;apos;t go over the Jade language here, but in short #{name} is a
variable which is being passed to this template when we render it. If
you&amp;apos;re paying attention, you&amp;apos;ll notice that we have yet to actually
render a template in our requests. Lets add the above template to our
/:name handler!
app.get(&amp;apos;/:name&amp;apos;, logName, function(req, res){
  res.render(&amp;apos;index&amp;apos;, {name: req.params.name});
});

In our /:name handler, we&amp;apos;ve replaced the res.send() call with
res.render(). This loads our index.jade template and renders it, with
the object we&amp;apos;re passing in as data. The name property of that object
is accessible from the jade template!
  The final product Lets take one final look at all of this app.js code together.
var express = require(&amp;apos;express&amp;apos;);
var app     = express();

// Set our view engine to Jade, and the view directory
app.set(&amp;apos;view engine&amp;apos;, &amp;apos;jade&amp;apos;);
app.set(&amp;apos;views&amp;apos;, __dirname + &amp;apos;/views&amp;apos;);

// Enable our custom Logging middleware
app.use(function(req, res, next) {
  console.log(&amp;apos;[&amp;apos;+ new Date() +&amp;apos;] &amp;apos;, req.path);
  next();
});

// Our logName middleware, which can be used in any route we want.
var logName = function(req, res, next) {
  console.log(&amp;apos;Request to &amp;apos;+ req.params.name);
  next();
}

// Our two routes and handlers
app.get(&amp;apos;/&amp;apos;, function(req, res){
  res.send(&amp;apos;Hello World, From /&amp;apos;);
});
app.get(&amp;apos;/:name&amp;apos;, logName, function(req, res){
  res.render(&amp;apos;index&amp;apos;, {name: req.params.name});
});

// Finally, start our web server.
var server = app.listen(3000, &amp;apos;0.0.0.0&amp;apos;, function() {
  console.log(&amp;apos;Listening on port %d&amp;apos;, server.address().port);
});

Run the above code with node app.js, and visit
http://hostname.username.koding.io/Josh
And you&amp;apos;ll see an html page, rendered from your awesome new Express app!
And that&amp;apos;s it! We&amp;apos;ve gone through what express is, how to set it up,
routes, middleware, and finally templates. Thanks for reading!
</description>
  </item>
  
  <item>
    <title>Getting started with Drupal 8 (Prerelease)</title>
    <link>//learn.koding.com/guides/getting-started-drupal8-beta</link>
    <pubDate>"2015-04-29T00:00:00.000Z"</pubDate>
    <guid isPermaLink="true">//learn.koding.com/guides/getting-started-drupal8-beta</guid>
    <author>Nik LePage</author>
    <description>A quick rundown of how to setup a development environment for checking out the new Drupal 8 releases.
  Setting up the development environment Go ahead and open up the Koding dev UI. The terminal is available in the bottom right panel. (I&amp;apos;m assuming you&amp;#x2019;re in ~/Web for the actual site install bits).
We must first install Composer as we need Drush master (7) to easily install Drupal 8. You wanted Drush anyway though, right? :)
Issue the following commands to perform the install and tidy up.
sudo curl -sS https://getcomposer.org/installer | php
sudo mv composer.phar /usr/local/bin/composer
The last step is not required AFAIK, but makes Composer global for the machine. The instructions that I read said &amp;#x201C;Make sure Composer&amp;apos;s global bin directory is on the system PATH (recommended)&amp;#x201D;. That&amp;#x2019;s great, although I don&amp;#x2019;t fully understand the implications.
Issue the following commands in your shell to sort the path out.
sed -i &amp;apos;1i export PATH=&amp;quot;$HOME/.composer/vendor/bin:$PATH&amp;quot;&amp;apos; $HOME/.bashrc
source $HOME/.bashrc
Now we can go ahead and use Composer to install drush 7. More long winded than &amp;quot;the old days&amp;quot;, but get used to it. Everything is Composer in D8. &amp;quot;So Compose; much baton (sic).&amp;quot;
composer global require drush/drush:dev-master
Test the install with a random &amp;#x201C;drush&amp;#x201D; command in the shell... e.g.
drush --version
As it turns out, we also need to enable mod_rewrite, although this appears to be set up by default in the new Koding. In order to do so, you can type the following command.
sudo a2enmod rewrite
MySQL is not installed by default in the new Koding setup. We need to add MariaDB, and the necessary PHP extensions.
# Follow the instructions at https://downloads.mariadb.org/mariadb/repositories/#mirror=coreix
# Select &amp;quot;Ubuntu&amp;quot;, &amp;quot;14.04&amp;quot;, &amp;quot;5.5&amp;quot; and then a mirror, and the instructions are below
sudo apt-get install php5-mysql php5-gd
One more gotcha - D8 requires (or prefers) curl?! Well, okay.
sudo apt-get install php5-curl
Restart the web server to enable all the new goodness!
sudo service apache2 restart
  Setting up the Drupal environment Now we&amp;#x2019;re ready to rock! The rest of this is a pretty standard Drupal setup mission, but here&amp;apos;s the outline anyway. Go setup yourself up a new database by entering MySql CLI (Koding mysql automatically assumes root) and issue the following commands.
mysql -u root -p  # to get into the CLI, then...

CREATE DATABASE drupal8db;
GRANT ALL PRIVILEGES ON drupal8db.* TO myusername@localhost IDENTIFIED BY &amp;apos;mypassword&amp;apos;;
FLUSH privileges;
You probably (almost certainly) don&amp;#x2019;t want to use your root password again in case you&amp;#x2019;re going to be using the included shared environments that Koding provides.
Now cd ~/Web and install Drupal 8.
Choose a version: drush dl drupal-8 (this may give you a choice of versions)
OR Definitely :) get Drupal 8 Beta 1: wget http://ftp.drupal.org/files/projects/drupal-8.0.0-beta1.tar.gz (see: https://www.drupal.org/node/2348025 )
Unpack the tarball with tar zxf drupal-8-whatever.tgz
Alter the dir name if it bothers you or you need a reminder of which version you&amp;#x2019;re using.
mv drupal-8-whatever mydrupaldir
I&amp;apos;m assuming a subdirectory from here on - which means you should set the RewriteBase in .htaccess
RewriteBase /mydrupaldir  # in .htaccess in ~/Web/mydrupaldir
Save yourself a few seconds by doing the usual copying of settings.php and set permissions malarky.
cd mydrupaldir
cd sites/default
# for developers only (sets up some dev mode settings, do this before install!)
cp ../example.settings.local.php ./settings.local.php
# for everyone
cp default.settings.php settings.php
cp default.services.yml services.yml
chmod 0666 settings.php services.yml
mkdir files
sudo chown myuser:www-data files # NB this is server/user specific!
chmod 0775 files
 alertYou need to change these permissions back to something more sane afterwards&amp;#x2026; 0644 and 0775 seem to be ok, but I&amp;#x2019;m open to abuse on the matter.)
 And you&amp;#x2019;re off! To open your VM in a browser, click the ellipsis next to your VM name (probably koding-vm-0) and then the VM name to open the site in a new tab, and follow the usual Drupal installer instructions! NB If you&amp;apos;re a developer, you might want to check out Webchick&amp;apos;s setup video from Drupalcon AMS: http://www.youtube.com/watch?v=wKdU2Q1NIZQ
</description>
  </item>
  
  <item>
    <title>Using SSH on a Chromebook to connect to your Koding VM</title>
    <link>//learn.koding.com/guides/ssh-chromebook</link>
    <pubDate>"2015-04-29T00:00:00.000Z"</pubDate>
    <guid isPermaLink="true">//learn.koding.com/guides/ssh-chromebook</guid>
    <author>Team Koding</author>
    <description>In this guide, we will cover how to set up ssh on your Chromebook. There are
two ways you can use SSH on a Chromebook. You can either install Google&amp;apos;s SSH
Chrome extention
or use the native SSH client that is built into the Chrome OS. For the purposes
of this guide, we will use the native SSH client method as it does not
require the installation of any new software.
  Step 1: Verify you have crosh installed Before beginning, make sure that you have a newer build of Chrome OS (build 32 or above)
and that your particular build supports the built in crosh shell which contains
the SSH client that we will use. To check, press ctrl-alt-T on your keyboard
and you should be greeted with a screen similar to the one below.

If you do not get the above screen, chances are high that you either have an older
build of Chrome OS or that your device manufacturer has opted to remove crosh from
their customd build of the Chrome OS.
  Step 2: Generate the required ssh private and public keys on your VM  tipIf you already have a private and public key generated, you can
skip the section below
 Open up Terminal on your Koding VM and type in the following command:
ssh-keygen
You will be presented with a few choices, accept all defaults until
you end up with something like this:
Generating public/private rsa key pair.
Enter file in which to save the key (/home/your_username/.ssh/id_rsa):
Created directory &amp;apos;/home/your_username/.ssh&amp;apos;.
Enter passphrase (empty for no passphrase):
Enter same passphrase again:
Your identification has been saved in /home/your_username/.ssh/id_rsa.
Your public key has been saved in /home/your_username/.ssh/id_rsa.pub.
The key fingerprint is:
7a:36:29:6d:9d:5c:45:5a:8b:53:c0:1a:61:29:3f:ce your_username@your_username
The key&amp;apos;s randomart image is:
+--[ RSA 2048]----+
|          o+..+  |
|        ..o .* . |
|         o o+ o  |
|          +  o   |
|        So ..    |
|       o +Eo     |
|      o B +      |
|       = .       |
|                 |
+-----------------+
  Step 3: Copy the generated public key to authotized_keys file on your VM Doing this allows your Chromebook to be recognized as a valid host (once we copy
over the private keys, which is the next step).
Create an authorized_keys file (if it does not exist)
touch ~/.ssh/authorized_keys
Copy the public key into it.
cat ~/.ssh/id_rsa.pub &amp;gt;&amp;gt; ~/.ssh/authorized_keys
  Step 4: Moving the generated private key to your Chromebook To achieve this, we will first copy over the private key to
our Web folder so that we can download it over the browser.
 alertAfter downloading the private key you should immediately
delete if from your Web folder. This is not the most secure way
of copying over your file but is the easiest. If you prefer, you
can also upload the file to your Google Drive account and then
download it your Chromebook.
 Copy the private key to your Web folder:
cp ~/.ssh/id_rsa ~/Web/.
chmod 655 ~/Web/id_rsa
Now hop over to your Chromebook and type in the Web URL of your VM to
download this file. The Web URL of your VM usually is:
yourusername.koding.io/id_rsa

Make sure you have the file without the .txt extension. You can check/rename
the file by using the Files app on your Chromebook (as seen in the screenshot
below).

As soon as the file is downloaded on your Chromebook, delete it from
the Web folder of your VM
rm ~/Web/id_rsa
At this point, you now have the generated private key on your Chromebook
and are ready to connect.
Press ctrl-alt-T to bring up crosh and then on the crosh shell, type ssh
Use the following commands to set up ssh:
host = your_koding_username.koding.io
user = your_koding_username
key = id_rsa

Once you press enter, you should be dropped into your Koding VM!

</description>
  </item>
  
  <item>
    <title>Getting Started with C and C++</title>
    <link>//learn.koding.com/guides/getting-started-c-cpp</link>
    <pubDate>"2015-04-29T00:00:00.000Z"</pubDate>
    <guid isPermaLink="true">//learn.koding.com/guides/getting-started-c-cpp</guid>
    <author>drodri</author>
    <description>In this guide we&amp;apos;ll introducing C and C++ and how to build your first programs
in Koding.
C and C++ are the reference languages in many domains, from heavy computations,
research, robotics, embedded systems, financing and banking...
They are compiled languages, you write source code and a compiler translate it to
native binaries, that typically can run only in the platform they were compiled to
(Win, Linux, Mac). The process of converting source code to executable binaries,
that involve compiling and linking is called the build process. This process can
be specified by different means, e.g. using an IDE or Makefiles.
  Running your first C program Lets create our first &amp;quot;Hello world&amp;quot; C application, and build it.
Open up your Ace editor, and open up a new file by pressing the Plus Button on the
tab list. If your file says Untitled.txt, you&amp;apos;re good to go.
Next, paste the following code into the file.
#include &amp;lt;stdio.h&amp;gt;

void main(){
    printf(&amp;quot;Hello world\n&amp;quot;);
}
We haven&amp;apos;t saved our file yet , so use Ctrl-S to save the file,
and name it main.c (note the extension c, not cpp).
Finally, open up the Koding Terminal
and build and run your application.
$ gcc -o hello main.c
$ ./hello
Hello world
  Running your first C++ program Create another file, this time named &amp;quot;main.cpp&amp;quot; with the following code:
#include &amp;lt;iostream&amp;gt;

using namespace std;

int main(){
    cout &amp;lt;&amp;lt; &amp;quot;Hello World&amp;quot; &amp;lt;&amp;lt; endl;
    return 0;
}
Now we will build it with the g++ compiler, and run it. Please note that
even if they are similar, C++ is not an &amp;quot;extension&amp;quot; of C or C with classes but
a very different language by itself.
$ g++ -o hellopp main.cpp
$ ./hellopp
Hello world
Building larger applications can be somewhat difficult and cumbersome to the newbie.
As soon as your application start to have several files, you will need to define
how to build them in Makefiles, but we would rather recommend using the CMake build system,
which is much simpler and fully portable to Windows and Mac platforms, with support
for many compilers, as Visual Studio, and IDEs as Eclipse.
The Biicode platform automatically generate CMake files for you, based on
your source code files. It also manage dependencies, so it can be used for reusing
existing code easily.
</description>
  </item>
  
  <item>
    <title>Connect with SSH, from Unix</title>
    <link>//learn.koding.com/guides/ssh-into-your-vm</link>
    <pubDate>"2015-04-29T00:00:00.000Z"</pubDate>
    <guid isPermaLink="true">//learn.koding.com/guides/ssh-into-your-vm</guid>
    <author>Team Koding</author>
    <description>Connecting to your VM with SSH will allow you to use another Terminal,
outside of Koding, to interact with your Koding VM. If you&amp;apos;re using
Cygwin, these instructions will work fine for you.
We are going to use the terminology &amp;quot;local&amp;quot; to represent the machine that
you&amp;apos;re connecting to Koding with.
  What you will need 
Your Koding username
Your Koding VM Address
An SSH Key on your local machine. If you don&amp;apos;t have a key, Github has
an awesome tutorial found here.

  Copy your Public Key First, copy your Public Key, usually found in ~/.ssh/id_rsa.pub, and
copy it in its entirety. Note the .pub in the filename. This is the
public key, and it is very important that you copy this one. It will
look something like this.
ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCyhKankDE4DRM86JqZ3JPdWDeqg+Tbzlql
TLfOKTeokhRoMgy5WoMY/ZWUVES3d2vSHHwW3cwWlELmVdc3Ow57boZv3fOsPhybYHVRTClX
Yr1ncSxyTvjvCfvV5q22aIxHPWQ353543ssda87sa+85XEa4VnveJsEzxBZl4oJ4GB0AGa48
+UdIqutrgZu7D7JCK+Yl228X+3bJf3ddlqDaKaVXPivvvYqImK6ZwFsxh2lNO4E8IOd3OSK9
zv6i+io8PxWmwP0tLFokxulAI8Td1sOPBE9s9bdJ5c2T/GfGjKF+aNKsd33TsYEjjc/plMZm
RRrOgQwre6OAkgMvyV2X foo@bar.baz
  Adding to your Authorized Keys Next, we need to create a file called authorized_keys on your Koding
VM, and paste the previously copied key into it. Run the following
commands in your Koding Terminal.
mkdir -p ~/.ssh
touch ~/.ssh/authorized_keys
Now, open up the authorized_keys file that you just created, and paste
in your public key. To open the file you can use a Terminal editor such
as Nano or Vim, or simply use the File Explorer on the left hand side to
open the ~/.ssh/authorized_keys file.
Once the key has been pasted in, save the file.
 alertMake sure that the key you have pasted is one long line and that there are not line breaks anywhere. If there are line breaks in the file, your ssh connection will fail.
   Connecting with SSH Lastly, open up your local Terminal client and ssh to your VM Address as
shown below. If you do not know your VM Address, instructions to find it
can be found here.
ssh username@vmaddress
Replace username with your username, and vmaddress with your VM
Address. As an example, here is a filled our ssh command.
ssh joshmurray@unkk05c3f84e.joshmurray.koding.io
  Deleting a key If you no longer wish to authorize an existing key from connecting to your
VM, simply delete that key from your authorized_keys file. This can be
easily achieved by opening up the ~/.ssh/authorized_keys file in your
favorite editor (e.g. nano or vi) and deleting the one line that contains
the key for which you wish to remove access.
 tipEven though a key may span across multiple lines in your editor, it&amp;apos;s
usually just one long line. Make sure you delete the entire line and
not leave any parts behind. Also, be careful not to accidentally delete
parts of another key.
   Troubleshooting If you experience trouble, try connecting to your VM with the -vv flag
and share the output with Koding users. An example of the above ssh
command with the -vv flag is below.
ssh -vv joshmurray@unkk05c3f84e.joshmurray.koding.io
</description>
  </item>
  
  <item>
    <title>Koding Terminal Introduction</title>
    <link>//learn.koding.com/guides/terminal-introduction</link>
    <pubDate>"2015-04-29T00:00:00.000Z"</pubDate>
    <guid isPermaLink="true">//learn.koding.com/guides/terminal-introduction</guid>
    <author>Team Koding</author>
    <description>In this guide we&amp;apos;ll go over the Koding Terminal. We&amp;apos;ll try to explain how it works, how to use it and in end share some useful tips that you can use to be more productive.
  Getting started To access a Koding Terminal, select your Virtual Machine on the left hand side as pictured bellow.

 alertIf you have a Developer or Professional account then select the VM you want to start, from the list.
 Then click on the Turn it on button in the modal.

After the VM has started, you&amp;apos;ll see your Koding IDE.
 tipThe IDE will remember what files / tabs you had opened last time and the FileTree will remember the folder location.
 By default after your VM is started, you will see a Terminal prompt in the lower right portion of your Integrated Development Environment (IDE).
  Usage With the Terminal, you are able to run commands on your Ubuntu Linux VM. All programs and languages are supported, and you have full sudo access, so you can customize your VM however you want.
 tipsudo is a program for Unix-like computer operating systems that allows users to run programs with the security privileges of another user (normally the superuser, or root).
 The Terminal itself is fast and responsive. Vim, Nano, Tmux and anything else you throw at it, will work right out of the box.
By clicking the plus button next to the Terminal tab, you are able to create multiple Terminal sessions that are basically multiple Terminals where you can run commands separately.

 tipTerminal sessions are remembered when turning the VM on again.
 Because the Terminal is in a tab in the IDE you can also split, merge splits, and even make the terminals fullscreen.
  Tips The Koding Terminal comes preinstalled with some useful programms that can be run using these commands.

fish - is a smart and user-friendly command line shell for OS X, Linux.
mc - Midnight Commander is a powerful file manager. GNU Midnight Commander is a text-mode full-screen file manager.
vi - is a highly configurable text editor built to enable efficient text editing.
nano - text editor for the command line.
emacs - GNU Emacs is an extensible, customizable text editor.

Bellow you can read more about some other useful commands that you can use in your Koding Terminal.

sudo - most of the bellow commands will need to be prefaced with the sudo command. This elevates privileges to the root-user administrative level temporarily, which is necessary when working with directories or files not owned by your user account.

  File &amp;amp; Directory Commands The tilde (~) symbol stands for your home directory. If you are user, then the tilde (~) stands for /home/user

pwd - The pwd command will allow you to know in which directory you&amp;apos;re located. A useful gnemonic is &amp;quot;present working directory.&amp;quot;
ls - The ls command will show you (&amp;apos;list&amp;apos;) the files in your current directory.
cd - The cd command will allow you to change directories. Eg. to navigate into the root directory, use cd /.
cp - The cp command will make a copy of a file for you. Example: &amp;quot;cp file foo&amp;quot; will make an exact copy of &amp;quot;file&amp;quot; and name it &amp;quot;foo&amp;quot;, but the file &amp;quot;file&amp;quot; will still be there.
mv - The mv command will move a file to a different location or will rename a file. Examples are as follows: &amp;quot;mv file foo&amp;quot; will rename the file &amp;quot;file&amp;quot; to &amp;quot;foo&amp;quot;.
rm - Use this command to remove or delete a file in your directory.
rmdir - The rmdir command will delete an empty directory. To delete a directory and all of its contents recursively, use rm -r.
mkdir - The mkdir command will allow you to create directories. Example: &amp;quot;mkdir demo&amp;quot; will create a directory called &amp;quot;demo&amp;quot;.
man- The man command is used to show you the manual of other commands.

  System Information Commands 
df - The df command displays filesystem disk space usage for all mounted partitions. &amp;quot;df -h&amp;quot; is probably the most useful - it uses megabytes (M) and gigabytes (G) instead of blocks to report. (-h means &amp;quot;human-readable&amp;quot;)
du - The du command displays the disk usage for a directory.
free The free command displays the amount of free and used memory in the system. &amp;quot;free -m&amp;quot; will give the information using megabytes.
top - The top command displays information on your Linux system, running processes and system resources, including CPU, RAM &amp;amp; swap usage and total number of tasks being run. To exit top, press &amp;quot;q&amp;quot;.
uname -a - The uname command with the -a option prints all system information, including machine name, kernel name &amp;amp; version, and a few other details.
lsb_release -a - The lsb_release command with the -a option prints version information for the Linux release you&amp;apos;re running.
ifconfig - reports the systems network interfaces.

The Koding Terminal is an essential component for development, right in your browser.
Explore it today and if you ever need help with the Terminal you can just click on the bottom right corner question mark icon and the support modal will pop-up or email us at support@koding.com and we&amp;apos;ll gladly help.
</description>
  </item>
  
  <item>
    <title>General .htaccess</title>
    <link>//learn.koding.com/guides/general-htaccess</link>
    <pubDate>"2015-04-29T00:00:00.000Z"</pubDate>
    <guid isPermaLink="true">//learn.koding.com/guides/general-htaccess</guid>
    <author>Team Koding</author>
    <description>Htaccess is a pretty well understood and standard feature among web hosts. Koding&amp;apos;s .htaccess is no different than any other, so the plethora of tutorials and information out there will work perfectly fine on Koding.
  RewriteEngine &amp;amp; mod_rewrite For the sake of discussion, lets say I have two Koding domains 
http://username.koding.io and http://my.name.is.username.koding.io.
How would I forward the first to the second?
Htaccess makes this pretty simple. Create a .htaccess file in your Web directory, if you don&amp;apos;t already have one, 
touch ~/Web/.htaccess &amp;amp;&amp;amp; chmod 644 ~/Web/.htaccess
and add the following RewriteRule:
RewriteEngine On RewriteCond %{HTTP_HOST} ^username.koding.io [NC] 
RewriteRule ^(.*) http://my.name.is.username.koding.io/$1 [R=301]
But wait, if we go to http://username.koding.io now we are presented with the following error:
Internal Server Error

The server encountered an internal error or misconfiguration and was unable to complete your request.

Please contact the server administrator, webmaster@localhost and inform them of the time the error occurred, and anything you might have done that may have caused the error.

More information about this error may be available in the server error log.
The reason for this is that mod_rewrite is not enabled by default. The fix for this is insanely easy, run the following command:
sudo a2enmod rewrite &amp;amp;&amp;amp; sudo service apache2 restart
This uses the command a2enmod to enable mod_rewrite, and then restarts 
apache. Now if we go to http://username.koding.io we are redirected to 
http://my.name.is.username.koding.io. Yay!
</description>
  </item>
  
  <item>
    <title>Understanding the VM settings modal</title>
    <link>//learn.koding.com/guides/understanding-vm-panel</link>
    <pubDate>"2015-04-29T00:00:00.000Z"</pubDate>
    <guid isPermaLink="true">//learn.koding.com/guides/understanding-vm-panel</guid>
    <author>Team Koding</author>
    <description>  Understanding the VM settings modal This guide will explain the basics of the VM settings modal.

In order to open the VM settings modal you need to hover over the VM name on the right side of Koding (in the sidebar at the top) and then click on the three points icon that appears on the right of the VM label. (as seen in the image above)

After you click on the icon mentioned above the VM modal should open, which should look like the one pictured above. The VM settings are mostly self explanatory but we will outline them here for clarity. The VM settings modal has three main sections: the Basic section, the More section and the Advanced section.
  General Tab The general tab houses the basic settings about your VM. These are:

On/Off: This toggle will switch your VM&amp;apos;s state between on/off. We recommend using this to turn off your VM as compared to doing a sudo poweroff on your VM.
Keep VM always on: A paid feature, this allows you to keep your VM running all the time.
Nickname: You can use this to give your VM a nice name that you can remember!
Public IP: This is the public IP for your VM. tipFor free accounts, the public IPs rotate every reboot.
 
Assigned URL: This is the system assigned URL/name for your VM. It&amp;apos;s long so that it&amp;apos;s never duplicated.

  Specs Tab This tab shows you the basic specifications of your VM.
  Disk Usage Tab Here you can see how much disk space you have used.
  Domains Tab Here you can create a custom/short URL for your VM and/or define subdomains and custom domains for your VM. These come in handy if you are running multiple virtual hosts on your VM.
  VM Sharing Shared VMs, another feature for our paid accounts, allows you to share your VM with other Koding members even if you are not online.
  Advanced Tab The advanced section includes settings that only advanced users should use. If you are an unexperienced user then this section should be off limits.

Reinitialize VM: This button will set your VM back to its default state. This means that the VM will be re-imaged, as if you deleted the VM and created a new one. This guide explains the reinit function in more detail.
Terminate VM: You can remove your VM and create a new one if you so choose. We recommend you reinit your VM in lieu of deleting and recreating it.

If you encounter any issues or have any questions regarding the VM settings modal you can email us at support@koding.com and we&amp;apos;ll gladly help.
</description>
  </item>
  
  <item>
    <title>Enable PHP mail() function</title>
    <link>//learn.koding.com/guides/enable-php-mail-function</link>
    <pubDate>"2015-04-29T00:00:00.000Z"</pubDate>
    <guid isPermaLink="true">//learn.koding.com/guides/enable-php-mail-function</guid>
    <author>Team Koding</author>
    <description>This short guide will cover how to enable the mail() function in PHP.
The first thing you need to do is install the sendmail package. Do this by running the following command in your Koding Terminal:
sudo apt-get install sendmail
After the previous command finishes installing the sendmail package, you need to configure it. You can do that by running the following command, which will configure the mail server:
sudo sendmailconfig
You need to choose Yes to every question or otherwise configure it as you see fit.
That&amp;apos;s it! You can now use the mail() function in your PHP app. 
</description>
  </item>
  
  <item>
    <title>EmberJS: A Starting Kit for Beginners</title>
    <link>//learn.koding.com/guides/emberjs-starting-kit</link>
    <pubDate>"2015-04-29T00:00:00.000Z"</pubDate>
    <guid isPermaLink="true">//learn.koding.com/guides/emberjs-starting-kit</guid>
    <author>Team Koding</author>
    <description>Ambitious applications are the future. The way we interact with a web application will impact our productivity. That&amp;apos;s why in this short tutorial we are going to cover some of the basics of EmberJS.
  EmberJS: The facts They say that if you use EmberJS you don&amp;apos;t have to reinvent the wheel. Well we say that they are right. EmberJS is built for developers by developers. It&amp;apos;s friendly, fast and definitely a good alternative if you want to build something awesome. And we here at Koding like it when people build awesome stuff, therefor this tutorial is here to help you get started with one of the most on-growing and well-built frameworks out there. Right, now let&amp;apos;s get started on how to set up EmberJS on Koding. 
  The Steps   Step 1. We open up a new file using your favorite code editor inside Koding, because as you may know, you have Ace pre-installed or maybe you&amp;apos;re a Vim or Emacs individual. For the sake of this tutorial we are going to use the Ace editor. 
  Step 2. We copy and paste the following code into are newly created file.
&amp;lt;!doctype html&amp;gt; &amp;lt;html&amp;gt; &amp;lt;head&amp;gt; &amp;lt;meta charset=utf-8 /&amp;gt; &amp;lt;title&amp;gt;Ember Koding 
Demo&amp;lt;/title&amp;gt; &amp;lt;/head&amp;gt; &amp;lt;body&amp;gt; &amp;lt;script type=&amp;quot;text/x-handlebars&amp;quot; 
data-template-name=&amp;quot;index&amp;quot;&amp;gt; &amp;lt;h2&amp;gt;Ember.js on Koding&amp;lt;/h2&amp;gt; &amp;lt;ul&amp;gt; {{#each item 
in model}} &amp;lt;li&amp;gt;{{item}}&amp;lt;/li&amp;gt; {{/each}} &amp;lt;/ul&amp;gt; &amp;lt;/script&amp;gt; &amp;lt;script 
src=&amp;quot;//cdnjs.cloudflare.com/ajax/libs/jquery/2.0.3/jquery.min.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt; 
&amp;lt;script 
src=&amp;quot;//cdnjs.cloudflare.com/ajax/libs/handlebars.js/1.1.2/handlebars.min.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt; 
&amp;lt;script 
src=&amp;quot;//cdnjs.cloudflare.com/ajax/libs/ember.js/1.1.2/ember.min.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt; 
&amp;lt;script&amp;gt; App = Ember.Application.create({}); App.IndexRoute = 
Ember.Route.extend({ setupController: function(controller) { 
controller.set(&amp;apos;content&amp;apos;, [&amp;apos;cyan&amp;apos;, &amp;apos;magenta&amp;apos;, &amp;apos;penguin&amp;apos;, &amp;apos;pie&amp;apos;]); } }); 
&amp;lt;/script&amp;gt; &amp;lt;/body&amp;gt; &amp;lt;/html&amp;gt;
 Ok now that we saved the file and opened up the preview and saw that 
everything worked as it should let&amp;apos;s explain a bit what is actually 
happening. First, before everything, we need the following libraries that 
make our EmberJS app work: jQuery, handlebars and of course emberJS. The 
app uses handlebars for templating.  After we set up the template and 
loaded the libraries we need to create the actual app. First we 
initialize ember and then we use a Router that helps to manage the state 
of the application and the resources needed as a user navigates the app.In our case set some content using the already created template that was 
made possible with the help of the handlebars library. And there you have 
it. A short tutorial on how to use EmberJS on 
Koding.
As always, more Quick Tips and beginner friendly guides 
from Koding coming soon, so stay tuned!
</description>
  </item>
  
  <item>
    <title>What is Bitbucket?</title>
    <link>//learn.koding.com/guides/using-bitbucket-on-koding</link>
    <pubDate>"2015-04-29T00:00:00.000Z"</pubDate>
    <guid isPermaLink="true">//learn.koding.com/guides/using-bitbucket-on-koding</guid>
    <author>Team Koding</author>
    <description>Bitbucket provides Git and Mercurial hosting for teams.
Host your code online in as many public and private repositories as you want. Free five-user tier accounts!
Manage your projects with confidence with built-in issue trackers, wikis, code comments, and pull requests.
  Setup SSH for Git If you already have ssh keys, then please skip this step.
Please follow this excellent guide by Atlassian on how to setup
ssh keys. 
  Selecting a Repository from Bitbucket Now that you have setup ssh, it is time select a repository from Bitbucket.
When signing into Bitbucket you will be presented with a list of repositories.
For this guide I am going to choose the codemirror repository

  Getting the SSH Clone Url In the repository dashboard you will see a panel in the upper right corner.
Set the url to ssh and copy the url.

  Clone the Repository Good Job so far! Now lets clone the repository into your ~ folder
$ git clone git@bitbucket.org:bvallelunga/codemirror.git
Once git is finished cloning, your terminal will look like this
$ git clone git@bitbucket.org:bvallelunga/codemirror.git
Cloning into &amp;apos;codemirror&amp;apos;...
Enter passphrase for key &amp;apos;/home/bvallelunga/.ssh/id_rsa&amp;apos;: 
remote: Counting objects: 13109, done.                                                                                                                                                                       
remote: Compressing objects: 100% (5060/5060), done.                                                                                                                                                         
remote: Total 13109 (delta 8025), reused 13109 (delta 8025)                                                                                                                                                  
Receiving objects: 100% (13109/13109), 2.78 MiB | 717 KiB/s, done.
Resolving deltas: 100% (8025/8025), done.
  Verify the Repository Exists The last step is to verify that the cloning proccess was successful.
To do this, get the directory listing and check to see if your intended folder exists.
$ ls
Applications  codemirror  Documents  Uploads  Web
As you can see, the codemirror folder exists. Thank you and have a wonderful Koding day!
</description>
  </item>
  
  <item>
    <title>A guide to Docker</title>
    <link>//learn.koding.com/guides/what-is-docker</link>
    <pubDate>"2015-04-29T00:00:00.000Z"</pubDate>
    <guid isPermaLink="true">//learn.koding.com/guides/what-is-docker</guid>
    <author>Team Koding</author>
    <description>Docker is a platform that helps developers build apps in whatever language they feel comfortable using and using any toolchain they want. Using Docker developers can build, ship and run distributed applications because it enables them to quickly put together an app by eliminating the stress between development, QA and production environments.
A developer that uses Docker can run his / hers app anywhere without the fear of it not performing as it should.
Apps that are built using Docker are completely portable and can run anywhere.
  Docker apps Anyone can get started with Docker by checking out one of the 13,000+ apps that are available in the Docker Hub. You can get started working on WordPress or a new nodejs project in just a few seconds without the hassle of having to install any other dependencies (other then Docker of course) on your Koding VM.
  Benefits The difference between a virtualized application and the Docker Engine container is that the first one includes not only the app and the necessary binaries and libraries but it contains the guest OS as well. The later runs as an separate process on the OS and thus it has the resources separation and allocation of a VM but is much more portable.
  Installing Docker on Koding Before you continue reading this section why not try a more easy way, using the Koding Package Manager (kpm) and install Docker using just one command:
kpm install docker

The version of Ubuntu that is installed on each Koding VM comes with a docker.io package and it should install Docker 0.9.1.
We can install Docker on our Koding VM using the following commands:

We update the package list

sudo apt-get update

Install Docker

sudo apt-get install docker.io

We create a link

sudo ln -sf /usr/bin/docker.io /usr/local/bin/docker

We need to edit the docker file in order to continue

sudo sed -i &amp;apos;$acomplete -F _docker docker&amp;apos; /etc/bash_completion.d/docker.io

And we now execute that file

source /etc/bash_completion.d/docker.io

After that we need to add the Docker repo key to the local keychain

sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys 36A1D7869245C8950F966E92D8576A8BA88D21E9

The last step is to add the Docker repo to the apt sources list, update and install the lxc-docker package. You can do that using the following commands

sudo sh -c &amp;quot;echo deb https://get.docker.com/ubuntu docker main\
&amp;gt; /etc/apt/sources.list.d/docker.list&amp;quot;
sudo apt-get update
sudo apt-get install lxc-docker
 tipYou can use the below command, that uses curl, for an easier installation process:
 curl -sSL https://get.docker.com/ubuntu/ | sudo sh
If you made it to this point you can run this command to check if Docker is indeed installed and works properly:
sudo docker run -i -t ubuntu /bin/bash
If you have any question or issues please email us at support@koding.com and we&amp;apos;ll gladly help.
</description>
  </item>
  
  <item>
    <title>Getting Started</title>
    <link>//learn.koding.com/guides/getting-started</link>
    <pubDate>"2015-04-29T00:00:00.000Z"</pubDate>
    <guid isPermaLink="true">//learn.koding.com/guides/getting-started</guid>
    <author>Team Koding</author>
    <description>In this Getting Started series, lets go over some basic usage of Koding. We&amp;apos;ll 
go over each section, and by the end you should have a basic understanding how 
where everything is located in Koding. 
</description>
  </item>
  
  <item>
    <title>Getting Started: The Activity Feed</title>
    <link>//learn.koding.com/guides/getting-started/activity-feed</link>
    <pubDate>"2015-04-29T00:00:00.000Z"</pubDate>
    <guid isPermaLink="true">//learn.koding.com/guides/getting-started/activity-feed</guid>
    <author>Team Koding</author>
    <description>The Activity Feed is the central location for discussion on Koding. A
public message board, with markdown support, previewing, hashtag topics
and more, it&amp;apos;s a central component to Koding&amp;apos;s Social experience.

  Posting and Formatting To post to the activity feed, find the input box in the top of the page.

Simply type something in, and press the green submit button. Just plain text
can get a bit boring though, so Koding supports full
Markdown, as seen below:

 tipMake sure to familiarize yourself with our posting guidelines.
   Previewing To preview your post, simply press the little eye on the right side of
the input box. Your Markdown will be rendered and highlighted
appropriately.

  Tagging Tagging your content is important. With tags, your content can be
categorized, which makes it easier to search and more likely to be seen
by people who follow those channels.

Here you can see the previous Markdown example, tagged with the
#markdown tag.
  Searching On the #public channel there is a search field next to
Most Liked / Most Recent, as seen below.

Searching the activity feed will search for the contents of a post, as
well as the tags.
  Channels Channels are how you view a steam of posts with a certain Tag. When you
click on a tag, it opens a channel for that tag. Clicking on the Grey
checkmark next to the channel name, will subscribe you to that channel,
and keep it open anytime you visit Koding.

To browse channels that you might be interested in, you can click the
Plus button next to &amp;quot;Channel&amp;quot; in the sidebar (as seen below), and
search for the channel you&amp;apos;re interested in.

Following channels is a great way to stay active in content that matters
to you.
</description>
  </item>
  
  <item>
    <title>Getting Started: Editing Your Profile</title>
    <link>//learn.koding.com/guides/getting-started/editing-your-profile</link>
    <pubDate>"2015-04-29T00:00:00.000Z"</pubDate>
    <guid isPermaLink="true">//learn.koding.com/guides/getting-started/editing-your-profile</guid>
    <author>Team Koding</author>
    <description>Your Koding profile is your public information page on Koding. Currently
it shows your Avatar, Name and Description, recent Koding activity, and
in the near future Badges and additional social information. In this
guide we&amp;apos;ll go over the basic usage of your Koding profile.
  Getting to your Profile To find your profile, look in the lower left of Koding, as highlighted
below.

Clicking on it will open your profile.
  Avatar, Name and Description When viewing your profile for the first time, you&amp;apos;ll see that your first
name is set to your Koding username, and your last name and description
are set to default values, as seen in the below image.

These default values are only seen by you, and if you double click them,
you can edit that field.
If you have one, Koding will use your Gravatar by default, but if you head over to your account settings Koding also supports avatar uploads directly.

</description>
  </item>
  
  <item>
    <title>Koding Chat Introduction</title>
    <link>//learn.koding.com/guides/chat-introduction</link>
    <pubDate>"2015-04-29T00:00:00.000Z"</pubDate>
    <guid isPermaLink="true">//learn.koding.com/guides/chat-introduction</guid>
    <author>Team Koding</author>
    <description></description>
  </item>
  
  <item>
    <title>How to change your command shell</title>
    <link>//learn.koding.com/guides/change-shell</link>
    <pubDate>"2015-04-29T00:00:00.000Z"</pubDate>
    <guid isPermaLink="true">//learn.koding.com/guides/change-shell</guid>
    <author>Team Koding</author>
    <description>Koding VMs, by default, come with bash as the default command shell. There are several alternatives
to bash out there (zsh, fish, csh, tcsh, etc.) and so you may wish to change
your command shell to something other than bash. To change your default command shell, follow these easy steps:
  Set a password for your koding VM user account Since the user account on your Koding VM&amp;apos;s does not have a default password, you need to set one first. Do the following:
sudo passwd &amp;lt;your koding username&amp;gt;

Input a password at the prompt and make sure you pick something secure. Going forward, this will be the password for the user account
on your Koding VM.
 tipNote: This does not change your Koding.com password. That remain the same.
 Now type in:
chsh -s &amp;lt;path to the shell you wish to use as your default shell e.g. /bin/fish/&amp;gt;

That&amp;apos;s it. Next time you open a new Terminal, it should be running the new command shell.
</description>
  </item>
  
  <item>
    <title>Getting Started: Workspaces</title>
    <link>//learn.koding.com/guides/getting-started/workspaces</link>
    <pubDate>"2015-04-29T00:00:00.000Z"</pubDate>
    <guid isPermaLink="true">//learn.koding.com/guides/getting-started/workspaces</guid>
    <author>Team Koding</author>
    <description>In this guide we&amp;apos;ll go over what Koding Workspaces are, and how
to manage them. Lets get started!
  What are they? Think of a Workspace as a logical grouping of files that have a common
theme. For example, all files that belong to a project can be placed
inside a workspace. They are essentially folders.
Workspaces are also a way to save the layout of your environment. Open Files,
Terminals, and File Explorer, Workspaces help you save not just what
you&amp;apos;re working on but how you&amp;apos;re working.
Furthermore, in upcoming releases, workspaces will have integration with
various services and developer tools, making them a quick way to get
started with a specific type of project or service.
  How to use them? 
Workspaces, highlighted in the above image, can be opened simply by
clicking on them. Creating new workspaces is as simple as using the Plus
button, in the upper right of the highlighted area.
Or you can simply right click on a folder from the FileTree and create a Workspace from there. Like in the image below.

With the workspace open, simply use the IDE as you want. Open
files, Terminals, Browsers, and Drawing Boards will be remembered between
programming sessions.
  Workspaces on the File System With each user created Workspace, a directory is created inside the
~/Workspaces directory.
You can open this directory in your Terminal or clone your projects
directly into it as you like.
  Linking Workspaces to Existing Directories Workspace folders are just normal folders on the file system. As such, we
can use Unix symbolic links to folders to achieve what we want. As an
example, lets create a Workspace linked to our Web directory.
Open up a Terminal, and type in the following commands.
mkdir -p ~/Workspaces
ln -s ~/Web ~/Workspaces/Web
Now, with the Koding UI, create a new workspace named Web. That&amp;apos;s it!
Now when you click on the workspace, the FileTree will automatically open
to the Web folder&amp;apos;s contents.
It should be noted that we created our link before we created the
Workspace. If the workspace already existed, the link would not be set
correctly.
You can freely remove the Workspace file system and replace them with any
links you desire, as the steps above use, but just be careful not to
delete any of your files in the process.
 alertThe default Workspace can&amp;apos;t be removed as that is the default Web folder on your VM.
 </description>
  </item>
  
  <item>
    <title>Hello World on Koding</title>
    <link>//learn.koding.com/guides/hello-world</link>
    <pubDate>"2015-04-29T00:00:00.000Z"</pubDate>
    <guid isPermaLink="true">//learn.koding.com/guides/hello-world</guid>
    <author>Team Koding</author>
    <description>In this Hello World series we&amp;apos;ll go over some of the most popular programming languages and learn how to implement a simple Hello World script in each one of them.
By the end of the series you should be familiar with the most popular languages and you&amp;apos;ll be able to continue with the one you like best, on Koding of course!
As a challenge after you&amp;apos;re done with the entire series have a go at this quiz and test your knowledge.
</description>
  </item>
  
  <item>
    <title>Hello World on Koding: C++</title>
    <link>//learn.koding.com/guides/hello-world/c++</link>
    <pubDate>"2015-04-29T00:00:00.000Z"</pubDate>
    <guid isPermaLink="true">//learn.koding.com/guides/hello-world/c++</guid>
    <author>Team Koding</author>
    <description>  Introduction C++ is a general-purpose programming language. It has imperative, object-oriented and generic programming features, while also providing the facilities for low-level memory manipulation.
  Implementation The first thing you need to do is to create a file called helloworld.cpp in your Koding VM and paste the bellow snippet into it.
#include &amp;lt;iostream&amp;gt;

int main() {
    std::cout &amp;lt;&amp;lt; &amp;quot;Hello World!&amp;quot;;
}
To run the above file in your Koding VM, just open your Koding Terminal and type the following commands:
g++ -o hellopp helloworld.cpp
./hellopp
 tipIf g++ is not installed on your VM, you can easily install it using these commands:
sudo apt-get update; sudo apt-get install g++
   Explanation #include &amp;lt;iostream&amp;gt;
Lines beginning with the hash sign # are commands read and interpreted by the preprocessor. They are lines interpreted before the compilation of the program itself begins. In this case, the command #include &amp;lt;iostream&amp;gt;, instructs the preprocessor to include a section of standard C++ code, known as header iostream, that allows to perform standard input and output operations, such as writing the output of this program (Hello World) on the screen.
int main()
The int is what is called the return value (in this case of the type integer). Every C++ program must have a main() function since this is the starting point.
{}
The two curly brackets, one in the beginning and one at the end, are used to group all commands together, they are used to mark the beginning and end of a
group or function.
std::cout &amp;lt;&amp;lt; &amp;quot;Hello World!&amp;quot;;
This line is a C++ statement. Statements are executed in the same order that they appear within a function&amp;apos;s body.
Your statement has three parts: first std::cout, which identifies the standard character output device; Second, the insertion operator &amp;lt;&amp;lt;, which indicates that what follows is inserted into std::cout. Finally, a sentence within quotes &amp;quot;Hello world!&amp;quot;, is the content inserted into the standard output. The semi-colon and the end shows that it is the end of the command.
And that&amp;apos;s it!
You just wrote and ran your first Hello World in C++.
</description>
  </item>
  
  <item>
    <title>Author a guide</title>
    <link>//learn.koding.com/contribute</link>
    <pubDate>"2014-08-04T00:00:00.000Z"</pubDate>
    <guid isPermaLink="true">//learn.koding.com/contribute</guid>
    <author>Team Koding</author>
    <description>In this guide series we will go over Writing and Editing guides for Koding 
University. We will cover every step of the process, but basic Git, 
Github, and Markdown knowledge will be very useful.
If you already know git, github, and markdown, here is the simple set of 
tasks you&amp;apos;ll need to do.

Review the Style Guidelines
Fork KDLearn
Clone your forked repo
Find or create your files, Make your markdown edits
Commit and push your changes to your repo
Make a pull request of your changes, against the KDLearn Repo

If you need more in depth instructions than that, please continue with 
this series below. Thanks!
</description>
  </item>
  
  <item>
    <title>Author a guide: Basic</title>
    <link>//learn.koding.com/contribute/basic</link>
    <pubDate>"2014-08-04T00:00:00.000Z"</pubDate>
    <guid isPermaLink="true">//learn.koding.com/contribute/basic</guid>
    <author>Team Koding</author>
    <description>In this guide we&amp;apos;ll go over how to contribute to the Koding University 
the easy way. We&amp;apos;ll be using Github&amp;apos;s built in editor, to make the 
forking &amp;amp; merging process easy. If you&amp;apos;re unfamiliar with Git, but you 
still want to contribute to Learn, this is the guide for you. So, lets 
get started!
  Edit on Github Each Koding guide comes with a simple &amp;quot;Edit this on Github&amp;quot; link. This 
link directs you back to a file editor on Github. Github will 
automatically fork the repo if you have not yet, and even create a branch 
so that your eventual pull request does not cause any unintended 
contributions. Lets look at how this works.
First up, find the guide that you want to edit, and look for the 
Improve this Guide button at the bottom of all guides.

  Fork the Repository If you have not contributed before you likely do not have the repository 
forked yet. Press the green button seen below, and Github will fork the 
repository for you.

  Make your Edits After forking, or if you already had Koding University Forked, you&amp;apos;ll be 
presented with a text editor for the guide that you chose to edit. From 
here, look through the guide and make your edits as you desire.

Don&amp;apos;t forget that there is a preview tab as well. The guide will look 
slightly different on Github than on Koding University; but because 
everything is formatted in Markdown you can preview it Github to ensure 
the correctness of your markdown syntax.
  Propose File Changes After you have made your edits to the document, scroll down and enter a 
title and description for the edits you&amp;apos;ve made. After you&amp;apos;re satisfied, 
press Propose file change.

This will create a new branch of your Fork and store your changes into 
that branch. To repeat, your changes have been added to your Fork, 
not to the official Koding University repository yet. To do that, you 
need to create a Pull Request.
  Create Pull Request A pull request lets Koding Staff review and merge your changes into the 
official repository. To do that, after proposing your file changes you 
will see a page like the one below.

This is your branch, on your forked repository. If you press the Create 
Pull Request button, your changes in that branch will be sent to the 
official repository to be reviewed and merged in.
This is it! You&amp;apos;ve gone from the guide on University, to editing it and 
submitting your changes for review, all without leaving your browser or 
using any complex Git commands.
  Creating a New Guide The above process is nice and simple, but there&amp;apos;s one core thing missing. 
We didn&amp;apos;t create a guide, we only edited a guide. What if we want to 
create a new guide? Luckily this Basic workflow also works with new 
guides! Lets go over that real quick.
First, click here. That link will send you to the Github 
editor with no file loaded. You can write in the editor, add a file name, 
and propose changes just like the above instructions. Remember to name 
your file with the .md extension, and adhere to the 
Guidelines.
Because you&amp;apos;re creating a new file though, you want to make sure and add 
the proper metadata to the file. Copy the following code, and place it 
into the editor.
---
author: Your Name
username: yourUsername
date: 2014-07-31
categories: [nginx]
---

Fill in Your Name with your name, and yourUsername with your Koding 
Username. The date field should be formatted in YYYY-MM-DD format, and 
the categories list is just a comma separated list of strings.

Once that&amp;apos;s all taken care of, start writing your guide! Once you&amp;apos;re 
done, follow the Propose and Pull Request instructions above, as they are 
identical.
You should note that with this method, you cannot add images to the 
repository. For that to work, have a look at the next section which uses 
Koding&amp;apos;s Editor and Git to make changes to this Koding University.
</description>
  </item>
  
  <item>
    <title>Author a guide: Previewing</title>
    <link>//learn.koding.com/contribute/previewing</link>
    <pubDate>"2014-08-04T00:00:00.000Z"</pubDate>
    <guid isPermaLink="true">//learn.koding.com/contribute/previewing</guid>
    <author>Team Koding</author>
    <description>While you shouldn&amp;apos;t need to preview your guides, since Markdown is 
designed to be human friendly in the source, if you insist you can 
preview your guides as they are on Koding University. This guide will go 
over that process. Note that this will require a bit of developer 
know-how, so be prepared to get your hands dirty. Lets get started!
  Requirements You will need a working NodeJS installation to compile the Koding 
University source. If you do not, visit the NodeJS downloads 
page and grab the installer.
  Installation With a working NodeJS installation, we need to install the KU 
dependencies, as well as a global installation of the GulpJS. This can be 
done with the following code:
npm install -g gulp
cd .metalsmith
npm install
  Building With Gulp installed, simply run the following command, to compile the 
entire project into HTML.
(Ignore cd .metalsmtih if you&amp;apos;re already in that directory)
cd .metalsmith
gulp
The .metalsmith/build directory will contain all of the compiled html, 
css, and any static resources (such as images/etc) from the markdown 
directory.
Compiling can take 1-2 minutes, so be patient.
  Previewing If you want to preview the compiled site, open a new Koding Terminal tab 
and run the following:
(Ignore cd .metalsmtih if you&amp;apos;re already in that directory)
cd .metalsmith
gulp preview
This will run a small HTTP Server on Port 8000, ie: 
http://hostname.you.koding.io:8000. Keep this tab open, and in  a 
different Koding Terminal tab run your gulp command from above.Each time you compile the site, this will show your compiled site.
  Compiling as you type To have your Markdown compiled as you write your documents, run the 
following commands:
(Ignore cd .metalsmtih if you&amp;apos;re already in that directory)
cd .metalsmith
gulp watch
This, in combination with the preview command above, will compile the 
site each time you change the Markdown.
Note that if you add images for your guide to use, you&amp;apos;ll want to run the 
full gulp command again.
And that sums it up! You now know how to contribute to Koding University, 
in multiple ways. Keep up the awesome work, and we look forward to your 
contribution!
</description>
  </item>
  
  <item>
    <title>Author a guide: Overview and Guidelines</title>
    <link>//learn.koding.com/contribute/guidelines</link>
    <pubDate>"2014-08-04T00:00:00.000Z"</pubDate>
    <guid isPermaLink="true">//learn.koding.com/contribute/guidelines</guid>
    <author>Team Koding</author>
    <description>When submitting guides to Koding University you must understand the 
document structure, as well as writing styles. Guides on Koding 
University should be formatted in a similar style and tone. This guide 
will outline some guideliness for guide submissions to adhere to.
Note that while these should be taken as best practices more than 
absolute law, submissions may be rejected if they deviate too far from 
the guidelines.
  What is Koding University? Koding University is an Open Source, statically generated site.  Each 
document is stored as Markdown files found in the KDLearn 
Repository. The actual implementation code is hidden in the 
dotfile directory named .metalsmith. We&amp;apos;ll go over this directory in 
the Previewing guide.
  File Structure By keeping the content in the main directory, and hiding the 
implementation, the file structure becomes content first. Meaning 
that at the root of the repo you see the actual content structure. You do 
not need to know how to compile the site, or any real implementation 
details, just write markdown!
As an example, lets look at the markdown file that you&amp;apos;re reading now.If you look at the repo, you&amp;apos;ll see a file named 
contribute/guidelines.md. This file compiles to 
http://learn.koding.com/contribute/guidelines/index.html. Notice how 
the path contribute/guidelines is the same for the source and output 
html? Below are a few more examples.

./contribute/index.md becomes
http://learn.koding.com/contribute/index.html
./guides/markdown.md becomes
http://learn.koding.com/guides/markdown/index.html
./faq/one-more-step.md becomes
http://learn.koding.com/faq/one-more-step/index.html
./guides/your-new-guide.md becomes
http://learn.koding.com/guides/your-new-guide/index.html

See the pattern? Each file can be accessed from the same name on the 
website, minus the .md. ./foo.md becomes /foo on the website.
That means if you add a file, either markdown or image, it will be 
added to the site with the same location relative to the project root.It&amp;apos;s not hidden away in some obscure and complicated file structure, what 
you see in markdown is what shows up on the site. Content first.
  Recommended URL Structure Now that you understand the File Structure and how it correlates to the 
generated URL, we recommend that you adhere to the following naming 
conventions for your document URLs.

Guides should be within the kdlearn/guides directory.
Your filename should describe your guide in clear wording.
Be concise. Try not to have more than 5 words for a filename.
No special characters. Plain words and hyphens only. Example: 
foo-bar-baz.md.

  Title and Description A guide&amp;apos;s title and description are also very important to the document.These will be how people find your guide.
The title is your Markdown Header 1. It should be similar to the URL, 
concise, no more than 7 words.
The description is the first paragraph of your guide, directly following 
the Markdown Header (title). Explain what the guide is about, and what 
the technologies being explained are. Keep it to a single paragraph.
  Headers are awesome, use them. Headers are a great way to separate content sections. They stand out, can 
be linked to directly, and have levels built into them without nesting 
indentation.
These are preferred over ordered lists for larger sections. Ordered lists 
are great for small steps, headers are great for larger steps / 
instructions.
Don&amp;apos;t forget, headers with levels (## Header1, ### Header 3, and so 
forth) should be used to group content just like you do with HTML&amp;apos;s 
&amp;lt;h2&amp;gt;s and so forth. You can review Header Markdown here
</description>
  </item>
  
  <item>
    <title>Author a guide: Advanced</title>
    <link>//learn.koding.com/contribute/advanced</link>
    <pubDate>"2014-06-01T00:00:00.000Z"</pubDate>
    <guid isPermaLink="true">//learn.koding.com/contribute/advanced</guid>
    <author>Team Koding</author>
    <description>In this guide we&amp;apos;ll go over contributing by using Git directly in your 
Terminal, and editing our documents on Koding. While we will go over 
every step, general Git and Terminal knowledge will be very helpful, and 
are recommended. So, lets get started!
  Forking and Cloning First up, we should cover the requirements.

A Koding Account
A Github Account
Git (Comes with your Koding VM)
SSH Key on Github. If you&amp;apos;re not familiar with this, refer to this 
tutorial

Next, we need to &amp;quot;Fork&amp;quot; the KDLearn Repo. This will create your 
own version of the repo on Github, and lets you push your changes to this 
repo.
To do this, press the Fork button seen in the following image, from the 
KDLearn repo page:

This will create a new Github repository with the name 
github.com/yourUsername/kdlearn. The purpose of this forked repository 
will become clear once we make our Pull Request.
Next, we will want to clone our newly forked repository. Head on over to 
your Koding Terminal and type in the following command:
git clone https://github.com/yourUsername/kdlearn.git
This will clone your Forked Repository to your Koding VM, into the folder 
kdlearn.
  Writing a new Guide Now that we have our repo cloned, lets add our guide. Open up the Ace 
editor and open a folder titled kdlearn. In this section we&amp;apos;re 
going to write a guide, but if you just want to edit another guide, 
scroll down to the edit section.
Lets create a file in the guides folder with the name myguide.md.Name the file whatever you like, just try to keep it short and url 
friendly.

This is where we will write all of our content, in Markdown. For this 
tutorial i am just going to use the following text:
# Awesome Guide

This is my **awesome** guide! Follow along, and learn to be awesome!

Lorem ipsum dolor sit amet, consectetur adipiscing elit. Suspendisse dui 
nulla, posuere non urna in, lobortis malesuada erat. Morbi ultricies 
fringilla condimentum. Aliquam vel sodales mi, ornare ullamcorper est.  
Nulla laoreet dapibus libero, in consectetur dolor fermentum vel. Etiam 
quis magna eget orci fringilla tincidunt et non justo. Phasellus porta 
dictum libero. Suspendisse fringilla gravida arcu, eu venenatis nunc 
fermentum sed. Phasellus est libero, auctor ac dignissim ac, consequat a 
libero. Pellentesque iaculis sem tortor.  Suspendisse viverra, arcu ac 
viverra dapibus, massa odio adipiscing neque, eget adipiscing magna quam 
id dui. Morbi semper nisi ac accumsan tincidunt.

Now that we have written our guide, we need to add some metadata to it.
  Metadata Metadata is, as the name says, data about our data. This is where you can 
specify the title of your document, the author, the date, and categories.Lets take a look at our above markdown with some of this metadata.
---
author: Lee Olayvar
username: leeolayvar
date: 2014-06-11
description: &amp;apos;My awesome guide, about awesome stuff.&amp;apos;
categories: [awesome]
---

# Awesome Guide

This is my **awesome** guide! Follow along, and learn to be awesome!

Lorem ipsum dolor sit amet, consectetur adipiscing elit. Suspendisse dui nulla, 
posuere non urna in, lobortis malesuada erat. Morbi ultricies fringilla 
condimentum. Aliquam vel sodales mi, ornare ullamcorper est. Nulla laoreet 
dapibus libero, in consectetur dolor fermentum vel. Etiam quis magna eget orci 
fringilla tincidunt et non justo. Phasellus porta dictum libero. Suspendisse 
fringilla gravida arcu, eu venenatis nunc fermentum sed. Phasellus est libero, 
auctor ac dignissim ac, consequat a libero. Pellentesque iaculis sem tortor.  
Suspendisse viverra, arcu ac viverra dapibus, massa odio adipiscing neque, eget 
adipiscing magna quam id dui. Morbi semper nisi ac accumsan tincidunt.

Most of that is pretty logical. The --- before and after signifies the 
metadata start and end, and author, date, description, and categories 
should be standard nomenclature to you.
  Editing a Guide If you&amp;apos;re just looking to update a guide, fix typos, or make general 
improvements you have it even easier.
Just like before, open up Ace and find the file you want to edit.If you&amp;apos;re not sure where the proper markdown is located, find the url of 
the page you want to edit and think of them like folders. Then, review 
the File Structre section and you should have a pretty 
good idea where the files are located.
Make your edits, and follow onto the next section!
  Adding, Committing, Pushing Now that we have made our changes, whether it&amp;apos;s a new guide or an edited 
guide, we need to add the file, commit it, and push it to our repo. Open 
up the Terminal one last time.
To add your changes, run the following command. Replacing myguide with 
the files you changed.
git add guides/myguide.md
To commit your changes, run the following command. Replacing I added an 
awesome guide with a message that clearly describes your changes.
git commit -m &amp;quot;I added an awesome guide&amp;quot;
You can also ommit the whole -m &amp;quot;message&amp;quot; flag and use an editor such 
as Nano or Vim to make your changes. But the above is simpler for this 
guide.
And finally, lets push our changes to our repo on Github.
git push origin master
If you&amp;apos;re not familiar with Git at all, run each of these commands in 
sequence.  We won&amp;apos;t be covering Git in full, so for more information 
please see the official documentation.
  Making a Pull Request Now that you pushed to Github you can visit your forked Github repository 
and make a pull request. To do this, look for the &amp;quot;Pull Request&amp;quot; button 
on your forked repo:

This will take you to a page where you can review all of the commits you 
made, and ensure that you want to make a pull request. Please review your 
changes for typos, spelling, and grammar.
If you spot an issue, and need to make more changes, go back to 
Koding and make the edits you need. Make sure to add, commit, and 
push them just like before.
If you&amp;apos;re happy with your changes, press the big green Create Pull 
Request button.
  Waiting for your PR to be Accepted Once your PR is made, you&amp;apos;re done! The Koding Team will review your edits 
or new guides and make feedback.
If we need you to make corrections, formatting or otherwise, go through 
the same steps as before. Your changes, once pushed to Github, will 
automatically be reflected in your Pull Request.
Once they are accepted, and your pull request is merged, the site will be 
updated and you&amp;apos;re changes will be live. Thanks for your contribution!
In the next guide we&amp;apos;ll go over previewing your work in a local 
installation of Koding University.
</description>
  </item>
  
  <item>
    <title>What is Koding?</title>
    <link>//learn.koding.com/faq/what-is-koding</link>
    <pubDate>"2015-07-21T00:00:00.000Z"</pubDate>
    <guid isPermaLink="true">//learn.koding.com/faq/what-is-koding</guid>
    <author></author>
    <description>Koding is a robust and feature rich cloud-based development environment complete with free virtual machines (VMs), an attractive IDE and sudo level terminal access. Your ideal software development playground and everything you need to move your software development to the cloud! A Koding VM has many of the popular software packages and programming languages preinstalled so that you can focus on learning vs installing and configuring.
You will be up and running in minutes on your own cloud-based Linux boxes where you can learn programming languages like Ruby, Go, Java, NodeJS, PHP, C, C++, Perl, Python&amp;#x2026;the list goes on! You can experiment with installing, configuring/hacking WordPress, Laravel, Django, Bootstrap and a slew of others or fire up a MySQL, Mongo, or Postgres server with the click of a button. If clicking buttons is not your thing (yes, we are that way too!) then you also have your favorite vim and emacs right there.
Our collaboration features allow you to pair-program with your friends and colleagues by allowing you to share (in real-time) your online IDE, Terminal and white board. All Koding virtual machines come with full root access so you are not hindered in any way.
Say goodbye to localhost!
</description>
  </item>
  
  <item>
    <title>How do I ask for support?</title>
    <link>//learn.koding.com/faq/support</link>
    <pubDate>"2015-04-06T00:00:00.000Z"</pubDate>
    <guid isPermaLink="true">//learn.koding.com/faq/support</guid>
    <author></author>
    <description>If your question is not answered on Koding University, feel free to send us a support request.
Because we process a large volume of inbound emails every day, it may take us a few hours before we get to your message but we will get to it within 24 hours. 
In the meantime, here are a few resources that may be helpful: 

The Koding Activity Feed (in case others are discussing a related issue and have a recommendation)
Requests for new guides can be sent here

</description>
  </item>
  
  <item>
    <title>How can I earn &amp; claim additional storage space through referrals?</title>
    <link>//learn.koding.com/faq/redeem-referrals</link>
    <pubDate>"2015-12-07T00:00:00.000Z"</pubDate>
    <guid isPermaLink="true">//learn.koding.com/faq/redeem-referrals</guid>
    <author></author>
    <description>  Earning free referral space You can earn up to 500MB per referral on Koding. Earning referrals is as easy as
inviting your friends, colleagues, classmates, students, etc. to join Koding!
To get started, head over to Account Settings and
grab your personalized referral link (see location details in the graphic below).
You can then use the easy to use social media share buttons to distribute your personal
referral link or send/share the link directly via your preferred distribution method.

Each new user who signs up and verifies a Koding account earns you 500MB in extra
storage space! Your friend also gets an extra 500MB. It&amp;apos;s a win-win!
Note: The maximum storage that can be earned via referrals is 7GB (or 14 referrals) which
means you can grow the storage of your free Koding account to 10GB (3GB default + 7GB earned
through referrals). Referrals can be earned by paid or free accounts. The maximum earned storage
limit is the same for both types.
 tipThe section below outlines how you can redeem space once you have earned it. Please
note that redemption can only happen in multiples of whole number GBs. Read more below.
   Redeeeming your earned referral storage If you have earned extra storage space on your Koding account as a result of referrals
or other offers we&amp;apos;ve made available to our users, then reclaiming that earned space
is now easier than ever.
 alertBefore we proceed, please note that referral space can only be claimed in increments of
whole number GBs. That means if you have referred one person and earned 500MB (0.5GB) then
you will need to wait until another person signs up using your referral link so that you get to a
whole number (1GB) of earned space which can then be redeemed by following the process
outlined below.
 To add earned space to your VM, head over to VM settings and click the plus sign located
next to the disk size indicator (as shown in the image below).

Once you click the plus sign, you will be shown a modal that will allow you to resize
your existing disk and add all or some of your earned storage.

 alertIf you feel there&amp;apos;s an error in your reported earned storage space, please send us a note.
 </description>
  </item>
  
  <item>
    <title>Is there a Terminal command to open files in Editor?</title>
    <link>//learn.koding.com/faq/kdopen</link>
    <pubDate>"2015-07-02T00:00:00.000Z"</pubDate>
    <guid isPermaLink="true">//learn.koding.com/faq/kdopen</guid>
    <author></author>
    <description>The kdopen command does just that! 
First you need to install kdopen using our kpm package manager. Type the following command in Terminal to set up the required components for kdopen:
kpm install kdbin
 tipIf kpm itself is not installed, you can install it using the command 
curl -sSL learn.koding.com/kpm.sh | sh
 Once kdbin is installed, you can now type the following command in Terminal
to open a file in the Koding Editor:
kdopen &amp;lt;filename&amp;gt;
kdopen supports wildcards so if you type:
kdopen *.html
it will open each file with the extension .html (in the current directory) in its own tab on the Editor.
If you are opening a file that does not exist, kdopen will create the file first
and then open it up. The file will be created in the current directory.



</description>
  </item>
  
  <item>
    <title>How do I reset my password?</title>
    <link>//learn.koding.com/faq/reset-password</link>
    <pubDate>"2015-04-28T00:00:00.000Z"</pubDate>
    <guid isPermaLink="true">//learn.koding.com/faq/reset-password</guid>
    <author></author>
    <description>  How do I reset the password for my Koding account? To reset your password, head over to Account Settings. The password change
field is located at the bottom of the Profile tab.
Once you input the new password, the system will prompt you for the current password before making the change. Once
your password is verified, the password will be changed and you will also receive an email notification letting you
know that your password has been updated.
  How do I reset my password if I login using GitHub / Twitter / Facebook / Google+ etc.? If you are logging into Koding using Twitter, Github, Facebook, Google+, etc. then you were not required to set up
a password when you first created your account. In a sitution such as this, follow the steps below to set up your
password:

Log out from koding.com
Head over to the password recovery page
Enter your email address and the system will send you an email with the link to reset/set your password

 tipEven if you set up a password using the steps above, you can still log in using GitHub, Twitter, Facebook,
Google+, etc. or you can use the new password to log in. Both will work.
 </description>
  </item>
  
  <item>
    <title>Can I change my Koding username?</title>
    <link>//learn.koding.com/faq/change-username</link>
    <pubDate>"2015-04-14T00:00:00.000Z"</pubDate>
    <guid isPermaLink="true">//learn.koding.com/faq/change-username</guid>
    <author></author>
    <description>In short no. Sorry :(
Why...? It&amp;apos;s because when you first create your account we provision a lot of support services in the background for your account and all of these would need to get updated. This becomes problematic if you have made changes to your VM (even if you have created one file). If you really want to change your username, the only option is to delete your current account and make a new one with the desired username.
But ... you can however , change your display name as seen associated with your the bulletin board posts. Just browse to https://koding.com/Account/Profile where you may change &amp;quot;Name&amp;quot; and/or &amp;quot;LastName&amp;quot; as you would like them to appear to other koding users wherever you chat on koding. This quite niftily has the side-effect of changing your nick on all of you past postings instantaneously. Note that this feature does not in any way allow you to be anonymous. Anyone who clicks on your chat nick (whatever it may be at the time) will always see your canonical username in the URL of your profile.
So to be clear , you may change your display name at any time but this does not affect your login username or VM URL. As stated above that is your system UID and can not be changed.
</description>
  </item>
  
  <item>
    <title>How can I close the VM panel/sidebar to get more screen space?</title>
    <link>//learn.koding.com/faq/sidebar-collapse</link>
    <pubDate>"2015-07-21T00:00:00.000Z"</pubDate>
    <guid isPermaLink="true">//learn.koding.com/faq/sidebar-collapse</guid>
    <author></author>
    <description>Our computer screens come in all shapes and sizes and if you don&amp;apos;t have a high res screen,
then the amount of space occupied by the VM panel/sidebar and the file tree can be a bit
too much. Did you know that both the VM panel/sidebar and file tree can be collapsed?
There are two ways you can collapse the sidebar and filetree.

Using collapse icons
Double click the panel dividers

  Using collapse icons Both the sidebar and the file tree have handy icons that will cause the respective panels to
collapse. The animation below shows how.

  Double clicking the panel dividers   Collapsing/Closing the VM Panel/Sidebar Double click the dividing column line between the VM panel and file tree and it will collapse
the panel! To expand, click the logo. (see image below for an example).
  Collapsing/Closing the file tree Double click the dividing column line between the file tree and the IDE/Terminal and it will collapse
the file tree panel! To expand, click the folder icon. (see image below for an example).

 tipThe sidebar and filetree can only be collapsed when you are in the VM section of Koding.
They cannot be collapsed when in Channels or Messages.
 </description>
  </item>
  
  <item>
    <title>How can I reset my VM back to its original state?</title>
    <link>//learn.koding.com/faq/vm-reinit</link>
    <pubDate>"2015-04-28T00:00:00.000Z"</pubDate>
    <guid isPermaLink="true">//learn.koding.com/faq/vm-reinit</guid>
    <author></author>
    <description>Sometimes, after you&amp;apos;re installed a slew of software and things have started to conflict,
there&amp;apos;s a need to send your VM back to its original state. To achieve that, Koding offers
an easy reinitialization function which you can use at any time you like.
  What does reinitialization do? When you reinit your VM, the system will delete everything on your VM and create a new one from
scratch.
 alertNOTE: You will lose all existing data (unless you back it up somewhere) on the VM
that you are reinitializing. This is an irreversible process so please proceed with caution. To backup
your data, we recommend you use FTP
to transfer the files.
 Reinitialization will however preserve your VM settings and any domain names that you may have created.
  How do I reinit my VM? To reinit your VM, follow these easy steps:

head over to the VM settings modal (as shown in the screen shot below)
turn your VM to &amp;quot;on&amp;quot; state (if it is off)
then click on the &amp;quot;Advanced&amp;quot; tab
click the &amp;quot;Reinitialize&amp;quot; button inside the Advanced section to begin the reinit process.

Once you initiate a reinit, you will see appropriate messages on the screen as your VM rebuilds.

</description>
  </item>
  
  <item>
    <title>Should I use my VM's IP or Address?</title>
    <link>//learn.koding.com/faq/vm-ip-vs-address</link>
    <pubDate>"2015-04-28T00:00:00.000Z"</pubDate>
    <guid isPermaLink="true">//learn.koding.com/faq/vm-ip-vs-address</guid>
    <author></author>
    <description>Koding gives you access to your VMs IP, as well as an Address that
always points to that VM&amp;apos;s IP, so which should you use, and why?
While your VMs IP will operate perfectly fine, the IP is dynamic. In
other words, it will change. Because of this, Koding gives you a VM
Address, which will always point to your VM, regardless of
IP changes, so this is what you usually want to use.
 tipIP addresses of &amp;quot;Always On&amp;quot; VMs don&amp;apos;t change even after the VM reboots.
 If you have trouble finding your VM Address, click here.
</description>
  </item>
  
  <item>
    <title>How can I split the editor and terminal area?</title>
    <link>//learn.koding.com/faq/split-panes</link>
    <pubDate>"2015-06-20T00:00:00.000Z"</pubDate>
    <guid isPermaLink="true">//learn.koding.com/faq/split-panes</guid>
    <author></author>
    <description>Sometimes one editor or terminal screen is not enough, so just like you can on any code editor and terminal app on your computer, you can also split the editor and terminal areas on Koding to gain more virtual windows.
The image below shows the first method you can use to split panes. The drop-down menu provides the split options.

The second (and more fun) method of splitting panes is to use our visual pane splitter as shown in
the animated gif below.
Simply move your mouse to the center of a pane (horizontal or vertical center) and you will see a animated/visual split bar appear showing you a preview of the split. click to make it permanent!




Have a crazy split screen setup, share it with us on Twitter! :)
</description>
  </item>
  
  <item>
    <title>How can I delete my account?</title>
    <link>//learn.koding.com/faq/delete-account</link>
    <pubDate>"2015-04-23T00:00:00.000Z"</pubDate>
    <guid isPermaLink="true">//learn.koding.com/faq/delete-account</guid>
    <author></author>
    <description>You do not have to contact Koding support if you wish to delete your account. Simply head over to Account Settings from where you can easily initiate the deletion process.
It would help us immensly if you can take the short survey presented on the account deletion screen we can understand why we lost you and how we can improve.
</description>
  </item>
  
  <item>
    <title>How can I monitor network traffic/usage?</title>
    <link>//learn.koding.com/faq/vm-network</link>
    <pubDate>"2015-10-13T00:00:00.000Z"</pubDate>
    <guid isPermaLink="true">//learn.koding.com/faq/vm-network</guid>
    <author></author>
    <description>There are a variety of tools for Ubuntu that you can install on your VM in order to monitor traffic and network usage. Listed below are three of our favorites.
 tipBefore installing any of the tools mentioned below, make sure you update your
repositories by using the command: sudo apt-get update
 
nload: This tool allows users you to monitor the incoming and outgoing traffic separately. It also draws out an ascii graph to indicate the same, the scale of which can be adjusted. Easy and simple to use, and does not support many options. So if you just need to take a quick look at the total bandwidth usage without details of individual processes, then nload will be handy.
To install, type the following command in Terminal:sudo apt-get install nload -y
and then to run, type:nload

iftop: This tool measures the data flowing through individual socket connections, and it works in a manner that is different from Nload. Iftop uses the pcap library to capture the packets moving in and out of the network adapter, and then sums up the size and count to find the total bandwidth under use. Although iftop reports the bandwidth used by individual connections, it cannot report the process name/id involved in the particular socket connection. But being based on the pcap library, iftop is able to filter the traffic and report bandwidth usage over selected host connections as specified by the filter.
To install, type the following command in Terminal:sudo apt-get install iftop -y
and then to run, type:sudo iftop -n

iptraf: This is an interactive and colorful IP Lan monitor. It shows individual connections and the amount of data flowing between the hosts.
To install, type the following command in Terminal:sudo apt-get install iptraf iptraf-ng -y
and then to run, type:sudo iptraf

nethogs: This is a small &amp;apos;net top&amp;apos; tool that shows the bandwidth used by individual processes and sorts the list putting the most intensive processes on top. In the event of a sudden bandwidth spike, quickly open nethogs and find the process responsible. Nethogs reports the PID, user and the path of the program.
To install, type the following command in Terminal:sudo apt-get install nethogs -y
and then to run, type:sudo nethogs

vnstat: This utility is bit different from most of the other tools. It actually runs a background service/daemon and keeps recording the size of data transfer all the time. Next it can be used to generate a report of the history of network usage. Vnstat is more like a tool to get historic reports of how much bandwidth is used everyday or over the past month. It is not strictly a tool for monitoring the network in real time.
To install, type the following command in Terminal:sudo apt-get install vnstat -y
and then to run, type:sudo service start vnstat
Running vnstat without any options would simply show the total amount of data transfer that took place since the date the daemon is running. To monitor the bandwidth usage in realtime, use the -l option (live mode). It would then show the total bandwidth used by incoming and outgoing data, but in a very precise manner without any internal details about host connections or processes.  

</description>
  </item>
  
  <item>
    <title>Are inactive accounts cleaned up?</title>
    <link>//learn.koding.com/faq/inactive-vms</link>
    <pubDate>"2015-07-21T00:00:00.000Z"</pubDate>
    <guid isPermaLink="true">//learn.koding.com/faq/inactive-vms</guid>
    <author></author>
    <description>  How does Koding ensure that the platform is scalable and performant for all users? We perodically clean up VMs of inactive accounts to ensure that the dormant resources
allocated to these accounts are not a burden for the system. This ensures a &amp;quot;speedy&amp;quot;
Koding for everyone who uses it regularly.
 tipInactive VMs are cleaned up but the account is not itself deleted. Paid account VMs
are not a part of the cleanup process even if they are unused.
   The cleanup process 
If a user has not logged into their account in over 21 days, we send them an email notification
requesting that they confirm their active status by simply logging back into their account.
However, if by the 25th day the user is still dormant/inactive, another email is sent but this
time with the notice that the inactive VM will be deleted (along with all the data inside it).
On day 30, the dormant VM is deleted permanently.

This type of cleanup is necessary because with hunderds of thousands of accounts,
we want to ensure that our regular users get the full benefit of the resources of the platform.
 tipEven though the VM is terminated, we still keep a record of any referral space you may
have accumulated when you were an active user so if you return at any point in the future,
you can reclaim the referral space.
 Maintaining your account is simple, just log back in!
</description>
  </item>
  
  <item>
    <title>What is my sudo/root password?</title>
    <link>//learn.koding.com/faq/sudo-password</link>
    <pubDate>"2015-04-28T00:00:00.000Z"</pubDate>
    <guid isPermaLink="true">//learn.koding.com/faq/sudo-password</guid>
    <author></author>
    <description>To switch to the root user on your VM, simply type in:
sudo su
By default, there is no sudo password on your Koding VM. It is blank/empty.
So, if you want to use run a command as the root user, all you need to do is as follows:
sudo &amp;lt;command you wish to use&amp;gt;
When you hit enter, the sudo level command you wish to run without a password prompt.
If you wish to, you can add a sudo password yourself. To do this, change user to root by typing:
sudo su
and then create a password for the root user by typing:
passwd
You will be asked to type in the new password twice. Once done, the new password you picked is the password you will need to use when
using the sudo command from that point on.
</description>
  </item>
  
  <item>
    <title>Guidelines to keep in mind when sharing on Koding's Activity Feed.</title>
    <link>//learn.koding.com/faq/posting-guidelines</link>
    <pubDate>"2015-04-17T00:00:00.000Z"</pubDate>
    <guid isPermaLink="true">//learn.koding.com/faq/posting-guidelines</guid>
    <author></author>
    <description>  A few basic rules: 
If your question in of the category &amp;#x201C;how do I&amp;#x2026;&amp;#x201D; then always check Koding University. Chances are high that we have a handy dandy guide for you.
Ask your questions in a way that would make it easy for others to answer. (hint: ask the question as if you were trying to answer it). More awesome &amp;#x201C;question asking techniques&amp;#x201D; here.
Posts that contain any of these will be mercilessly deleted by the moderators and your account could be banned:
abusive, racist or derogatory posts
meaningless posts
referral links to 3rd party sites


If someone answers your question with a relevant answer, be polite and thank them (or go the extra step and &amp;#x201C;like&amp;#x201D; them!).
We all need to collaborate to keep the Koding community klean. Report any abuse to abuse@koding.com. Fight back on any abuse!
Don&amp;#x2019;t share private info (email address, phone number, etc.)
Use Markdown whenever possible (posting code fragments, links, images, etc.) Our handy Markdown guide can be found here. Preview your Markdown before posting using the M&amp;#x2193; button.
When posting code, only post relevant portions. A good rule of thumb is not to exceed 10-15 lines.
Don&amp;#x2019;t ask for the Koding support team to help via a post here. Instead, hit us up at support@koding.com. We monitor that inbox constantly (visualize a Koder positioned like a Hawk, watching that inbox).
If you think you can remotely help someone, expert or not, just do it.

  Tools we recommend: 
For screen grabs: Monosnap
For posting code: Gist
For executables: IDEone
For HTML, CSS and JS: JSFiddle

</description>
  </item>
  
  <item>
    <title>What ports are open on my Koding VM?</title>
    <link>//learn.koding.com/faq/open-ports</link>
    <pubDate>"2015-04-06T00:00:00.000Z"</pubDate>
    <guid isPermaLink="true">//learn.koding.com/faq/open-ports</guid>
    <author></author>
    <description>Most Unix ports are available on Koding VMs. We do not block any TCP traffic
(inbound or outbound). See the following list for open ports, as well as ports in use by default.

Ports 2 through 65,534 are open.
Port 80 is taken by Apache, but this can be turned off to free up the port. To turn
off Apache, type in: sudo service apache2 stop in Terminal.
Ports 2 through 1,024 require sudo access.

</description>
  </item>
  
  <item>
    <title>How do I transfer/copy files to and from my VM?</title>
    <link>//learn.koding.com/faq/transfer-files</link>
    <pubDate>"2015-04-06T00:00:00.000Z"</pubDate>
    <guid isPermaLink="true">//learn.koding.com/faq/transfer-files</guid>
    <author></author>
    <description>  I want to copy a few files Getting a few files to your Koding VM is simple and there are a variety of methods. We&amp;apos;ve put together a short video titled Importing your files in the Video&amp;apos;s section of Koding University. Check that out for a simple drag-drop method to upload a few files.
  I want to copy or download a large number of files To copy several files, we prepared a number of guides that can help you. Head over to our file transfer category and choose one of the methods that you think best suits your needs.
  I want to download my files If you want an easier way to download your files follow this steps:
Select multiple files in the IDE (you can use CTRL/CMD + left click) and then click on the little arrow.

After that select the Compress option and the type of archive you want to create.
The last step you need to do it to place the archive into the Web folder and then just access the a similar URL:
http://KODING_USERNAME.koding.io/&amp;lt;path/name of the archive&amp;gt;
Find out more about your VM hostname here.
</description>
  </item>
  
  <item>
    <title>What is my VM Hostname/Address/Domain Name?</title>
    <link>//learn.koding.com/faq/vm-hostname</link>
    <pubDate>"2015-04-28T00:00:00.000Z"</pubDate>
    <guid isPermaLink="true">//learn.koding.com/faq/vm-hostname</guid>
    <author></author>
    <description>The system assigned name for your VM is available on VM settings modal under the label: Assigned URL.
 tipThis is an assigned name and is not editable.
 We realize that most users will probably run into trouble trying to remember our creatively designed VM names
(sorry, we had to make sure they were unique) so Koding VMs can also very easily be assigned a username based
namespace (username.koding.io). This makes it easy to remember the domain name for your VM since it is your
username! (Note: You can still reach the VM by using the system assigned name as described above.)
To assign your username based domain to a VM, follow these 2 easy steps:

open the VM settings modal and click on the &amp;quot;Domains&amp;quot; tab to reveal the domain settings (as shown in the image below)
toggle the switch next to your personal namespace to enable it for this VM. (Note: If you have more than one VM, you will be able to reassign the same namespace on other VM settings modals but only one VM can have the namespace applied to it at any given time.)


In addition to this, Koding also allows you to create sub-domains
so that if you want to configure your apache/nginx web server to serve multiple
virtual hosts, it&amp;apos;s easy to assign them all their own unique sub-domains. Read more about virtual hosts.
To use this feature, head back to the VM settings modal and follow these 3 easy steps:

click on the &amp;quot;Domains&amp;quot; tab in the VM settings modal
click the &amp;quot;Add new domain&amp;quot; button to open up an input box where you can type in a new sub-domain. All you need to provide is the sub-domain, we will add the .username.koding.io part automatically.

once added, these sub-domains become available on the setting modals of all your VMs for easy reassignment
deleting a sub-domain is as easy as adding one!


</description>
  </item>
  
  <item>
    <title>How do turn off my my Koding VM?</title>
    <link>//learn.koding.com/faq/vm-poweroff</link>
    <pubDate>"2015-04-23T00:00:00.000Z"</pubDate>
    <guid isPermaLink="true">//learn.koding.com/faq/vm-poweroff</guid>
    <author></author>
    <description>To turn off your VM, we recommend that you use the power on/off toggle in the VM settings modal. This ensures that all internal API calls are triggered and all Koding services are aware that you have powered down your VM.
 tipVMs for our free accounts automatically turn off after 60 minutes of inactivity on our IDE or Terminal
so there&amp;apos;s no need to manually turn the VM off.
 That being said, sometimes you may need to restart your VM and want to do it via the Terminal. In such cases, simple type the following command in Terminal:
sudo reboot
you will see the following msg on your Terminal while the reboot command is processed and your VM restarts
connecting................
followed by
Failed to connect to terminal, click here to try again.
followed by
An unknown error occured, please open a new tab. Click here to dismiss this one.
both of the above messages, even though they look like errors are normal because a manual reboot has been requested.
We don&amp;apos;t recommend using sudo poweroff or sudo shutdown to power down your VM as it will leave the associated sub-systems in an unknown state which may disrupt you from using your account. Use the VM settings modal to stop/turn off your VM.
</description>
  </item>
  
  <item>
    <title>MySQL Socket Error 2002</title>
    <link>//learn.koding.com/faq/mysql-socket-error-2002</link>
    <pubDate>"2015-04-06T00:00:00.000Z"</pubDate>
    <guid isPermaLink="true">//learn.koding.com/faq/mysql-socket-error-2002</guid>
    <author></author>
    <description>If you try to use MySQL and receive an error that looks similar to the
following:
ERROR 2002 (HY000): Can&amp;apos;t connect to local MySQL server through socket
&amp;apos;/var/run/mysqld/mysqld.sock&amp;apos;
First, make sure MySQL is installed and running on your VM. To install
MySQL, follow this installation guide.
Once you have confirmed that MySQL is installed, start it by running the following command:
sudo service mysql start
This should get rid of the Socket Error 2002 error.
If not, send us an email at support@koding.com and we can troubleshoot for you.
</description>
  </item>
  
</channel>
</rss>
